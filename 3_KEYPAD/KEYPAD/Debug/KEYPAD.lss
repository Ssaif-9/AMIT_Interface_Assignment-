
KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000019e2  00001a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c84  00000000  00000000  00001a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001b6  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000028d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c85  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000830  00000000  00000000  0000471d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001227  00000000  00000000  00004f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000514  00000000  00000000  00006174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000726  00000000  00000000  00006688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d59  00000000  00000000  00006dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00008b07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
      8a:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADD>:




void ADD(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
{
      92:	2f 92       	push	r2
      94:	3f 92       	push	r3
      96:	4f 92       	push	r4
      98:	5f 92       	push	r5
      9a:	7f 92       	push	r7
      9c:	8f 92       	push	r8
      9e:	9f 92       	push	r9
      a0:	af 92       	push	r10
      a2:	bf 92       	push	r11
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	2b 01       	movw	r4, r22
      b6:	d4 2f       	mov	r29, r20
      b8:	72 2e       	mov	r7, r18
      ba:	18 01       	movw	r2, r16
	u8 Index;
	u32 NUM1=FirstNumArr[0];
      bc:	fc 01       	movw	r30, r24
      be:	80 80       	ld	r8, Z
      c0:	91 80       	ldd	r9, Z+1	; 0x01
      c2:	a2 80       	ldd	r10, Z+2	; 0x02
      c4:	b3 80       	ldd	r11, Z+3	; 0x03
	u32 NUM2=SecondNumArr[0];
      c6:	fb 01       	movw	r30, r22
      c8:	c0 80       	ld	r12, Z
      ca:	d1 80       	ldd	r13, Z+1	; 0x01
      cc:	e2 80       	ldd	r14, Z+2	; 0x02
      ce:	f3 80       	ldd	r15, Z+3	; 0x03
	
	for(Index=1;Index<FirstNumFlag;Index++)
      d0:	42 30       	cpi	r20, 0x02	; 2
      d2:	e8 f0       	brcs	.+58     	; 0x10e <ADD+0x7c>
}




void ADD(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
      d4:	8c 01       	movw	r16, r24
      d6:	0c 5f       	subi	r16, 0xFC	; 252
      d8:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
      da:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
      dc:	c5 01       	movw	r24, r10
      de:	b4 01       	movw	r22, r8
      e0:	2a e0       	ldi	r18, 0x0A	; 10
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsi3>
      ec:	dc 01       	movw	r26, r24
      ee:	cb 01       	movw	r24, r22
      f0:	f8 01       	movw	r30, r16
      f2:	41 91       	ld	r20, Z+
      f4:	51 91       	ld	r21, Z+
      f6:	61 91       	ld	r22, Z+
      f8:	71 91       	ld	r23, Z+
      fa:	8f 01       	movw	r16, r30
      fc:	4a 01       	movw	r8, r20
      fe:	5b 01       	movw	r10, r22
     100:	88 0e       	add	r8, r24
     102:	99 1e       	adc	r9, r25
     104:	aa 1e       	adc	r10, r26
     106:	bb 1e       	adc	r11, r27
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     108:	cf 5f       	subi	r28, 0xFF	; 255
     10a:	cd 17       	cp	r28, r29
     10c:	39 f7       	brne	.-50     	; 0xdc <ADD+0x4a>
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     10e:	f1 e0       	ldi	r31, 0x01	; 1
     110:	f7 15       	cp	r31, r7
     112:	e8 f4       	brcc	.+58     	; 0x14e <ADD+0xbc>
}




void ADD(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     114:	82 01       	movw	r16, r4
     116:	0c 5f       	subi	r16, 0xFC	; 252
     118:	1f 4f       	sbci	r17, 0xFF	; 255
     11a:	c1 e0       	ldi	r28, 0x01	; 1
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
     11c:	c7 01       	movw	r24, r14
     11e:	b6 01       	movw	r22, r12
     120:	2a e0       	ldi	r18, 0x0A	; 10
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsi3>
     12c:	dc 01       	movw	r26, r24
     12e:	cb 01       	movw	r24, r22
     130:	f8 01       	movw	r30, r16
     132:	41 91       	ld	r20, Z+
     134:	51 91       	ld	r21, Z+
     136:	61 91       	ld	r22, Z+
     138:	71 91       	ld	r23, Z+
     13a:	8f 01       	movw	r16, r30
     13c:	6a 01       	movw	r12, r20
     13e:	7b 01       	movw	r14, r22
     140:	c8 0e       	add	r12, r24
     142:	d9 1e       	adc	r13, r25
     144:	ea 1e       	adc	r14, r26
     146:	fb 1e       	adc	r15, r27
	for(Index=1;Index<FirstNumFlag;Index++)
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     148:	cf 5f       	subi	r28, 0xFF	; 255
     14a:	c7 15       	cp	r28, r7
     14c:	39 f7       	brne	.-50     	; 0x11c <ADD+0x8a>
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
	}
	
	*Result = (NUM1 + NUM2) ;
     14e:	d7 01       	movw	r26, r14
     150:	c6 01       	movw	r24, r12
     152:	88 0d       	add	r24, r8
     154:	99 1d       	adc	r25, r9
     156:	aa 1d       	adc	r26, r10
     158:	bb 1d       	adc	r27, r11
     15a:	f1 01       	movw	r30, r2
     15c:	80 83       	st	Z, r24
     15e:	91 83       	std	Z+1, r25	; 0x01
     160:	a2 83       	std	Z+2, r26	; 0x02
     162:	b3 83       	std	Z+3, r27	; 0x03
	LCD_SendIntegarNumber(*Result);
     164:	0e 94 2d 09 	call	0x125a	; 0x125a <LCD_SendIntegarNumber>
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	af 90       	pop	r10
     17c:	9f 90       	pop	r9
     17e:	8f 90       	pop	r8
     180:	7f 90       	pop	r7
     182:	5f 90       	pop	r5
     184:	4f 90       	pop	r4
     186:	3f 90       	pop	r3
     188:	2f 90       	pop	r2
     18a:	08 95       	ret

0000018c <SUB>:

void SUB(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
{
     18c:	2f 92       	push	r2
     18e:	3f 92       	push	r3
     190:	4f 92       	push	r4
     192:	5f 92       	push	r5
     194:	7f 92       	push	r7
     196:	8f 92       	push	r8
     198:	9f 92       	push	r9
     19a:	af 92       	push	r10
     19c:	bf 92       	push	r11
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	2b 01       	movw	r4, r22
     1b0:	d4 2f       	mov	r29, r20
     1b2:	72 2e       	mov	r7, r18
     1b4:	18 01       	movw	r2, r16
	u8 Index;
	u32 NUM1=FirstNumArr[0];
     1b6:	fc 01       	movw	r30, r24
     1b8:	c0 80       	ld	r12, Z
     1ba:	d1 80       	ldd	r13, Z+1	; 0x01
     1bc:	e2 80       	ldd	r14, Z+2	; 0x02
     1be:	f3 80       	ldd	r15, Z+3	; 0x03
	u32 NUM2=SecondNumArr[0];
     1c0:	fb 01       	movw	r30, r22
     1c2:	80 80       	ld	r8, Z
     1c4:	91 80       	ldd	r9, Z+1	; 0x01
     1c6:	a2 80       	ldd	r10, Z+2	; 0x02
     1c8:	b3 80       	ldd	r11, Z+3	; 0x03
	
	for(Index=1;Index<FirstNumFlag;Index++)
     1ca:	42 30       	cpi	r20, 0x02	; 2
     1cc:	e8 f0       	brcs	.+58     	; 0x208 <SUB+0x7c>
	
	*Result = (NUM1 + NUM2) ;
	LCD_SendIntegarNumber(*Result);
}

void SUB(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     1ce:	8c 01       	movw	r16, r24
     1d0:	0c 5f       	subi	r16, 0xFC	; 252
     1d2:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     1d4:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
     1d6:	c7 01       	movw	r24, r14
     1d8:	b6 01       	movw	r22, r12
     1da:	2a e0       	ldi	r18, 0x0A	; 10
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsi3>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	f8 01       	movw	r30, r16
     1ec:	41 91       	ld	r20, Z+
     1ee:	51 91       	ld	r21, Z+
     1f0:	61 91       	ld	r22, Z+
     1f2:	71 91       	ld	r23, Z+
     1f4:	8f 01       	movw	r16, r30
     1f6:	6a 01       	movw	r12, r20
     1f8:	7b 01       	movw	r14, r22
     1fa:	c8 0e       	add	r12, r24
     1fc:	d9 1e       	adc	r13, r25
     1fe:	ea 1e       	adc	r14, r26
     200:	fb 1e       	adc	r15, r27
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     202:	cf 5f       	subi	r28, 0xFF	; 255
     204:	cd 17       	cp	r28, r29
     206:	39 f7       	brne	.-50     	; 0x1d6 <SUB+0x4a>
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	f7 15       	cp	r31, r7
     20c:	e8 f4       	brcc	.+58     	; 0x248 <SUB+0xbc>
	
	*Result = (NUM1 + NUM2) ;
	LCD_SendIntegarNumber(*Result);
}

void SUB(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     20e:	82 01       	movw	r16, r4
     210:	0c 5f       	subi	r16, 0xFC	; 252
     212:	1f 4f       	sbci	r17, 0xFF	; 255
     214:	c1 e0       	ldi	r28, 0x01	; 1
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
     216:	c5 01       	movw	r24, r10
     218:	b4 01       	movw	r22, r8
     21a:	2a e0       	ldi	r18, 0x0A	; 10
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e0       	ldi	r20, 0x00	; 0
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsi3>
     226:	dc 01       	movw	r26, r24
     228:	cb 01       	movw	r24, r22
     22a:	f8 01       	movw	r30, r16
     22c:	41 91       	ld	r20, Z+
     22e:	51 91       	ld	r21, Z+
     230:	61 91       	ld	r22, Z+
     232:	71 91       	ld	r23, Z+
     234:	8f 01       	movw	r16, r30
     236:	4a 01       	movw	r8, r20
     238:	5b 01       	movw	r10, r22
     23a:	88 0e       	add	r8, r24
     23c:	99 1e       	adc	r9, r25
     23e:	aa 1e       	adc	r10, r26
     240:	bb 1e       	adc	r11, r27
	for(Index=1;Index<FirstNumFlag;Index++)
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     242:	cf 5f       	subi	r28, 0xFF	; 255
     244:	c7 15       	cp	r28, r7
     246:	39 f7       	brne	.-50     	; 0x216 <SUB+0x8a>
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
	}
	
	if(NUM2 > NUM1)
     248:	c8 14       	cp	r12, r8
     24a:	d9 04       	cpc	r13, r9
     24c:	ea 04       	cpc	r14, r10
     24e:	fb 04       	cpc	r15, r11
     250:	90 f4       	brcc	.+36     	; 0x276 <SUB+0xea>
	{
		*Result = (NUM2 - NUM1) ;
     252:	8c 18       	sub	r8, r12
     254:	9d 08       	sbc	r9, r13
     256:	ae 08       	sbc	r10, r14
     258:	bf 08       	sbc	r11, r15
     25a:	f1 01       	movw	r30, r2
     25c:	80 82       	st	Z, r8
     25e:	91 82       	std	Z+1, r9	; 0x01
     260:	a2 82       	std	Z+2, r10	; 0x02
     262:	b3 82       	std	Z+3, r11	; 0x03
		LCD_sendChar('-');
     264:	8d e2       	ldi	r24, 0x2D	; 45
     266:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_sendChar>
		LCD_SendIntegarNumber(*Result);
     26a:	f1 01       	movw	r30, r2
     26c:	80 81       	ld	r24, Z
     26e:	91 81       	ldd	r25, Z+1	; 0x01
     270:	0e 94 2d 09 	call	0x125a	; 0x125a <LCD_SendIntegarNumber>
     274:	0d c0       	rjmp	.+26     	; 0x290 <SUB+0x104>
	}
	else
	{
		*Result = (NUM1 - NUM2) ;
     276:	d7 01       	movw	r26, r14
     278:	c6 01       	movw	r24, r12
     27a:	88 19       	sub	r24, r8
     27c:	99 09       	sbc	r25, r9
     27e:	aa 09       	sbc	r26, r10
     280:	bb 09       	sbc	r27, r11
     282:	f1 01       	movw	r30, r2
     284:	80 83       	st	Z, r24
     286:	91 83       	std	Z+1, r25	; 0x01
     288:	a2 83       	std	Z+2, r26	; 0x02
     28a:	b3 83       	std	Z+3, r27	; 0x03
		LCD_SendIntegarNumber(*Result);
     28c:	0e 94 2d 09 	call	0x125a	; 0x125a <LCD_SendIntegarNumber>
	}
}
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	0f 91       	pop	r16
     298:	ff 90       	pop	r15
     29a:	ef 90       	pop	r14
     29c:	df 90       	pop	r13
     29e:	cf 90       	pop	r12
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	7f 90       	pop	r7
     2aa:	5f 90       	pop	r5
     2ac:	4f 90       	pop	r4
     2ae:	3f 90       	pop	r3
     2b0:	2f 90       	pop	r2
     2b2:	08 95       	ret

000002b4 <MUL>:

void MUL(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
{
     2b4:	2f 92       	push	r2
     2b6:	3f 92       	push	r3
     2b8:	4f 92       	push	r4
     2ba:	5f 92       	push	r5
     2bc:	7f 92       	push	r7
     2be:	8f 92       	push	r8
     2c0:	9f 92       	push	r9
     2c2:	af 92       	push	r10
     2c4:	bf 92       	push	r11
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	2b 01       	movw	r4, r22
     2d8:	d4 2f       	mov	r29, r20
     2da:	72 2e       	mov	r7, r18
     2dc:	18 01       	movw	r2, r16
	u8 Index;
	u32 NUM1=FirstNumArr[0];
     2de:	fc 01       	movw	r30, r24
     2e0:	80 80       	ld	r8, Z
     2e2:	91 80       	ldd	r9, Z+1	; 0x01
     2e4:	a2 80       	ldd	r10, Z+2	; 0x02
     2e6:	b3 80       	ldd	r11, Z+3	; 0x03
	u32 NUM2=SecondNumArr[0];
     2e8:	fb 01       	movw	r30, r22
     2ea:	c0 80       	ld	r12, Z
     2ec:	d1 80       	ldd	r13, Z+1	; 0x01
     2ee:	e2 80       	ldd	r14, Z+2	; 0x02
     2f0:	f3 80       	ldd	r15, Z+3	; 0x03
	
	for(Index=1;Index<FirstNumFlag;Index++)
     2f2:	42 30       	cpi	r20, 0x02	; 2
     2f4:	e8 f0       	brcs	.+58     	; 0x330 <MUL+0x7c>
		*Result = (NUM1 - NUM2) ;
		LCD_SendIntegarNumber(*Result);
	}
}

void MUL(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     2f6:	8c 01       	movw	r16, r24
     2f8:	0c 5f       	subi	r16, 0xFC	; 252
     2fa:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     2fc:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
     2fe:	c5 01       	movw	r24, r10
     300:	b4 01       	movw	r22, r8
     302:	2a e0       	ldi	r18, 0x0A	; 10
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsi3>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	f8 01       	movw	r30, r16
     314:	41 91       	ld	r20, Z+
     316:	51 91       	ld	r21, Z+
     318:	61 91       	ld	r22, Z+
     31a:	71 91       	ld	r23, Z+
     31c:	8f 01       	movw	r16, r30
     31e:	4a 01       	movw	r8, r20
     320:	5b 01       	movw	r10, r22
     322:	88 0e       	add	r8, r24
     324:	99 1e       	adc	r9, r25
     326:	aa 1e       	adc	r10, r26
     328:	bb 1e       	adc	r11, r27
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     32a:	cf 5f       	subi	r28, 0xFF	; 255
     32c:	cd 17       	cp	r28, r29
     32e:	39 f7       	brne	.-50     	; 0x2fe <MUL+0x4a>
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	f7 15       	cp	r31, r7
     334:	e8 f4       	brcc	.+58     	; 0x370 <MUL+0xbc>
		*Result = (NUM1 - NUM2) ;
		LCD_SendIntegarNumber(*Result);
	}
}

void MUL(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     336:	82 01       	movw	r16, r4
     338:	0c 5f       	subi	r16, 0xFC	; 252
     33a:	1f 4f       	sbci	r17, 0xFF	; 255
     33c:	c1 e0       	ldi	r28, 0x01	; 1
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	2a e0       	ldi	r18, 0x0A	; 10
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsi3>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	f8 01       	movw	r30, r16
     354:	41 91       	ld	r20, Z+
     356:	51 91       	ld	r21, Z+
     358:	61 91       	ld	r22, Z+
     35a:	71 91       	ld	r23, Z+
     35c:	8f 01       	movw	r16, r30
     35e:	6a 01       	movw	r12, r20
     360:	7b 01       	movw	r14, r22
     362:	c8 0e       	add	r12, r24
     364:	d9 1e       	adc	r13, r25
     366:	ea 1e       	adc	r14, r26
     368:	fb 1e       	adc	r15, r27
	for(Index=1;Index<FirstNumFlag;Index++)
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	
	for(Index=1;Index<SecondNumFlag;Index++)
     36a:	cf 5f       	subi	r28, 0xFF	; 255
     36c:	c7 15       	cp	r28, r7
     36e:	39 f7       	brne	.-50     	; 0x33e <MUL+0x8a>
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
	}
	
	*Result = (NUM1 * NUM2) ;
     370:	c7 01       	movw	r24, r14
     372:	b6 01       	movw	r22, r12
     374:	a5 01       	movw	r20, r10
     376:	94 01       	movw	r18, r8
     378:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsi3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	f1 01       	movw	r30, r2
     382:	80 83       	st	Z, r24
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	a2 83       	std	Z+2, r26	; 0x02
     388:	b3 83       	std	Z+3, r27	; 0x03
	LCD_SendIntegarNumber(*Result);
     38a:	0e 94 2d 09 	call	0x125a	; 0x125a <LCD_SendIntegarNumber>
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	9f 90       	pop	r9
     3a4:	8f 90       	pop	r8
     3a6:	7f 90       	pop	r7
     3a8:	5f 90       	pop	r5
     3aa:	4f 90       	pop	r4
     3ac:	3f 90       	pop	r3
     3ae:	2f 90       	pop	r2
     3b0:	08 95       	ret

000003b2 <DIV>:

void DIV(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
{
     3b2:	2f 92       	push	r2
     3b4:	3f 92       	push	r3
     3b6:	4f 92       	push	r4
     3b8:	5f 92       	push	r5
     3ba:	7f 92       	push	r7
     3bc:	8f 92       	push	r8
     3be:	9f 92       	push	r9
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	2b 01       	movw	r4, r22
     3d6:	d4 2f       	mov	r29, r20
     3d8:	72 2e       	mov	r7, r18
     3da:	18 01       	movw	r2, r16
	u8 Index;
	u32 NUM1=FirstNumArr[0];
     3dc:	fc 01       	movw	r30, r24
     3de:	80 80       	ld	r8, Z
     3e0:	91 80       	ldd	r9, Z+1	; 0x01
     3e2:	a2 80       	ldd	r10, Z+2	; 0x02
     3e4:	b3 80       	ldd	r11, Z+3	; 0x03
	u32 NUM2=SecondNumArr[0];
     3e6:	fb 01       	movw	r30, r22
     3e8:	c0 80       	ld	r12, Z
     3ea:	d1 80       	ldd	r13, Z+1	; 0x01
     3ec:	e2 80       	ldd	r14, Z+2	; 0x02
     3ee:	f3 80       	ldd	r15, Z+3	; 0x03
	
	for(Index=1;Index<FirstNumFlag;Index++)
     3f0:	42 30       	cpi	r20, 0x02	; 2
     3f2:	e8 f0       	brcs	.+58     	; 0x42e <DIV+0x7c>
	
	*Result = (NUM1 * NUM2) ;
	LCD_SendIntegarNumber(*Result);
}

void DIV(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     3f4:	8c 01       	movw	r16, r24
     3f6:	0c 5f       	subi	r16, 0xFC	; 252
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     3fa:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
     3fc:	c5 01       	movw	r24, r10
     3fe:	b4 01       	movw	r22, r8
     400:	2a e0       	ldi	r18, 0x0A	; 10
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsi3>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	41 91       	ld	r20, Z+
     414:	51 91       	ld	r21, Z+
     416:	61 91       	ld	r22, Z+
     418:	71 91       	ld	r23, Z+
     41a:	8f 01       	movw	r16, r30
     41c:	4a 01       	movw	r8, r20
     41e:	5b 01       	movw	r10, r22
     420:	88 0e       	add	r8, r24
     422:	99 1e       	adc	r9, r25
     424:	aa 1e       	adc	r10, r26
     426:	bb 1e       	adc	r11, r27
{
	u8 Index;
	u32 NUM1=FirstNumArr[0];
	u32 NUM2=SecondNumArr[0];
	
	for(Index=1;Index<FirstNumFlag;Index++)
     428:	cf 5f       	subi	r28, 0xFF	; 255
     42a:	cd 17       	cp	r28, r29
     42c:	39 f7       	brne	.-50     	; 0x3fc <DIV+0x4a>
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	for(Index=1;Index<SecondNumFlag;Index++)
     42e:	f1 e0       	ldi	r31, 0x01	; 1
     430:	f7 15       	cp	r31, r7
     432:	e8 f4       	brcc	.+58     	; 0x46e <DIV+0xbc>
	
	*Result = (NUM1 * NUM2) ;
	LCD_SendIntegarNumber(*Result);
}

void DIV(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result)
     434:	82 01       	movw	r16, r4
     436:	0c 5f       	subi	r16, 0xFC	; 252
     438:	1f 4f       	sbci	r17, 0xFF	; 255
     43a:	c1 e0       	ldi	r28, 0x01	; 1
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	for(Index=1;Index<SecondNumFlag;Index++)
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
     43c:	c7 01       	movw	r24, r14
     43e:	b6 01       	movw	r22, r12
     440:	2a e0       	ldi	r18, 0x0A	; 10
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsi3>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	f8 01       	movw	r30, r16
     452:	41 91       	ld	r20, Z+
     454:	51 91       	ld	r21, Z+
     456:	61 91       	ld	r22, Z+
     458:	71 91       	ld	r23, Z+
     45a:	8f 01       	movw	r16, r30
     45c:	6a 01       	movw	r12, r20
     45e:	7b 01       	movw	r14, r22
     460:	c8 0e       	add	r12, r24
     462:	d9 1e       	adc	r13, r25
     464:	ea 1e       	adc	r14, r26
     466:	fb 1e       	adc	r15, r27
	
	for(Index=1;Index<FirstNumFlag;Index++)
	{
		NUM1 = NUM1*10 +FirstNumArr[Index];
	}
	for(Index=1;Index<SecondNumFlag;Index++)
     468:	cf 5f       	subi	r28, 0xFF	; 255
     46a:	c7 15       	cp	r28, r7
     46c:	39 f7       	brne	.-50     	; 0x43c <DIV+0x8a>
	{
		NUM2 = NUM2*10 +SecondNumArr[Index];
	}
	
	if (0 == NUM2)
     46e:	c1 14       	cp	r12, r1
     470:	d1 04       	cpc	r13, r1
     472:	e1 04       	cpc	r14, r1
     474:	f1 04       	cpc	r15, r1
     476:	39 f4       	brne	.+14     	; 0x486 <DIV+0xd4>
	{
		LCD_ClearDesplay();
     478:	0e 94 fd 08 	call	0x11fa	; 0x11fa <LCD_ClearDesplay>
		LCD_SendString("Division ERROR/0");
     47c:	80 e6       	ldi	r24, 0x60	; 96
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_SendString>
     484:	0f c0       	rjmp	.+30     	; 0x4a4 <DIV+0xf2>

	}	
	else
	{
		*Result = (NUM1 / NUM2) ;
     486:	c5 01       	movw	r24, r10
     488:	b4 01       	movw	r22, r8
     48a:	a7 01       	movw	r20, r14
     48c:	96 01       	movw	r18, r12
     48e:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <__udivmodsi4>
     492:	f1 01       	movw	r30, r2
     494:	20 83       	st	Z, r18
     496:	31 83       	std	Z+1, r19	; 0x01
     498:	42 83       	std	Z+2, r20	; 0x02
     49a:	53 83       	std	Z+3, r21	; 0x03
		LCD_SendIntegarNumber(*Result);
     49c:	82 2f       	mov	r24, r18
     49e:	93 2f       	mov	r25, r19
     4a0:	0e 94 2d 09 	call	0x125a	; 0x125a <LCD_SendIntegarNumber>
	}
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	df 90       	pop	r13
     4b2:	cf 90       	pop	r12
     4b4:	bf 90       	pop	r11
     4b6:	af 90       	pop	r10
     4b8:	9f 90       	pop	r9
     4ba:	8f 90       	pop	r8
     4bc:	7f 90       	pop	r7
     4be:	5f 90       	pop	r5
     4c0:	4f 90       	pop	r4
     4c2:	3f 90       	pop	r3
     4c4:	2f 90       	pop	r2
     4c6:	08 95       	ret

000004c8 <main>:
void MUL(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result);
void DIV(u32 FirstNumArr[], u32 SecondNumArr[],u8 FirstNumFlag,u8 SecondNumFlag, u32* Result);


int main(void)
{
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	a5 97       	sbiw	r28, 0x25	; 37
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
	u32 FirstNumArr[4],SecondNumArr[4];
	u8 KeypadValue;
	u8 CurrentLocation=1;
	u8 FirstNumFlag,OperatorFlag,SecondNumFlag,EqualFlag = 0 ;
	
	LCD_init();
     4dc:	0e 94 53 08 	call	0x10a6	; 0x10a6 <LCD_init>
	KEYPAD_init();
     4e0:	0e 94 c8 06 	call	0xd90	; 0xd90 <KEYPAD_init>
	
	LCD_GoToLocation(5,1);
     4e4:	85 e0       	ldi	r24, 0x05	; 5
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	0e 94 0a 09 	call	0x1214	; 0x1214 <LCD_GoToLocation>
	LCD_SendString("WELCOME!");
     4ec:	81 e7       	ldi	r24, 0x71	; 113
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_SendString>
	LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     4f4:	80 ec       	ldi	r24, 0xC0	; 192
     4f6:	0e 94 1d 08 	call	0x103a	; 0x103a <LCD_sendComnd>
	LCD_SendString(" +-/*CALCOLATOR ");
     4fa:	8a e7       	ldi	r24, 0x7A	; 122
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	9d e3       	ldi	r25, 0x3D	; 61
     506:	a9 e4       	ldi	r26, 0x49	; 73
     508:	81 50       	subi	r24, 0x01	; 1
     50a:	90 40       	sbci	r25, 0x00	; 0
     50c:	a0 40       	sbci	r26, 0x00	; 0
     50e:	e1 f7       	brne	.-8      	; 0x508 <main+0x40>
     510:	00 c0       	rjmp	.+0      	; 0x512 <main+0x4a>
     512:	00 00       	nop
	_delay_ms(1500);
	LCD_ClearDesplay();
     514:	0e 94 fd 08 	call	0x11fa	; 0x11fa <LCD_ClearDesplay>
	u8 FirstNum , SecondNum ;
	u32 Result;
	u32 FirstNumArr[4],SecondNumArr[4];
	u8 KeypadValue;
	u8 CurrentLocation=1;
	u8 FirstNumFlag,OperatorFlag,SecondNumFlag,EqualFlag = 0 ;
     518:	00 e0       	ldi	r16, 0x00	; 0
	u8 Operator,Equal;
	u8 FirstNum , SecondNum ;
	u32 Result;
	u32 FirstNumArr[4],SecondNumArr[4];
	u8 KeypadValue;
	u8 CurrentLocation=1;
     51a:	cc 24       	eor	r12, r12
     51c:	c3 94       	inc	r12
				 }
				 if (FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 1)
				 {
					 LCD_ClearDesplay();

					 FirstNumFlag=SecondNumFlag=OperatorFlag=EqualFlag=0;
     51e:	99 24       	eor	r9, r9
					 CurrentLocation=1;
     520:	bb 24       	eor	r11, r11
     522:	b3 94       	inc	r11
	_delay_ms(1500);
	LCD_ClearDesplay();

	while(1)
	{
		KEYPAD_GetValue(&KeypadValue);
     524:	ce 01       	movw	r24, r28
     526:	85 96       	adiw	r24, 0x25	; 37
     528:	0e 94 15 07 	call	0xe2a	; 0xe2a <KEYPAD_GetValue>
		if (KEYPAD_NOT_PRESSED != KeypadValue )
     52c:	8d a1       	lds	r24, 0x4d
     52e:	8f 3f       	cpi	r24, 0xFF	; 255
     530:	c9 f3       	breq	.-14     	; 0x524 <main+0x5c>
		{
			
			if (KeypadValue != '+' && KeypadValue != '-' && KeypadValue != '*' && KeypadValue != '/' && KeypadValue != '=' && KeypadValue != '#' && FirstNumFlag != 4 &&  OperatorFlag == 0 &&  SecondNumFlag == 0 && EqualFlag == 0  )
     532:	8b 32       	cpi	r24, 0x2B	; 43
     534:	61 f1       	breq	.+88     	; 0x58e <main+0xc6>
     536:	8d 32       	cpi	r24, 0x2D	; 45
     538:	51 f1       	breq	.+84     	; 0x58e <main+0xc6>
     53a:	8a 32       	cpi	r24, 0x2A	; 42
     53c:	41 f1       	breq	.+80     	; 0x58e <main+0xc6>
     53e:	8f 32       	cpi	r24, 0x2F	; 47
     540:	31 f1       	breq	.+76     	; 0x58e <main+0xc6>
     542:	8d 33       	cpi	r24, 0x3D	; 61
     544:	21 f1       	breq	.+72     	; 0x58e <main+0xc6>
     546:	83 32       	cpi	r24, 0x23	; 35
     548:	11 f1       	breq	.+68     	; 0x58e <main+0xc6>
     54a:	94 e0       	ldi	r25, 0x04	; 4
     54c:	f9 16       	cp	r15, r25
     54e:	f9 f0       	breq	.+62     	; 0x58e <main+0xc6>
     550:	ee 20       	and	r14, r14
     552:	e9 f4       	brne	.+58     	; 0x58e <main+0xc6>
     554:	dd 20       	and	r13, r13
     556:	d9 f4       	brne	.+54     	; 0x58e <main+0xc6>
     558:	00 23       	and	r16, r16
     55a:	c9 f4       	brne	.+50     	; 0x58e <main+0xc6>
			{
				 CurrentLocation++;
     55c:	c3 94       	inc	r12
				 FirstNum=KeypadValue;
				 FirstNumArr[FirstNumFlag]=FirstNum;
     55e:	ef 2d       	mov	r30, r15
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	a1 e0       	ldi	r26, 0x01	; 1
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	ac 0f       	add	r26, r28
     570:	bd 1f       	adc	r27, r29
     572:	ea 0f       	add	r30, r26
     574:	fb 1f       	adc	r31, r27
     576:	48 2f       	mov	r20, r24
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	44 83       	std	Z+4, r20	; 0x04
     580:	55 83       	std	Z+5, r21	; 0x05
     582:	66 83       	std	Z+6, r22	; 0x06
     584:	77 83       	std	Z+7, r23	; 0x07
				 FirstNumFlag++ ;
     586:	f3 94       	inc	r15
				 LCD_SendIntegarNumber(KeypadValue);
     588:	99 2d       	mov	r25, r9
     58a:	0e 94 2d 09 	call	0x125a	; 0x125a <LCD_SendIntegarNumber>
			}
			
			 if( (KeypadValue == '+' || KeypadValue == '-' || KeypadValue == '*'|| KeypadValue == '/' ) && (FirstNumFlag != 0  && OperatorFlag == 0  && SecondNumFlag == 0 && EqualFlag == 0)  )
     58e:	1d a1       	lds	r17, 0x4d
     590:	1b 32       	cpi	r17, 0x2B	; 43
     592:	31 f0       	breq	.+12     	; 0x5a0 <main+0xd8>
     594:	1d 32       	cpi	r17, 0x2D	; 45
     596:	21 f0       	breq	.+8      	; 0x5a0 <main+0xd8>
     598:	1a 32       	cpi	r17, 0x2A	; 42
     59a:	11 f0       	breq	.+4      	; 0x5a0 <main+0xd8>
     59c:	1f 32       	cpi	r17, 0x2F	; 47
     59e:	a9 f4       	brne	.+42     	; 0x5ca <main+0x102>
     5a0:	ff 20       	and	r15, r15
     5a2:	61 f0       	breq	.+24     	; 0x5bc <main+0xf4>
     5a4:	ee 20       	and	r14, r14
     5a6:	51 f4       	brne	.+20     	; 0x5bc <main+0xf4>
     5a8:	dd 20       	and	r13, r13
     5aa:	41 f4       	brne	.+16     	; 0x5bc <main+0xf4>
     5ac:	00 23       	and	r16, r16
     5ae:	31 f4       	brne	.+12     	; 0x5bc <main+0xf4>
			 {
				 CurrentLocation++;
     5b0:	c3 94       	inc	r12
			 	 Operator = KeypadValue;
			 	 OperatorFlag = 1 ;
			 	 LCD_sendChar(KeypadValue);
     5b2:	81 2f       	mov	r24, r17
     5b4:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_sendChar>
			}
			
			 if( (KeypadValue == '+' || KeypadValue == '-' || KeypadValue == '*'|| KeypadValue == '/' ) && (FirstNumFlag != 0  && OperatorFlag == 0  && SecondNumFlag == 0 && EqualFlag == 0)  )
			 {
				 CurrentLocation++;
			 	 Operator = KeypadValue;
     5b8:	a1 2e       	mov	r10, r17
			 	 OperatorFlag = 1 ;
     5ba:	eb 2c       	mov	r14, r11
			 	 LCD_sendChar(KeypadValue);
			 }
			
			 if (KeypadValue != '+' && KeypadValue != '-' && KeypadValue != '*' && KeypadValue != '/' && KeypadValue != '='  && KeypadValue != '#' && FirstNumFlag != 0 && OperatorFlag == 1 && SecondNumFlag != 4 && EqualFlag == 0 )
     5bc:	1d a1       	lds	r17, 0x4d
     5be:	1b 32       	cpi	r17, 0x2B	; 43
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <main+0xfc>
     5c2:	95 c0       	rjmp	.+298    	; 0x6ee <main+0x226>
     5c4:	1d 32       	cpi	r17, 0x2D	; 45
     5c6:	09 f4       	brne	.+2      	; 0x5ca <main+0x102>
     5c8:	92 c0       	rjmp	.+292    	; 0x6ee <main+0x226>
     5ca:	1a 32       	cpi	r17, 0x2A	; 42
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <main+0x108>
     5ce:	8f c0       	rjmp	.+286    	; 0x6ee <main+0x226>
     5d0:	1f 32       	cpi	r17, 0x2F	; 47
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <main+0x10e>
     5d4:	8c c0       	rjmp	.+280    	; 0x6ee <main+0x226>
     5d6:	1d 33       	cpi	r17, 0x3D	; 61
     5d8:	79 f1       	breq	.+94     	; 0x638 <main+0x170>
     5da:	13 32       	cpi	r17, 0x23	; 35
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <main+0x118>
     5de:	87 c0       	rjmp	.+270    	; 0x6ee <main+0x226>
     5e0:	ff 20       	and	r15, r15
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <main+0x11e>
     5e4:	84 c0       	rjmp	.+264    	; 0x6ee <main+0x226>
     5e6:	b1 e0       	ldi	r27, 0x01	; 1
     5e8:	eb 16       	cp	r14, r27
     5ea:	09 f0       	breq	.+2      	; 0x5ee <main+0x126>
     5ec:	80 c0       	rjmp	.+256    	; 0x6ee <main+0x226>
     5ee:	24 e0       	ldi	r18, 0x04	; 4
     5f0:	d2 16       	cp	r13, r18
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <main+0x12e>
     5f4:	7c c0       	rjmp	.+248    	; 0x6ee <main+0x226>
     5f6:	00 23       	and	r16, r16
     5f8:	09 f0       	breq	.+2      	; 0x5fc <main+0x134>
     5fa:	79 c0       	rjmp	.+242    	; 0x6ee <main+0x226>
			 {
				 CurrentLocation++;
     5fc:	c3 94       	inc	r12
				 SecondNum=KeypadValue;
				 SecondNumArr[SecondNumFlag]=SecondNum;
     5fe:	ed 2d       	mov	r30, r13
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	8c 0f       	add	r24, r28
     610:	9d 1f       	adc	r25, r29
     612:	e8 0f       	add	r30, r24
     614:	f9 1f       	adc	r31, r25
     616:	81 2f       	mov	r24, r17
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	84 8b       	std	Z+20, r24	; 0x14
     620:	95 8b       	std	Z+21, r25	; 0x15
     622:	a6 8b       	std	Z+22, r26	; 0x16
     624:	b7 8b       	std	Z+23, r27	; 0x17
				 SecondNumFlag++ ;
     626:	d3 94       	inc	r13
				 LCD_SendIntegarNumber(KeypadValue);
     628:	81 2f       	mov	r24, r17
     62a:	99 2d       	mov	r25, r9
     62c:	0e 94 2d 09 	call	0x125a	; 0x125a <LCD_SendIntegarNumber>
			 }
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
     630:	8d a1       	lds	r24, 0x4d
     632:	8d 33       	cpi	r24, 0x3D	; 61
     634:	21 f0       	breq	.+8      	; 0x63e <main+0x176>
     636:	5b c0       	rjmp	.+182    	; 0x6ee <main+0x226>
     638:	ff 20       	and	r15, r15
     63a:	09 f4       	brne	.+2      	; 0x63e <main+0x176>
     63c:	58 c0       	rjmp	.+176    	; 0x6ee <main+0x226>
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	e9 16       	cp	r14, r25
     642:	09 f0       	breq	.+2      	; 0x646 <main+0x17e>
     644:	54 c0       	rjmp	.+168    	; 0x6ee <main+0x226>
     646:	dd 20       	and	r13, r13
     648:	09 f4       	brne	.+2      	; 0x64c <main+0x184>
     64a:	51 c0       	rjmp	.+162    	; 0x6ee <main+0x226>
     64c:	00 23       	and	r16, r16
     64e:	09 f0       	breq	.+2      	; 0x652 <main+0x18a>
     650:	4e c0       	rjmp	.+156    	; 0x6ee <main+0x226>
			 {
				 CurrentLocation++;
     652:	c3 94       	inc	r12
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
				 LCD_sendChar(KeypadValue);
     654:	8d e3       	ldi	r24, 0x3D	; 61
     656:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_sendChar>
				 switch(Operator)
     65a:	ab e2       	ldi	r26, 0x2B	; 43
     65c:	aa 16       	cp	r10, r26
     65e:	71 f0       	breq	.+28     	; 0x67c <main+0x1b4>
     660:	aa 15       	cp	r26, r10
     662:	28 f0       	brcs	.+10     	; 0x66e <main+0x1a6>
     664:	ba e2       	ldi	r27, 0x2A	; 42
     666:	ab 16       	cp	r10, r27
     668:	09 f0       	breq	.+2      	; 0x66c <main+0x1a4>
     66a:	40 c0       	rjmp	.+128    	; 0x6ec <main+0x224>
     66c:	23 c0       	rjmp	.+70     	; 0x6b4 <main+0x1ec>
     66e:	2d e2       	ldi	r18, 0x2D	; 45
     670:	a2 16       	cp	r10, r18
     672:	91 f0       	breq	.+36     	; 0x698 <main+0x1d0>
     674:	3f e2       	ldi	r19, 0x2F	; 47
     676:	a3 16       	cp	r10, r19
     678:	c9 f5       	brne	.+114    	; 0x6ec <main+0x224>
     67a:	2a c0       	rjmp	.+84     	; 0x6d0 <main+0x208>
				 {
				 	 case '+' :
				 	 ADD(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
     67c:	ce 01       	movw	r24, r28
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	be 01       	movw	r22, r28
     682:	6b 5e       	subi	r22, 0xEB	; 235
     684:	7f 4f       	sbci	r23, 0xFF	; 255
     686:	4f 2d       	mov	r20, r15
     688:	2d 2d       	mov	r18, r13
     68a:	8e 01       	movw	r16, r28
     68c:	0f 5f       	subi	r16, 0xFF	; 255
     68e:	1f 4f       	sbci	r17, 0xFF	; 255
     690:	0e 94 49 00 	call	0x92	; 0x92 <ADD>
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 CurrentLocation++;
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     694:	0b 2d       	mov	r16, r11
				 LCD_sendChar(KeypadValue);
				 switch(Operator)
				 {
				 	 case '+' :
				 	 ADD(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
     696:	2b c0       	rjmp	.+86     	; 0x6ee <main+0x226>
				 	 case '-' :
				 	 SUB(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
     698:	ce 01       	movw	r24, r28
     69a:	05 96       	adiw	r24, 0x05	; 5
     69c:	be 01       	movw	r22, r28
     69e:	6b 5e       	subi	r22, 0xEB	; 235
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	4f 2d       	mov	r20, r15
     6a4:	2d 2d       	mov	r18, r13
     6a6:	8e 01       	movw	r16, r28
     6a8:	0f 5f       	subi	r16, 0xFF	; 255
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	0e 94 c6 00 	call	0x18c	; 0x18c <SUB>
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 CurrentLocation++;
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     6b0:	0b 2d       	mov	r16, r11
				 	 case '+' :
				 	 ADD(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
				 	 case '-' :
				 	 SUB(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
     6b2:	1d c0       	rjmp	.+58     	; 0x6ee <main+0x226>
				 	 case '*' :
				 	 MUL(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
     6b4:	ce 01       	movw	r24, r28
     6b6:	05 96       	adiw	r24, 0x05	; 5
     6b8:	be 01       	movw	r22, r28
     6ba:	6b 5e       	subi	r22, 0xEB	; 235
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	4f 2d       	mov	r20, r15
     6c0:	2d 2d       	mov	r18, r13
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5f       	subi	r16, 0xFF	; 255
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <MUL>
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 CurrentLocation++;
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     6cc:	0b 2d       	mov	r16, r11
				 	 case '-' :
				 	 SUB(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
				 	 case '*' :
				 	 MUL(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
     6ce:	0f c0       	rjmp	.+30     	; 0x6ee <main+0x226>
				 	 case '/' :
				 	 DIV(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
     6d0:	ce 01       	movw	r24, r28
     6d2:	05 96       	adiw	r24, 0x05	; 5
     6d4:	be 01       	movw	r22, r28
     6d6:	6b 5e       	subi	r22, 0xEB	; 235
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	4f 2d       	mov	r20, r15
     6dc:	2d 2d       	mov	r18, r13
     6de:	8e 01       	movw	r16, r28
     6e0:	0f 5f       	subi	r16, 0xFF	; 255
     6e2:	1f 4f       	sbci	r17, 0xFF	; 255
     6e4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <DIV>
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 CurrentLocation++;
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     6e8:	0b 2d       	mov	r16, r11
				 	 case '*' :
				 	 MUL(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
				 	 case '/' :
				 	 DIV(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <main+0x226>
			
			 if (KeypadValue == '=' && FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
			 {
				 CurrentLocation++;
				 Equal=KeypadValue;
				 EqualFlag = 1 ;
     6ec:	0b 2d       	mov	r16, r11
				 	 case '/' :
				 	 DIV(FirstNumArr,SecondNumArr,FirstNumFlag,SecondNumFlag,&Result);
				 	 break;
				 }
			 }
			if (KeypadValue == '#')
     6ee:	8d a1       	lds	r24, 0x4d
     6f0:	83 32       	cpi	r24, 0x23	; 35
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <main+0x22e>
     6f4:	17 cf       	rjmp	.-466    	; 0x524 <main+0x5c>
			 {
				 if (FirstNumFlag != 0 && OperatorFlag == 0  && SecondNumFlag == 0 && EqualFlag == 0)
     6f6:	ff 20       	and	r15, r15
     6f8:	09 f4       	brne	.+2      	; 0x6fc <main+0x234>
     6fa:	14 cf       	rjmp	.-472    	; 0x524 <main+0x5c>
     6fc:	ee 20       	and	r14, r14
     6fe:	11 f5       	brne	.+68     	; 0x744 <main+0x27c>
     700:	dd 20       	and	r13, r13
     702:	01 f5       	brne	.+64     	; 0x744 <main+0x27c>
     704:	00 23       	and	r16, r16
     706:	09 f0       	breq	.+2      	; 0x70a <main+0x242>
     708:	0d cf       	rjmp	.-486    	; 0x524 <main+0x5c>
				 {
					 CurrentLocation--;
     70a:	ca 94       	dec	r12
					 LCD_Shift(LCD_CursonLeft);
     70c:	80 e1       	ldi	r24, 0x10	; 16
     70e:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_Shift>
					 LCD_sendChar(' ');
     712:	80 e2       	ldi	r24, 0x20	; 32
     714:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_sendChar>
					 LCD_GoToLocation(CurrentLocation,1);
     718:	8c 2d       	mov	r24, r12
     71a:	6b 2d       	mov	r22, r11
     71c:	0e 94 0a 09 	call	0x1214	; 0x1214 <LCD_GoToLocation>
					 FirstNumArr[FirstNumFlag]=0;
     720:	ef 2d       	mov	r30, r15
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	8c 0f       	add	r24, r28
     732:	9d 1f       	adc	r25, r29
     734:	e8 0f       	add	r30, r24
     736:	f9 1f       	adc	r31, r25
     738:	14 82       	std	Z+4, r1	; 0x04
     73a:	15 82       	std	Z+5, r1	; 0x05
     73c:	16 82       	std	Z+6, r1	; 0x06
     73e:	17 82       	std	Z+7, r1	; 0x07
					 FirstNumFlag--;
     740:	fa 94       	dec	r15
     742:	f0 ce       	rjmp	.-544    	; 0x524 <main+0x5c>
				 }
				 if (FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag == 0 && EqualFlag == 0)
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	e9 16       	cp	r14, r25
     748:	09 f0       	breq	.+2      	; 0x74c <main+0x284>
     74a:	ec ce       	rjmp	.-552    	; 0x524 <main+0x5c>
     74c:	dd 20       	and	r13, r13
     74e:	e9 f5       	brne	.+122    	; 0x7ca <main+0x302>
     750:	00 23       	and	r16, r16
     752:	d9 f5       	brne	.+118    	; 0x7ca <main+0x302>
				 {
					 CurrentLocation--;
     754:	ca 94       	dec	r12
					 LCD_Shift(LCD_CursonLeft);
     756:	80 e1       	ldi	r24, 0x10	; 16
     758:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_Shift>
					 LCD_sendChar(' ');
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_sendChar>
					 LCD_GoToLocation(CurrentLocation,1);
     762:	8c 2d       	mov	r24, r12
     764:	6b 2d       	mov	r22, r11
     766:	0e 94 0a 09 	call	0x1214	; 0x1214 <LCD_GoToLocation>
					 Operator=0;
					 OperatorFlag=0;
     76a:	e9 2c       	mov	r14, r9
				 {
					 CurrentLocation--;
					 LCD_Shift(LCD_CursonLeft);
					 LCD_sendChar(' ');
					 LCD_GoToLocation(CurrentLocation,1);
					 Operator=0;
     76c:	a9 2c       	mov	r10, r9
     76e:	da ce       	rjmp	.-588    	; 0x524 <main+0x5c>
					 OperatorFlag=0;
				 }
				 if (FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
     770:	00 23       	and	r16, r16
     772:	41 f5       	brne	.+80     	; 0x7c4 <main+0x2fc>
				 {
					 CurrentLocation--;
     774:	ca 94       	dec	r12
					 LCD_Shift(LCD_CursonLeft);
     776:	80 e1       	ldi	r24, 0x10	; 16
     778:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_Shift>
					 LCD_sendChar(' ');
     77c:	80 e2       	ldi	r24, 0x20	; 32
     77e:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_sendChar>
					 LCD_GoToLocation(CurrentLocation,1);
     782:	8c 2d       	mov	r24, r12
     784:	6b 2d       	mov	r22, r11
     786:	0e 94 0a 09 	call	0x1214	; 0x1214 <LCD_GoToLocation>
					 SecondNumArr[SecondNumFlag]=0;
     78a:	ed 2d       	mov	r30, r13
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	a1 e0       	ldi	r26, 0x01	; 1
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	ac 0f       	add	r26, r28
     79c:	bd 1f       	adc	r27, r29
     79e:	ea 0f       	add	r30, r26
     7a0:	fb 1f       	adc	r31, r27
     7a2:	14 8a       	std	Z+20, r1	; 0x14
     7a4:	15 8a       	std	Z+21, r1	; 0x15
     7a6:	16 8a       	std	Z+22, r1	; 0x16
     7a8:	17 8a       	std	Z+23, r1	; 0x17
					 SecondNumFlag--;
     7aa:	da 94       	dec	r13
     7ac:	0b c0       	rjmp	.+22     	; 0x7c4 <main+0x2fc>
				 }
				 if (FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 1)
     7ae:	01 30       	cpi	r16, 0x01	; 1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <main+0x2ec>
     7b2:	b8 ce       	rjmp	.-656    	; 0x524 <main+0x5c>
				 {
					 LCD_ClearDesplay();
     7b4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <LCD_ClearDesplay>

					 FirstNumFlag=SecondNumFlag=OperatorFlag=EqualFlag=0;
     7b8:	09 2d       	mov	r16, r9
     7ba:	d9 2c       	mov	r13, r9
     7bc:	e9 2c       	mov	r14, r9
     7be:	f9 2c       	mov	r15, r9
					 CurrentLocation=1;
     7c0:	cb 2c       	mov	r12, r11
     7c2:	b0 ce       	rjmp	.-672    	; 0x524 <main+0x5c>
					 LCD_sendChar(' ');
					 LCD_GoToLocation(CurrentLocation,1);
					 SecondNumArr[SecondNumFlag]=0;
					 SecondNumFlag--;
				 }
				 if (FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 1)
     7c4:	dd 20       	and	r13, r13
     7c6:	99 f7       	brne	.-26     	; 0x7ae <main+0x2e6>
     7c8:	ad ce       	rjmp	.-678    	; 0x524 <main+0x5c>
					 LCD_sendChar(' ');
					 LCD_GoToLocation(CurrentLocation,1);
					 Operator=0;
					 OperatorFlag=0;
				 }
				 if (FirstNumFlag != 0 && OperatorFlag == 1  && SecondNumFlag != 0 && EqualFlag == 0)
     7ca:	dd 20       	and	r13, r13
     7cc:	89 f6       	brne	.-94     	; 0x770 <main+0x2a8>
     7ce:	fa cf       	rjmp	.-12     	; 0x7c4 <main+0x2fc>

000007d0 <DIO_SetPinDirection>:
     7d0:	84 30       	cpi	r24, 0x04	; 4
     7d2:	08 f0       	brcs	.+2      	; 0x7d6 <DIO_SetPinDirection+0x6>
     7d4:	8b c0       	rjmp	.+278    	; 0x8ec <__stack+0x8d>
     7d6:	68 30       	cpi	r22, 0x08	; 8
     7d8:	08 f0       	brcs	.+2      	; 0x7dc <DIO_SetPinDirection+0xc>
     7da:	8a c0       	rjmp	.+276    	; 0x8f0 <__stack+0x91>
     7dc:	42 30       	cpi	r20, 0x02	; 2
     7de:	08 f0       	brcs	.+2      	; 0x7e2 <DIO_SetPinDirection+0x12>
     7e0:	89 c0       	rjmp	.+274    	; 0x8f4 <__stack+0x95>
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	41 f1       	breq	.+80     	; 0x836 <DIO_SetPinDirection+0x66>
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	38 f0       	brcs	.+14     	; 0x7f8 <DIO_SetPinDirection+0x28>
     7ea:	82 30       	cpi	r24, 0x02	; 2
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <DIO_SetPinDirection+0x20>
     7ee:	41 c0       	rjmp	.+130    	; 0x872 <__stack+0x13>
     7f0:	83 30       	cpi	r24, 0x03	; 3
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <DIO_SetPinDirection+0x26>
     7f4:	81 c0       	rjmp	.+258    	; 0x8f8 <__stack+0x99>
     7f6:	5b c0       	rjmp	.+182    	; 0x8ae <__stack+0x4f>
     7f8:	41 30       	cpi	r20, 0x01	; 1
     7fa:	71 f4       	brne	.+28     	; 0x818 <DIO_SetPinDirection+0x48>
     7fc:	2a b3       	in	r18, 0x1a	; 26
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	ac 01       	movw	r20, r24
     804:	02 c0       	rjmp	.+4      	; 0x80a <DIO_SetPinDirection+0x3a>
     806:	44 0f       	add	r20, r20
     808:	55 1f       	adc	r21, r21
     80a:	6a 95       	dec	r22
     80c:	e2 f7       	brpl	.-8      	; 0x806 <DIO_SetPinDirection+0x36>
     80e:	ba 01       	movw	r22, r20
     810:	62 2b       	or	r22, r18
     812:	6a bb       	out	0x1a, r22	; 26
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	08 95       	ret
     818:	2a b3       	in	r18, 0x1a	; 26
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	ac 01       	movw	r20, r24
     820:	02 c0       	rjmp	.+4      	; 0x826 <DIO_SetPinDirection+0x56>
     822:	44 0f       	add	r20, r20
     824:	55 1f       	adc	r21, r21
     826:	6a 95       	dec	r22
     828:	e2 f7       	brpl	.-8      	; 0x822 <DIO_SetPinDirection+0x52>
     82a:	ba 01       	movw	r22, r20
     82c:	60 95       	com	r22
     82e:	62 23       	and	r22, r18
     830:	6a bb       	out	0x1a, r22	; 26
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	08 95       	ret
     836:	41 30       	cpi	r20, 0x01	; 1
     838:	69 f4       	brne	.+26     	; 0x854 <DIO_SetPinDirection+0x84>
     83a:	47 b3       	in	r20, 0x17	; 23
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	c9 01       	movw	r24, r18
     842:	02 c0       	rjmp	.+4      	; 0x848 <DIO_SetPinDirection+0x78>
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	6a 95       	dec	r22
     84a:	e2 f7       	brpl	.-8      	; 0x844 <DIO_SetPinDirection+0x74>
     84c:	84 2b       	or	r24, r20
     84e:	87 bb       	out	0x17, r24	; 23
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	08 95       	ret
     854:	27 b3       	in	r18, 0x17	; 23
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	ac 01       	movw	r20, r24
     85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
     85e:	44 0f       	add	r20, r20
     860:	55 1f       	adc	r21, r21
     862:	6a 95       	dec	r22
     864:	e2 f7       	brpl	.-8      	; 0x85e <DIO_SetPinDirection+0x8e>
     866:	ba 01       	movw	r22, r20
     868:	60 95       	com	r22
     86a:	62 23       	and	r22, r18
     86c:	67 bb       	out	0x17, r22	; 23
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	08 95       	ret
     872:	41 30       	cpi	r20, 0x01	; 1
     874:	69 f4       	brne	.+26     	; 0x890 <__stack+0x31>
     876:	44 b3       	in	r20, 0x14	; 20
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	c9 01       	movw	r24, r18
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	6a 95       	dec	r22
     886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
     888:	84 2b       	or	r24, r20
     88a:	84 bb       	out	0x14, r24	; 20
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	08 95       	ret
     890:	24 b3       	in	r18, 0x14	; 20
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	ac 01       	movw	r20, r24
     898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
     89a:	44 0f       	add	r20, r20
     89c:	55 1f       	adc	r21, r21
     89e:	6a 95       	dec	r22
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
     8a2:	ba 01       	movw	r22, r20
     8a4:	60 95       	com	r22
     8a6:	62 23       	and	r22, r18
     8a8:	64 bb       	out	0x14, r22	; 20
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	08 95       	ret
     8ae:	41 30       	cpi	r20, 0x01	; 1
     8b0:	71 f4       	brne	.+28     	; 0x8ce <__stack+0x6f>
     8b2:	21 b3       	in	r18, 0x11	; 17
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	ac 01       	movw	r20, r24
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
     8bc:	44 0f       	add	r20, r20
     8be:	55 1f       	adc	r21, r21
     8c0:	6a 95       	dec	r22
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
     8c4:	ba 01       	movw	r22, r20
     8c6:	62 2b       	or	r22, r18
     8c8:	61 bb       	out	0x11, r22	; 17
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	08 95       	ret
     8ce:	21 b3       	in	r18, 0x11	; 17
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	ac 01       	movw	r20, r24
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
     8d8:	44 0f       	add	r20, r20
     8da:	55 1f       	adc	r21, r21
     8dc:	6a 95       	dec	r22
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
     8e0:	ba 01       	movw	r22, r20
     8e2:	60 95       	com	r22
     8e4:	62 23       	and	r22, r18
     8e6:	61 bb       	out	0x11, r22	; 17
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	08 95       	ret
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	08 95       	ret
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 95       	ret
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	08 95       	ret
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	08 95       	ret

000008fc <DIO_SetPinValue>:
     8fc:	84 30       	cpi	r24, 0x04	; 4
     8fe:	08 f0       	brcs	.+2      	; 0x902 <DIO_SetPinValue+0x6>
     900:	8b c0       	rjmp	.+278    	; 0xa18 <DIO_SetPinValue+0x11c>
     902:	68 30       	cpi	r22, 0x08	; 8
     904:	08 f0       	brcs	.+2      	; 0x908 <DIO_SetPinValue+0xc>
     906:	8a c0       	rjmp	.+276    	; 0xa1c <DIO_SetPinValue+0x120>
     908:	42 30       	cpi	r20, 0x02	; 2
     90a:	08 f0       	brcs	.+2      	; 0x90e <DIO_SetPinValue+0x12>
     90c:	89 c0       	rjmp	.+274    	; 0xa20 <DIO_SetPinValue+0x124>
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	41 f1       	breq	.+80     	; 0x962 <DIO_SetPinValue+0x66>
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	38 f0       	brcs	.+14     	; 0x924 <DIO_SetPinValue+0x28>
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	09 f4       	brne	.+2      	; 0x91c <DIO_SetPinValue+0x20>
     91a:	41 c0       	rjmp	.+130    	; 0x99e <DIO_SetPinValue+0xa2>
     91c:	83 30       	cpi	r24, 0x03	; 3
     91e:	09 f0       	breq	.+2      	; 0x922 <DIO_SetPinValue+0x26>
     920:	81 c0       	rjmp	.+258    	; 0xa24 <DIO_SetPinValue+0x128>
     922:	5b c0       	rjmp	.+182    	; 0x9da <DIO_SetPinValue+0xde>
     924:	41 30       	cpi	r20, 0x01	; 1
     926:	71 f4       	brne	.+28     	; 0x944 <DIO_SetPinValue+0x48>
     928:	2b b3       	in	r18, 0x1b	; 27
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	ac 01       	movw	r20, r24
     930:	02 c0       	rjmp	.+4      	; 0x936 <DIO_SetPinValue+0x3a>
     932:	44 0f       	add	r20, r20
     934:	55 1f       	adc	r21, r21
     936:	6a 95       	dec	r22
     938:	e2 f7       	brpl	.-8      	; 0x932 <DIO_SetPinValue+0x36>
     93a:	ba 01       	movw	r22, r20
     93c:	62 2b       	or	r22, r18
     93e:	6b bb       	out	0x1b, r22	; 27
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	08 95       	ret
     944:	2b b3       	in	r18, 0x1b	; 27
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	ac 01       	movw	r20, r24
     94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_SetPinValue+0x56>
     94e:	44 0f       	add	r20, r20
     950:	55 1f       	adc	r21, r21
     952:	6a 95       	dec	r22
     954:	e2 f7       	brpl	.-8      	; 0x94e <DIO_SetPinValue+0x52>
     956:	ba 01       	movw	r22, r20
     958:	60 95       	com	r22
     95a:	62 23       	and	r22, r18
     95c:	6b bb       	out	0x1b, r22	; 27
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 95       	ret
     962:	41 30       	cpi	r20, 0x01	; 1
     964:	69 f4       	brne	.+26     	; 0x980 <DIO_SetPinValue+0x84>
     966:	48 b3       	in	r20, 0x18	; 24
     968:	21 e0       	ldi	r18, 0x01	; 1
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	c9 01       	movw	r24, r18
     96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_SetPinValue+0x78>
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	6a 95       	dec	r22
     976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_SetPinValue+0x74>
     978:	84 2b       	or	r24, r20
     97a:	88 bb       	out	0x18, r24	; 24
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	08 95       	ret
     980:	28 b3       	in	r18, 0x18	; 24
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	ac 01       	movw	r20, r24
     988:	02 c0       	rjmp	.+4      	; 0x98e <DIO_SetPinValue+0x92>
     98a:	44 0f       	add	r20, r20
     98c:	55 1f       	adc	r21, r21
     98e:	6a 95       	dec	r22
     990:	e2 f7       	brpl	.-8      	; 0x98a <DIO_SetPinValue+0x8e>
     992:	ba 01       	movw	r22, r20
     994:	60 95       	com	r22
     996:	62 23       	and	r22, r18
     998:	68 bb       	out	0x18, r22	; 24
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	08 95       	ret
     99e:	41 30       	cpi	r20, 0x01	; 1
     9a0:	69 f4       	brne	.+26     	; 0x9bc <DIO_SetPinValue+0xc0>
     9a2:	45 b3       	in	r20, 0x15	; 21
     9a4:	21 e0       	ldi	r18, 0x01	; 1
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	c9 01       	movw	r24, r18
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_SetPinValue+0xb4>
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	6a 95       	dec	r22
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_SetPinValue+0xb0>
     9b4:	84 2b       	or	r24, r20
     9b6:	85 bb       	out	0x15, r24	; 21
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret
     9bc:	25 b3       	in	r18, 0x15	; 21
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	ac 01       	movw	r20, r24
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <DIO_SetPinValue+0xce>
     9c6:	44 0f       	add	r20, r20
     9c8:	55 1f       	adc	r21, r21
     9ca:	6a 95       	dec	r22
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <DIO_SetPinValue+0xca>
     9ce:	ba 01       	movw	r22, r20
     9d0:	60 95       	com	r22
     9d2:	62 23       	and	r22, r18
     9d4:	65 bb       	out	0x15, r22	; 21
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	08 95       	ret
     9da:	41 30       	cpi	r20, 0x01	; 1
     9dc:	71 f4       	brne	.+28     	; 0x9fa <DIO_SetPinValue+0xfe>
     9de:	22 b3       	in	r18, 0x12	; 18
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	ac 01       	movw	r20, r24
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <DIO_SetPinValue+0xf0>
     9e8:	44 0f       	add	r20, r20
     9ea:	55 1f       	adc	r21, r21
     9ec:	6a 95       	dec	r22
     9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <DIO_SetPinValue+0xec>
     9f0:	ba 01       	movw	r22, r20
     9f2:	62 2b       	or	r22, r18
     9f4:	62 bb       	out	0x12, r22	; 18
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	08 95       	ret
     9fa:	22 b3       	in	r18, 0x12	; 18
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	ac 01       	movw	r20, r24
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_SetPinValue+0x10c>
     a04:	44 0f       	add	r20, r20
     a06:	55 1f       	adc	r21, r21
     a08:	6a 95       	dec	r22
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_SetPinValue+0x108>
     a0c:	ba 01       	movw	r22, r20
     a0e:	60 95       	com	r22
     a10:	62 23       	and	r22, r18
     a12:	62 bb       	out	0x12, r22	; 18
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	08 95       	ret
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	08 95       	ret
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 95       	ret
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	08 95       	ret
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	08 95       	ret

00000a28 <DIO_TogglePinValue>:
     a28:	84 30       	cpi	r24, 0x04	; 4
     a2a:	08 f0       	brcs	.+2      	; 0xa2e <DIO_TogglePinValue+0x6>
     a2c:	45 c0       	rjmp	.+138    	; 0xab8 <DIO_TogglePinValue+0x90>
     a2e:	68 30       	cpi	r22, 0x08	; 8
     a30:	08 f0       	brcs	.+2      	; 0xa34 <DIO_TogglePinValue+0xc>
     a32:	44 c0       	rjmp	.+136    	; 0xabc <DIO_TogglePinValue+0x94>
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	b1 f0       	breq	.+44     	; 0xa64 <DIO_TogglePinValue+0x3c>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	30 f0       	brcs	.+12     	; 0xa48 <DIO_TogglePinValue+0x20>
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	01 f1       	breq	.+64     	; 0xa80 <DIO_TogglePinValue+0x58>
     a40:	83 30       	cpi	r24, 0x03	; 3
     a42:	09 f0       	breq	.+2      	; 0xa46 <DIO_TogglePinValue+0x1e>
     a44:	3d c0       	rjmp	.+122    	; 0xac0 <DIO_TogglePinValue+0x98>
     a46:	2a c0       	rjmp	.+84     	; 0xa9c <DIO_TogglePinValue+0x74>
     a48:	2b b3       	in	r18, 0x1b	; 27
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	ac 01       	movw	r20, r24
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <DIO_TogglePinValue+0x2e>
     a52:	44 0f       	add	r20, r20
     a54:	55 1f       	adc	r21, r21
     a56:	6a 95       	dec	r22
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <DIO_TogglePinValue+0x2a>
     a5a:	ba 01       	movw	r22, r20
     a5c:	62 27       	eor	r22, r18
     a5e:	6b bb       	out	0x1b, r22	; 27
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	08 95       	ret
     a64:	28 b3       	in	r18, 0x18	; 24
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	ac 01       	movw	r20, r24
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <DIO_TogglePinValue+0x4a>
     a6e:	44 0f       	add	r20, r20
     a70:	55 1f       	adc	r21, r21
     a72:	6a 95       	dec	r22
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <DIO_TogglePinValue+0x46>
     a76:	ba 01       	movw	r22, r20
     a78:	62 27       	eor	r22, r18
     a7a:	68 bb       	out	0x18, r22	; 24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 95       	ret
     a80:	25 b3       	in	r18, 0x15	; 21
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	ac 01       	movw	r20, r24
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <DIO_TogglePinValue+0x66>
     a8a:	44 0f       	add	r20, r20
     a8c:	55 1f       	adc	r21, r21
     a8e:	6a 95       	dec	r22
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <DIO_TogglePinValue+0x62>
     a92:	ba 01       	movw	r22, r20
     a94:	62 27       	eor	r22, r18
     a96:	65 bb       	out	0x15, r22	; 21
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	08 95       	ret
     a9c:	22 b3       	in	r18, 0x12	; 18
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	ac 01       	movw	r20, r24
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_TogglePinValue+0x82>
     aa6:	44 0f       	add	r20, r20
     aa8:	55 1f       	adc	r21, r21
     aaa:	6a 95       	dec	r22
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_TogglePinValue+0x7e>
     aae:	ba 01       	movw	r22, r20
     ab0:	62 27       	eor	r22, r18
     ab2:	62 bb       	out	0x12, r22	; 18
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	08 95       	ret
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 95       	ret
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	08 95       	ret
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret

00000ac4 <DIO_ReadValue>:
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	08 f0       	brcs	.+2      	; 0xaca <DIO_ReadValue+0x6>
     ac8:	49 c0       	rjmp	.+146    	; 0xb5c <DIO_ReadValue+0x98>
     aca:	68 30       	cpi	r22, 0x08	; 8
     acc:	08 f0       	brcs	.+2      	; 0xad0 <DIO_ReadValue+0xc>
     ace:	48 c0       	rjmp	.+144    	; 0xb60 <DIO_ReadValue+0x9c>
     ad0:	41 15       	cp	r20, r1
     ad2:	51 05       	cpc	r21, r1
     ad4:	09 f4       	brne	.+2      	; 0xad8 <DIO_ReadValue+0x14>
     ad6:	46 c0       	rjmp	.+140    	; 0xb64 <DIO_ReadValue+0xa0>
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	b1 f0       	breq	.+44     	; 0xb08 <DIO_ReadValue+0x44>
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	30 f0       	brcs	.+12     	; 0xaec <DIO_ReadValue+0x28>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	01 f1       	breq	.+64     	; 0xb24 <DIO_ReadValue+0x60>
     ae4:	83 30       	cpi	r24, 0x03	; 3
     ae6:	09 f0       	breq	.+2      	; 0xaea <DIO_ReadValue+0x26>
     ae8:	3f c0       	rjmp	.+126    	; 0xb68 <DIO_ReadValue+0xa4>
     aea:	2a c0       	rjmp	.+84     	; 0xb40 <DIO_ReadValue+0x7c>
     aec:	89 b3       	in	r24, 0x19	; 25
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	9c 01       	movw	r18, r24
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_ReadValue+0x34>
     af4:	35 95       	asr	r19
     af6:	27 95       	ror	r18
     af8:	6a 95       	dec	r22
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_ReadValue+0x30>
     afc:	b9 01       	movw	r22, r18
     afe:	61 70       	andi	r22, 0x01	; 1
     b00:	fa 01       	movw	r30, r20
     b02:	60 83       	st	Z, r22
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	08 95       	ret
     b08:	86 b3       	in	r24, 0x16	; 22
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	9c 01       	movw	r18, r24
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_ReadValue+0x50>
     b10:	35 95       	asr	r19
     b12:	27 95       	ror	r18
     b14:	6a 95       	dec	r22
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_ReadValue+0x4c>
     b18:	b9 01       	movw	r22, r18
     b1a:	61 70       	andi	r22, 0x01	; 1
     b1c:	fa 01       	movw	r30, r20
     b1e:	60 83       	st	Z, r22
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	08 95       	ret
     b24:	83 b3       	in	r24, 0x13	; 19
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	9c 01       	movw	r18, r24
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_ReadValue+0x6c>
     b2c:	35 95       	asr	r19
     b2e:	27 95       	ror	r18
     b30:	6a 95       	dec	r22
     b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_ReadValue+0x68>
     b34:	b9 01       	movw	r22, r18
     b36:	61 70       	andi	r22, 0x01	; 1
     b38:	fa 01       	movw	r30, r20
     b3a:	60 83       	st	Z, r22
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	08 95       	ret
     b40:	80 b3       	in	r24, 0x10	; 16
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	9c 01       	movw	r18, r24
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <DIO_ReadValue+0x88>
     b48:	35 95       	asr	r19
     b4a:	27 95       	ror	r18
     b4c:	6a 95       	dec	r22
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <DIO_ReadValue+0x84>
     b50:	b9 01       	movw	r22, r18
     b52:	61 70       	andi	r22, 0x01	; 1
     b54:	fa 01       	movw	r30, r20
     b56:	60 83       	st	Z, r22
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	08 95       	ret
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	08 95       	ret
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	08 95       	ret
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	08 95       	ret
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	08 95       	ret

00000b6c <DIO_activePinInPullUpResistance>:
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	08 f0       	brcs	.+2      	; 0xb72 <DIO_activePinInPullUpResistance+0x6>
     b70:	45 c0       	rjmp	.+138    	; 0xbfc <DIO_activePinInPullUpResistance+0x90>
     b72:	68 30       	cpi	r22, 0x08	; 8
     b74:	08 f0       	brcs	.+2      	; 0xb78 <DIO_activePinInPullUpResistance+0xc>
     b76:	44 c0       	rjmp	.+136    	; 0xc00 <DIO_activePinInPullUpResistance+0x94>
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	b1 f0       	breq	.+44     	; 0xba8 <DIO_activePinInPullUpResistance+0x3c>
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	30 f0       	brcs	.+12     	; 0xb8c <DIO_activePinInPullUpResistance+0x20>
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	01 f1       	breq	.+64     	; 0xbc4 <DIO_activePinInPullUpResistance+0x58>
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	09 f0       	breq	.+2      	; 0xb8a <DIO_activePinInPullUpResistance+0x1e>
     b88:	3d c0       	rjmp	.+122    	; 0xc04 <DIO_activePinInPullUpResistance+0x98>
     b8a:	2a c0       	rjmp	.+84     	; 0xbe0 <DIO_activePinInPullUpResistance+0x74>
     b8c:	2b b3       	in	r18, 0x1b	; 27
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	ac 01       	movw	r20, r24
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <DIO_activePinInPullUpResistance+0x2e>
     b96:	44 0f       	add	r20, r20
     b98:	55 1f       	adc	r21, r21
     b9a:	6a 95       	dec	r22
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <DIO_activePinInPullUpResistance+0x2a>
     b9e:	ba 01       	movw	r22, r20
     ba0:	62 2b       	or	r22, r18
     ba2:	6b bb       	out	0x1b, r22	; 27
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	08 95       	ret
     ba8:	28 b3       	in	r18, 0x18	; 24
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	ac 01       	movw	r20, r24
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_activePinInPullUpResistance+0x4a>
     bb2:	44 0f       	add	r20, r20
     bb4:	55 1f       	adc	r21, r21
     bb6:	6a 95       	dec	r22
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_activePinInPullUpResistance+0x46>
     bba:	ba 01       	movw	r22, r20
     bbc:	62 2b       	or	r22, r18
     bbe:	68 bb       	out	0x18, r22	; 24
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	08 95       	ret
     bc4:	25 b3       	in	r18, 0x15	; 21
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	ac 01       	movw	r20, r24
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_activePinInPullUpResistance+0x66>
     bce:	44 0f       	add	r20, r20
     bd0:	55 1f       	adc	r21, r21
     bd2:	6a 95       	dec	r22
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_activePinInPullUpResistance+0x62>
     bd6:	ba 01       	movw	r22, r20
     bd8:	62 2b       	or	r22, r18
     bda:	65 bb       	out	0x15, r22	; 21
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	08 95       	ret
     be0:	22 b3       	in	r18, 0x12	; 18
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	ac 01       	movw	r20, r24
     be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_activePinInPullUpResistance+0x82>
     bea:	44 0f       	add	r20, r20
     bec:	55 1f       	adc	r21, r21
     bee:	6a 95       	dec	r22
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_activePinInPullUpResistance+0x7e>
     bf2:	ba 01       	movw	r22, r20
     bf4:	62 2b       	or	r22, r18
     bf6:	62 bb       	out	0x12, r22	; 18
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 95       	ret
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	08 95       	ret
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	08 95       	ret
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	08 95       	ret

00000c08 <DIO_setPortDirection>:
     c08:	84 30       	cpi	r24, 0x04	; 4
     c0a:	a8 f5       	brcc	.+106    	; 0xc76 <DIO_setPortDirection+0x6e>
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	91 f0       	breq	.+36     	; 0xc34 <DIO_setPortDirection+0x2c>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	28 f0       	brcs	.+10     	; 0xc1e <DIO_setPortDirection+0x16>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	c9 f0       	breq	.+50     	; 0xc4a <DIO_setPortDirection+0x42>
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	79 f5       	brne	.+94     	; 0xc7a <DIO_setPortDirection+0x72>
     c1c:	21 c0       	rjmp	.+66     	; 0xc60 <DIO_setPortDirection+0x58>
     c1e:	6f 3f       	cpi	r22, 0xFF	; 255
     c20:	29 f4       	brne	.+10     	; 0xc2c <DIO_setPortDirection+0x24>
     c22:	8a b3       	in	r24, 0x1a	; 26
     c24:	8f ef       	ldi	r24, 0xFF	; 255
     c26:	8a bb       	out	0x1a, r24	; 26
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	08 95       	ret
     c2c:	8a b3       	in	r24, 0x1a	; 26
     c2e:	1a ba       	out	0x1a, r1	; 26
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	08 95       	ret
     c34:	6f 3f       	cpi	r22, 0xFF	; 255
     c36:	29 f4       	brne	.+10     	; 0xc42 <DIO_setPortDirection+0x3a>
     c38:	87 b3       	in	r24, 0x17	; 23
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	87 bb       	out	0x17, r24	; 23
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	08 95       	ret
     c42:	87 b3       	in	r24, 0x17	; 23
     c44:	17 ba       	out	0x17, r1	; 23
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 95       	ret
     c4a:	6f 3f       	cpi	r22, 0xFF	; 255
     c4c:	29 f4       	brne	.+10     	; 0xc58 <DIO_setPortDirection+0x50>
     c4e:	84 b3       	in	r24, 0x14	; 20
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	84 bb       	out	0x14, r24	; 20
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	08 95       	ret
     c58:	84 b3       	in	r24, 0x14	; 20
     c5a:	14 ba       	out	0x14, r1	; 20
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	08 95       	ret
     c60:	6f 3f       	cpi	r22, 0xFF	; 255
     c62:	29 f4       	brne	.+10     	; 0xc6e <DIO_setPortDirection+0x66>
     c64:	81 b3       	in	r24, 0x11	; 17
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	81 bb       	out	0x11, r24	; 17
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	08 95       	ret
     c6e:	81 b3       	in	r24, 0x11	; 17
     c70:	11 ba       	out	0x11, r1	; 17
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	08 95       	ret
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	08 95       	ret

00000c7e <DIO_setPortValue>:
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	a8 f4       	brcc	.+42     	; 0xcac <DIO_setPortValue+0x2e>
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	51 f0       	breq	.+20     	; 0xc9a <DIO_setPortValue+0x1c>
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	28 f0       	brcs	.+10     	; 0xc94 <DIO_setPortValue+0x16>
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	49 f0       	breq	.+18     	; 0xca0 <DIO_setPortValue+0x22>
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	79 f4       	brne	.+30     	; 0xcb0 <DIO_setPortValue+0x32>
     c92:	09 c0       	rjmp	.+18     	; 0xca6 <DIO_setPortValue+0x28>
     c94:	6b bb       	out	0x1b, r22	; 27
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	08 95       	ret
     c9a:	68 bb       	out	0x18, r22	; 24
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	08 95       	ret
     ca0:	65 bb       	out	0x15, r22	; 21
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	08 95       	ret
     ca6:	62 bb       	out	0x12, r22	; 18
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	08 95       	ret
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	08 95       	ret
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	08 95       	ret

00000cb4 <DIO_getPortValue>:
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	00 f5       	brcc	.+64     	; 0xcf8 <DIO_getPortValue+0x44>
     cb8:	61 15       	cp	r22, r1
     cba:	71 05       	cpc	r23, r1
     cbc:	f9 f0       	breq	.+62     	; 0xcfc <DIO_getPortValue+0x48>
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	61 f0       	breq	.+24     	; 0xcda <DIO_getPortValue+0x26>
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	28 f0       	brcs	.+10     	; 0xcd0 <DIO_getPortValue+0x1c>
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	69 f0       	breq	.+26     	; 0xce4 <DIO_getPortValue+0x30>
     cca:	83 30       	cpi	r24, 0x03	; 3
     ccc:	c9 f4       	brne	.+50     	; 0xd00 <DIO_getPortValue+0x4c>
     cce:	0f c0       	rjmp	.+30     	; 0xcee <DIO_getPortValue+0x3a>
     cd0:	8b b3       	in	r24, 0x1b	; 27
     cd2:	fb 01       	movw	r30, r22
     cd4:	80 83       	st	Z, r24
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	08 95       	ret
     cda:	88 b3       	in	r24, 0x18	; 24
     cdc:	fb 01       	movw	r30, r22
     cde:	80 83       	st	Z, r24
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	08 95       	ret
     ce4:	85 b3       	in	r24, 0x15	; 21
     ce6:	fb 01       	movw	r30, r22
     ce8:	80 83       	st	Z, r24
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	08 95       	ret
     cee:	82 b3       	in	r24, 0x12	; 18
     cf0:	fb 01       	movw	r30, r22
     cf2:	80 83       	st	Z, r24
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	08 95       	ret
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	08 95       	ret
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	08 95       	ret
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	08 95       	ret

00000d04 <DIO_togglePortValue>:
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	e8 f4       	brcc	.+58     	; 0xd42 <DIO_togglePortValue+0x3e>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	61 f0       	breq	.+24     	; 0xd24 <DIO_togglePortValue+0x20>
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	28 f0       	brcs	.+10     	; 0xd1a <DIO_togglePortValue+0x16>
     d10:	82 30       	cpi	r24, 0x02	; 2
     d12:	69 f0       	breq	.+26     	; 0xd2e <DIO_togglePortValue+0x2a>
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	b9 f4       	brne	.+46     	; 0xd46 <DIO_togglePortValue+0x42>
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <DIO_togglePortValue+0x34>
     d1a:	8b b3       	in	r24, 0x1b	; 27
     d1c:	80 95       	com	r24
     d1e:	8b bb       	out	0x1b, r24	; 27
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	08 95       	ret
     d24:	88 b3       	in	r24, 0x18	; 24
     d26:	80 95       	com	r24
     d28:	88 bb       	out	0x18, r24	; 24
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	08 95       	ret
     d2e:	85 b3       	in	r24, 0x15	; 21
     d30:	80 95       	com	r24
     d32:	85 bb       	out	0x15, r24	; 21
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	08 95       	ret
     d38:	82 b3       	in	r24, 0x12	; 18
     d3a:	80 95       	com	r24
     d3c:	82 bb       	out	0x12, r24	; 18
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	08 95       	ret
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	08 95       	ret
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	08 95       	ret

00000d4a <DIO_activePortInPullUpResistance>:
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	e8 f4       	brcc	.+58     	; 0xd88 <DIO_activePortInPullUpResistance+0x3e>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	61 f0       	breq	.+24     	; 0xd6a <DIO_activePortInPullUpResistance+0x20>
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	28 f0       	brcs	.+10     	; 0xd60 <DIO_activePortInPullUpResistance+0x16>
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	69 f0       	breq	.+26     	; 0xd74 <DIO_activePortInPullUpResistance+0x2a>
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	b9 f4       	brne	.+46     	; 0xd8c <DIO_activePortInPullUpResistance+0x42>
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <DIO_activePortInPullUpResistance+0x34>
     d60:	8b b3       	in	r24, 0x1b	; 27
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	8b bb       	out	0x1b, r24	; 27
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	08 95       	ret
     d6a:	88 b3       	in	r24, 0x18	; 24
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	88 bb       	out	0x18, r24	; 24
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	08 95       	ret
     d74:	85 b3       	in	r24, 0x15	; 21
     d76:	8f ef       	ldi	r24, 0xFF	; 255
     d78:	85 bb       	out	0x15, r24	; 21
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	08 95       	ret
     d7e:	82 b3       	in	r24, 0x12	; 18
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	82 bb       	out	0x12, r24	; 18
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	08 95       	ret
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	08 95       	ret
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	08 95       	ret

00000d90 <KEYPAD_init>:
#include "KEYPAD_interface.h"


void KEYPAD_init(void)
{
	DIO_SetPinDirection(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN,DIO_PORT_INPUT);
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	64 e0       	ldi	r22, 0x04	; 4
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN,DIO_PORT_INPUT);	
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	65 e0       	ldi	r22, 0x05	; 5
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN,DIO_PORT_INPUT);	
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	66 e0       	ldi	r22, 0x06	; 6
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN,DIO_PORT_INPUT);	
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	67 e0       	ldi	r22, 0x07	; 7
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(KEYPAD_COL0_PORT,KEYPAD_COL0_PIN,DIO_PORT_OUTPUT);	
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	4f ef       	ldi	r20, 0xFF	; 255
     dbe:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL1_PORT,KEYPAD_COL1_PIN,DIO_PORT_OUTPUT);	
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	4f ef       	ldi	r20, 0xFF	; 255
     dc8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL2_PORT,KEYPAD_COL2_PIN,DIO_PORT_OUTPUT);	
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	62 e0       	ldi	r22, 0x02	; 2
     dd0:	4f ef       	ldi	r20, 0xFF	; 255
     dd2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL3_PORT,KEYPAD_COL3_PIN,DIO_PORT_OUTPUT);	
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	63 e0       	ldi	r22, 0x03	; 3
     dda:	4f ef       	ldi	r20, 0xFF	; 255
     ddc:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(KEYPAD_COL0_PORT,KEYPAD_COL0_PIN,DIO_PIN_HIGH);
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL1_PORT,KEYPAD_COL1_PIN,DIO_PIN_HIGH);
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	41 e0       	ldi	r20, 0x01	; 1
     df0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL2_PORT,KEYPAD_COL2_PIN,DIO_PIN_HIGH);
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	62 e0       	ldi	r22, 0x02	; 2
     df8:	41 e0       	ldi	r20, 0x01	; 1
     dfa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL3_PORT,KEYPAD_COL3_PIN,DIO_PIN_HIGH);
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	63 e0       	ldi	r22, 0x03	; 3
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	
	DIO_activePinInPullUpResistance(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN);
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	64 e0       	ldi	r22, 0x04	; 4
     e0c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN);
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	65 e0       	ldi	r22, 0x05	; 5
     e14:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN);
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	66 e0       	ldi	r22, 0x06	; 6
     e1c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN);
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	67 e0       	ldi	r22, 0x07	; 7
     e24:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_activePinInPullUpResistance>
}
     e28:	08 95       	ret

00000e2a <KEYPAD_GetValue>:


void KEYPAD_GetValue(u8* ReturnedValue)  //try switch 
{
     e2a:	2f 92       	push	r2
     e2c:	3f 92       	push	r3
     e2e:	4f 92       	push	r4
     e30:	5f 92       	push	r5
     e32:	6f 92       	push	r6
     e34:	7f 92       	push	r7
     e36:	8f 92       	push	r8
     e38:	9f 92       	push	r9
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	a7 97       	sbiw	r28, 0x27	; 39
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	9f a3       	lds	r25, 0x5f
     e60:	8e a3       	lds	r24, 0x5e
	if (ReturnedValue != NULL)
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	09 f4       	brne	.+2      	; 0xe68 <KEYPAD_GetValue+0x3e>
     e66:	90 c0       	rjmp	.+288    	; 0xf88 <KEYPAD_GetValue+0x15e>
	{
		*ReturnedValue=KEYPAD_NOT_PRESSED;
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	ee a1       	lds	r30, 0x4e
     e6c:	ff a1       	lds	r31, 0x4f
     e6e:	80 83       	st	Z, r24
		
		u8 RowsCounter,ColumnsCounter ;
		
		u8 ColumnsPort[4]={KEYPAD_COL0_PORT,KEYPAD_COL1_PORT,KEYPAD_COL2_PORT,KEYPAD_COL3_PORT};
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	8e 87       	std	Y+14, r24	; 0x0e
     e74:	8f 87       	std	Y+15, r24	; 0x0f
     e76:	88 8b       	std	Y+16, r24	; 0x10
     e78:	89 8b       	std	Y+17, r24	; 0x11
		u8 ColumnsPins[4]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN};
     e7a:	1a 86       	std	Y+10, r1	; 0x0a
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	9b 87       	std	Y+11, r25	; 0x0b
     e80:	8c 87       	std	Y+12, r24	; 0x0c
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	9d 87       	std	Y+13, r25	; 0x0d
	
		u8 RowsPort[4]={KEYPAD_ROW0_PORT,KEYPAD_ROW1_PORT,KEYPAD_ROW2_PORT,KEYPAD_ROW3_PORT};
     e86:	8e 83       	std	Y+6, r24	; 0x06
     e88:	8f 83       	std	Y+7, r24	; 0x07
     e8a:	88 87       	std	Y+8, r24	; 0x08
     e8c:	89 87       	std	Y+9, r24	; 0x09
     	u8 RowsPins[4]={KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	8a 83       	std	Y+2, r24	; 0x02
     e92:	85 e0       	ldi	r24, 0x05	; 5
     e94:	8b 83       	std	Y+3, r24	; 0x03
     e96:	86 e0       	ldi	r24, 0x06	; 6
     e98:	8c 83       	std	Y+4, r24	; 0x04
     e9a:	87 e0       	ldi	r24, 0x07	; 7
     e9c:	8d 83       	std	Y+5, r24	; 0x05
        
		u8 PinValue,PinFlag=0;
		
		u8 KEYPAD_Caracters [4][4] = KEYPAD_PATTERN;
     e9e:	de 01       	movw	r26, r28
     ea0:	52 96       	adiw	r26, 0x12	; 18
     ea2:	eb e8       	ldi	r30, 0x8B	; 139
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 e1       	ldi	r24, 0x10	; 16
     ea8:	01 90       	ld	r0, Z+
     eaa:	0d 92       	st	X+, r0
     eac:	81 50       	subi	r24, 0x01	; 1
     eae:	e1 f7       	brne	.-8      	; 0xea8 <KEYPAD_GetValue+0x7e>
     eb0:	0f 2e       	mov	r0, r31
     eb2:	fe e0       	ldi	r31, 0x0E	; 14
     eb4:	2f 2e       	mov	r2, r31
     eb6:	33 24       	eor	r3, r3
     eb8:	f0 2d       	mov	r31, r0
     eba:	2c 0e       	add	r2, r28
     ebc:	3d 1e       	adc	r3, r29
     ebe:	ce 01       	movw	r24, r28
     ec0:	0a 96       	adiw	r24, 0x0a	; 10
     ec2:	9b a3       	lds	r25, 0x5b
     ec4:	8a a3       	lds	r24, 0x5a
     ec6:	88 24       	eor	r8, r8
     ec8:	99 24       	eor	r9, r9
										  
		for(ColumnsCounter=0;ColumnsCounter<4;ColumnsCounter++)
		{
			//Activate Each Column 
			DIO_SetPinValue(ColumnsPort[ColumnsCounter],ColumnsPins[ColumnsCounter],DIO_PIN_LOW);
     eca:	9d a2       	lds	r25, 0x9d
     ecc:	8c a2       	lds	r24, 0x9c
     ece:	f1 01       	movw	r30, r2
     ed0:	71 90       	ld	r7, Z+
     ed2:	1f 01       	movw	r2, r30
     ed4:	ea a1       	lds	r30, 0x4a
     ed6:	fb a1       	lds	r31, 0x4b
     ed8:	61 90       	ld	r6, Z+
     eda:	fb a3       	lds	r31, 0x5b
     edc:	ea a3       	lds	r30, 0x5a
     ede:	87 2d       	mov	r24, r7
     ee0:	66 2d       	mov	r22, r6
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
     ee8:	0f 2e       	mov	r0, r31
     eea:	f6 e0       	ldi	r31, 0x06	; 6
     eec:	cf 2e       	mov	r12, r31
     eee:	dd 24       	eor	r13, r13
     ef0:	f0 2d       	mov	r31, r0
     ef2:	cc 0e       	add	r12, r28
     ef4:	dd 1e       	adc	r13, r29
     ef6:	aa 24       	eor	r10, r10
     ef8:	bb 24       	eor	r11, r11
     efa:	68 94       	set
     efc:	a1 f8       	bld	r10, 1
     efe:	ac 0e       	add	r10, r28
     f00:	bd 1e       	adc	r11, r29
     f02:	00 e0       	ldi	r16, 0x00	; 0
     f04:	10 e0       	ldi	r17, 0x00	; 0
			for (RowsCounter=0;RowsCounter<4;RowsCounter++)
			{
				//Read Rows 
				DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
     f06:	28 01       	movw	r4, r16
     f08:	f6 01       	movw	r30, r12
     f0a:	e1 90       	ld	r14, Z+
     f0c:	6f 01       	movw	r12, r30
     f0e:	f5 01       	movw	r30, r10
     f10:	f1 90       	ld	r15, Z+
     f12:	5f 01       	movw	r10, r30
     f14:	8e 2d       	mov	r24, r14
     f16:	6f 2d       	mov	r22, r15
     f18:	ae 01       	movw	r20, r28
     f1a:	4f 5f       	subi	r20, 0xFF	; 255
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	0e 94 62 05 	call	0xac4	; 0xac4 <DIO_ReadValue>
				if (KEYPAD_PRESSED == PinValue)
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	88 23       	and	r24, r24
     f26:	f1 f4       	brne	.+60     	; 0xf64 <KEYPAD_GetValue+0x13a>
				{
					while (KEYPAD_PRESSED == PinValue)
					{
						//block keypad to take one value for one pressed 
						DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
     f28:	8e 2d       	mov	r24, r14
     f2a:	6f 2d       	mov	r22, r15
     f2c:	ae 01       	movw	r20, r28
     f2e:	4f 5f       	subi	r20, 0xFF	; 255
     f30:	5f 4f       	sbci	r21, 0xFF	; 255
     f32:	0e 94 62 05 	call	0xac4	; 0xac4 <DIO_ReadValue>
			{
				//Read Rows 
				DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
				if (KEYPAD_PRESSED == PinValue)
				{
					while (KEYPAD_PRESSED == PinValue)
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	88 23       	and	r24, r24
     f3a:	b1 f3       	breq	.-20     	; 0xf28 <KEYPAD_GetValue+0xfe>
					{
						//block keypad to take one value for one pressed 
						DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
					}
					*ReturnedValue = KEYPAD_Caracters[RowsCounter][ColumnsCounter];
     f3c:	f2 01       	movw	r30, r4
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	8c 0f       	add	r24, r28
     f4c:	9d 1f       	adc	r25, r29
     f4e:	e8 0f       	add	r30, r24
     f50:	f9 1f       	adc	r31, r25
     f52:	8c a1       	lds	r24, 0x4c
     f54:	9d a1       	lds	r25, 0x4d
     f56:	e8 0f       	add	r30, r24
     f58:	f9 1f       	adc	r31, r25
     f5a:	81 89       	ldd	r24, Z+17	; 0x11
     f5c:	ee a1       	lds	r30, 0x4e
     f5e:	ff a1       	lds	r31, 0x4f
     f60:	80 83       	st	Z, r24
     f62:	12 c0       	rjmp	.+36     	; 0xf88 <KEYPAD_GetValue+0x15e>
     f64:	0f 5f       	subi	r16, 0xFF	; 255
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
										  
		for(ColumnsCounter=0;ColumnsCounter<4;ColumnsCounter++)
		{
			//Activate Each Column 
			DIO_SetPinValue(ColumnsPort[ColumnsCounter],ColumnsPins[ColumnsCounter],DIO_PIN_LOW);
			for (RowsCounter=0;RowsCounter<4;RowsCounter++)
     f68:	04 30       	cpi	r16, 0x04	; 4
     f6a:	11 05       	cpc	r17, r1
     f6c:	61 f6       	brne	.-104    	; 0xf06 <KEYPAD_GetValue+0xdc>
			if (1 ==PinFlag)
			{
				break;
			}
			//Deactivate Current Column 
			DIO_SetPinValue(ColumnsPort[ColumnsCounter],ColumnsPins[ColumnsCounter],DIO_PIN_HIGH);
     f6e:	87 2d       	mov	r24, r7
     f70:	66 2d       	mov	r22, r6
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
     f78:	08 94       	sec
     f7a:	81 1c       	adc	r8, r1
     f7c:	91 1c       	adc	r9, r1
        
		u8 PinValue,PinFlag=0;
		
		u8 KEYPAD_Caracters [4][4] = KEYPAD_PATTERN;
										  
		for(ColumnsCounter=0;ColumnsCounter<4;ColumnsCounter++)
     f7e:	f4 e0       	ldi	r31, 0x04	; 4
     f80:	8f 16       	cp	r8, r31
     f82:	91 04       	cpc	r9, r1
     f84:	09 f0       	breq	.+2      	; 0xf88 <KEYPAD_GetValue+0x15e>
     f86:	a1 cf       	rjmp	.-190    	; 0xeca <KEYPAD_GetValue+0xa0>
	} 
	else
	{
		//do nothing
	}	
}
     f88:	a7 96       	adiw	r28, 0x27	; 39
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	cf 90       	pop	r12
     fa4:	bf 90       	pop	r11
     fa6:	af 90       	pop	r10
     fa8:	9f 90       	pop	r9
     faa:	8f 90       	pop	r8
     fac:	7f 90       	pop	r7
     fae:	6f 90       	pop	r6
     fb0:	5f 90       	pop	r5
     fb2:	4f 90       	pop	r4
     fb4:	3f 90       	pop	r3
     fb6:	2f 90       	pop	r2
     fb8:	08 95       	ret

00000fba <private_WriteHalfPort>:
	#endif
}


void private_WriteHalfPort (u8 Value)
{
     fba:	cf 93       	push	r28
     fbc:	c8 2f       	mov	r28, r24
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit0)) ? (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH));
     fbe:	80 fd       	sbrc	r24, 0
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <private_WriteHalfPort+0x14>
     fc2:	83 e0       	ldi	r24, 0x03	; 3
     fc4:	64 e0       	ldi	r22, 0x04	; 4
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <private_WriteHalfPort+0x1e>
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	64 e0       	ldi	r22, 0x04	; 4
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit1)) ? (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH));
     fd8:	8c 2f       	mov	r24, r28
     fda:	86 95       	lsr	r24
     fdc:	80 fd       	sbrc	r24, 0
     fde:	06 c0       	rjmp	.+12     	; 0xfec <private_WriteHalfPort+0x32>
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	65 e0       	ldi	r22, 0x05	; 5
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
     fea:	05 c0       	rjmp	.+10     	; 0xff6 <private_WriteHalfPort+0x3c>
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	65 e0       	ldi	r22, 0x05	; 5
     ff0:	41 e0       	ldi	r20, 0x01	; 1
     ff2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit2)) ? (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH));
     ff6:	8c 2f       	mov	r24, r28
     ff8:	86 95       	lsr	r24
     ffa:	86 95       	lsr	r24
     ffc:	80 fd       	sbrc	r24, 0
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <private_WriteHalfPort+0x52>
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	66 e0       	ldi	r22, 0x06	; 6
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <private_WriteHalfPort+0x5c>
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	66 e0       	ldi	r22, 0x06	; 6
    1010:	41 e0       	ldi	r20, 0x01	; 1
    1012:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit3)) ? (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH));
    1016:	c6 95       	lsr	r28
    1018:	c6 95       	lsr	r28
    101a:	c6 95       	lsr	r28
    101c:	c0 fd       	sbrc	r28, 0
    101e:	06 c0       	rjmp	.+12     	; 0x102c <private_WriteHalfPort+0x72>
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	67 e0       	ldi	r22, 0x07	; 7
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <private_WriteHalfPort+0x7c>
    102c:	83 e0       	ldi	r24, 0x03	; 3
    102e:	67 e0       	ldi	r22, 0x07	; 7
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
}
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <LCD_sendComnd>:
	
	#endif
}

void LCD_sendComnd(u8 Cmnd)
{
    103a:	cf 93       	push	r28
    103c:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	62 e0       	ldi	r22, 0x02	; 2
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd>>4);                                    //PORTA_REG= (PORTA_REG & 0x0f) | (Cmnd & 0xf0)
    1052:	8c 2f       	mov	r24, r28
    1054:	82 95       	swap	r24
    1056:	8f 70       	andi	r24, 0x0F	; 15
    1058:	0e 94 dd 07 	call	0xfba	; 0xfba <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	63 e0       	ldi	r22, 0x03	; 3
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
    1066:	8f e9       	ldi	r24, 0x9F	; 159
    1068:	9f e0       	ldi	r25, 0x0F	; 15
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <LCD_sendComnd+0x30>
    106e:	00 c0       	rjmp	.+0      	; 0x1070 <LCD_sendComnd+0x36>
    1070:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	63 e0       	ldi	r22, 0x03	; 3
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd);                                      //PORTA_REG= (PORTA_REG & 0x0f) | ((Cmnd & 0xf0) <<4)
    107c:	8c 2f       	mov	r24, r28
    107e:	0e 94 dd 07 	call	0xfba	; 0xfba <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	63 e0       	ldi	r22, 0x03	; 3
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
    108c:	8f e9       	ldi	r24, 0x9F	; 159
    108e:	9f e0       	ldi	r25, 0x0F	; 15
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <LCD_sendComnd+0x56>
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <LCD_sendComnd+0x5c>
    1096:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	63 e0       	ldi	r22, 0x03	; 3
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <LCD_init>:

void LCD_init(void)
{
	#if   LCD_MODE == LCD_FourBitMode 
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	62 e0       	ldi	r22, 0x02	; 2
    10b4:	41 e0       	ldi	r20, 0x01	; 1
    10b6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	63 e0       	ldi	r22, 0x03	; 3
    10be:	41 e0       	ldi	r20, 0x01	; 1
    10c0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	
	
	DIO_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	64 e0       	ldi	r22, 0x04	; 4
    10c8:	41 e0       	ldi	r20, 0x01	; 1
    10ca:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	65 e0       	ldi	r22, 0x05	; 5
    10d2:	41 e0       	ldi	r20, 0x01	; 1
    10d4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	66 e0       	ldi	r22, 0x06	; 6
    10dc:	41 e0       	ldi	r20, 0x01	; 1
    10de:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    10e2:	83 e0       	ldi	r24, 0x03	; 3
    10e4:	67 e0       	ldi	r22, 0x07	; 7
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <DIO_SetPinDirection>
    10ec:	8f e7       	ldi	r24, 0x7F	; 127
    10ee:	95 eb       	ldi	r25, 0xB5	; 181
    10f0:	a1 e0       	ldi	r26, 0x01	; 1
    10f2:	81 50       	subi	r24, 0x01	; 1
    10f4:	90 40       	sbci	r25, 0x00	; 0
    10f6:	a0 40       	sbci	r26, 0x00	; 0
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <LCD_init+0x4c>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <LCD_init+0x56>
    10fc:	00 00       	nop
	
	
	_delay_ms(35);
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	62 e0       	ldi	r22, 0x02	; 2
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	private_WriteHalfPort(LCD_COMMAND_FOR_FOUR_BIT_MODE);
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	0e 94 dd 07 	call	0xfba	; 0xfba <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	63 e0       	ldi	r22, 0x03	; 3
    111c:	41 e0       	ldi	r20, 0x01	; 1
    111e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
    1122:	af e9       	ldi	r26, 0x9F	; 159
    1124:	bf e0       	ldi	r27, 0x0F	; 15
    1126:	11 97       	sbiw	r26, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <LCD_init+0x80>
    112a:	00 c0       	rjmp	.+0      	; 0x112c <LCD_init+0x86>
    112c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	63 e0       	ldi	r22, 0x03	; 3
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	
	LCD_sendComnd(LCD_FUNCTION_SET);
    1138:	88 e2       	ldi	r24, 0x28	; 40
    113a:	0e 94 1d 08 	call	0x103a	; 0x103a <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    113e:	b0 ef       	ldi	r27, 0xF0	; 240
    1140:	ba 95       	dec	r27
    1142:	f1 f7       	brne	.-4      	; 0x1140 <LCD_init+0x9a>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DISPLAY_ON_OFF_CONTROL);
    1144:	8c e0       	ldi	r24, 0x0C	; 12
    1146:	0e 94 1d 08 	call	0x103a	; 0x103a <LCD_sendComnd>
    114a:	80 ef       	ldi	r24, 0xF0	; 240
    114c:	8a 95       	dec	r24
    114e:	f1 f7       	brne	.-4      	; 0x114c <LCD_init+0xa6>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DESPLAY_CLEAR);
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 1d 08 	call	0x103a	; 0x103a <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1156:	af e3       	ldi	r26, 0x3F	; 63
    1158:	bf e1       	ldi	r27, 0x1F	; 31
    115a:	11 97       	sbiw	r26, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <LCD_init+0xb4>
    115e:	00 c0       	rjmp	.+0      	; 0x1160 <LCD_init+0xba>
    1160:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
    1162:	86 e0       	ldi	r24, 0x06	; 6
    1164:	0e 94 1d 08 	call	0x103a	; 0x103a <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1168:	b0 ef       	ldi	r27, 0xF0	; 240
    116a:	ba 95       	dec	r27
    116c:	f1 f7       	brne	.-4      	; 0x116a <LCD_init+0xc4>
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
	_delay_us(45);
	
	#endif
}
    116e:	08 95       	ret

00001170 <LCD_sendChar>:
	
}


void LCD_sendChar(u8 Character_Data)
{
    1170:	cf 93       	push	r28
    1172:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	62 e0       	ldi	r22, 0x02	; 2
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data>>4);                        //PORTA_REG= (PORTA_REG & 0x0f) | (Character_Data & 0xf0)
    1188:	8c 2f       	mov	r24, r28
    118a:	82 95       	swap	r24
    118c:	8f 70       	andi	r24, 0x0F	; 15
    118e:	0e 94 dd 07 	call	0xfba	; 0xfba <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	63 e0       	ldi	r22, 0x03	; 3
    1196:	41 e0       	ldi	r20, 0x01	; 1
    1198:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    119c:	8f e9       	ldi	r24, 0x9F	; 159
    119e:	9f e0       	ldi	r25, 0x0F	; 15
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <LCD_sendChar+0x30>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <LCD_sendChar+0x36>
    11a6:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	63 e0       	ldi	r22, 0x03	; 3
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data);                         //PORTA_REG= (PORTA_REG & 0x0f) | ((Character_Data & 0xf0) <<4)
    11b2:	8c 2f       	mov	r24, r28
    11b4:	0e 94 dd 07 	call	0xfba	; 0xfba <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	63 e0       	ldi	r22, 0x03	; 3
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
    11c2:	8f e9       	ldi	r24, 0x9F	; 159
    11c4:	9f e0       	ldi	r25, 0x0F	; 15
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <LCD_sendChar+0x56>
    11ca:	00 c0       	rjmp	.+0      	; 0x11cc <LCD_sendChar+0x5c>
    11cc:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	63 e0       	ldi	r22, 0x03	; 3
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <LCD_SendString>:

void LCD_SendString (u8 *String_Data)
{
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	ec 01       	movw	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	while((*String_Data)!='\0')
    11e2:	88 81       	ld	r24, Y
    11e4:	88 23       	and	r24, r24
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <LCD_SendString+0x18>
	
	#endif
	
}

void LCD_SendString (u8 *String_Data)
    11e8:	21 96       	adiw	r28, 0x01	; 1
{
	#if   LCD_MODE == LCD_FourBitMode
	while((*String_Data)!='\0')
	{
		LCD_sendChar(*String_Data);
    11ea:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_sendChar>
}

void LCD_SendString (u8 *String_Data)
{
	#if   LCD_MODE == LCD_FourBitMode
	while((*String_Data)!='\0')
    11ee:	89 91       	ld	r24, Y+
    11f0:	88 23       	and	r24, r24
    11f2:	d9 f7       	brne	.-10     	; 0x11ea <LCD_SendString+0xe>
		LCD_sendChar(*String_Data);
		String_Data++;
	}
	#endif
	
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <LCD_ClearDesplay>:


void LCD_ClearDesplay()
{
	#if   LCD_MODE == LCD_FourBitMode
	LCD_sendComnd (LCD_DESPLAY_CLEAR);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	0e 94 1d 08 	call	0x103a	; 0x103a <LCD_sendComnd>
    1200:	8f e3       	ldi	r24, 0x3F	; 63
    1202:	9f e1       	ldi	r25, 0x1F	; 31
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <LCD_ClearDesplay+0xa>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <LCD_ClearDesplay+0x10>
    120a:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);
    120c:	80 e8       	ldi	r24, 0x80	; 128
    120e:	0e 94 1d 08 	call	0x103a	; 0x103a <LCD_sendComnd>
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);
	
	#endif
			
}
    1212:	08 95       	ret

00001214 <LCD_GoToLocation>:

void LCD_GoToLocation(u8 X_Location, u8 LineNumber)
{
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	00 d0       	rcall	.+0      	; 0x121a <LCD_GoToLocation+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <LCD_GoToLocation+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
	#if   LCD_MODE == LCD_FourBitMode
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
    1220:	90 e8       	ldi	r25, 0x80	; 128
    1222:	99 83       	std	Y+1, r25	; 0x01
    1224:	90 ec       	ldi	r25, 0xC0	; 192
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	94 e9       	ldi	r25, 0x94	; 148
    122a:	9b 83       	std	Y+3, r25	; 0x03
    122c:	94 ed       	ldi	r25, 0xD4	; 212
    122e:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
    1230:	81 50       	subi	r24, 0x01	; 1
    1232:	fe 01       	movw	r30, r28
    1234:	e6 0f       	add	r30, r22
    1236:	f1 1d       	adc	r31, r1
    1238:	90 81       	ld	r25, Z
    123a:	89 0f       	add	r24, r25
    123c:	0e 94 1d 08 	call	0x103a	; 0x103a <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1240:	8f e9       	ldi	r24, 0x9F	; 159
    1242:	9f e0       	ldi	r25, 0x0F	; 15
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <LCD_GoToLocation+0x30>
    1248:	00 c0       	rjmp	.+0      	; 0x124a <LCD_GoToLocation+0x36>
    124a:	00 00       	nop
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
	_delay_us(1000);
	
	#endif
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <LCD_SendIntegarNumber>:

void LCD_SendIntegarNumber(u16 IntegerNumber)
{
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	a0 97       	sbiw	r28, 0x20	; 32
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
	#if   LCD_MODE == LCD_FourBitMode
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);
    1272:	2d b7       	in	r18, 0x3d	; 61
    1274:	3e b7       	in	r19, 0x3e	; 62
    1276:	28 50       	subi	r18, 0x08	; 8
    1278:	30 40       	sbci	r19, 0x00	; 0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	3e bf       	out	0x3e, r19	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	2d bf       	out	0x3d, r18	; 61
    1284:	ed b7       	in	r30, 0x3d	; 61
    1286:	fe b7       	in	r31, 0x3e	; 62
    1288:	31 96       	adiw	r30, 0x01	; 1
    128a:	8e 01       	movw	r16, r28
    128c:	0f 5f       	subi	r16, 0xFF	; 255
    128e:	1f 4f       	sbci	r17, 0xFF	; 255
    1290:	ad b7       	in	r26, 0x3d	; 61
    1292:	be b7       	in	r27, 0x3e	; 62
    1294:	12 96       	adiw	r26, 0x02	; 2
    1296:	1c 93       	st	X, r17
    1298:	0e 93       	st	-X, r16
    129a:	11 97       	sbiw	r26, 0x01	; 1
    129c:	21 e1       	ldi	r18, 0x11	; 17
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	33 83       	std	Z+3, r19	; 0x03
    12a2:	22 83       	std	Z+2, r18	; 0x02
    12a4:	2b e9       	ldi	r18, 0x9B	; 155
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	35 83       	std	Z+5, r19	; 0x05
    12aa:	24 83       	std	Z+4, r18	; 0x04
    12ac:	97 83       	std	Z+7, r25	; 0x07
    12ae:	86 83       	std	Z+6, r24	; 0x06
    12b0:	0e 94 0a 0a 	call	0x1414	; 0x1414 <snprintf>
	LCD_SendString(NumberString);
    12b4:	2d b7       	in	r18, 0x3d	; 61
    12b6:	3e b7       	in	r19, 0x3e	; 62
    12b8:	28 5f       	subi	r18, 0xF8	; 248
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	3e bf       	out	0x3e, r19	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	2d bf       	out	0x3d, r18	; 61
    12c6:	c8 01       	movw	r24, r16
    12c8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_SendString>
	snprintf(NumberString,17,"%d",IntegerNumber);
	LCD_SendString(NumberString);
	
	#endif
	
}
    12cc:	a0 96       	adiw	r28, 0x20	; 32
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <LCD_SendNumberToLocation>:


void LCD_SendNumberToLocation(u16 Number,u8 X_Location, u8 LineNumber)
{
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	ec 01       	movw	r28, r24
    12e8:	86 2f       	mov	r24, r22
	#if   LCD_MODE == LCD_FourBitMode
	LCD_GoToLocation(X_Location,LineNumber);
    12ea:	64 2f       	mov	r22, r20
    12ec:	0e 94 0a 09 	call	0x1214	; 0x1214 <LCD_GoToLocation>
	LCD_SendIntegarNumber(Number);
    12f0:	ce 01       	movw	r24, r28
    12f2:	0e 94 2d 09 	call	0x125a	; 0x125a <LCD_SendIntegarNumber>
	LCD_GoToLocation(X_Location,LineNumber);
	LCD_SendIntegarNumber(Number);
	
	#endif
	
}
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <LCD_SendFloatNumber>:

void LCD_SendFloatNumber(f32 FloatNumber)
{
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	a0 97       	sbiw	r28, 0x20	; 32
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
	#if   LCD_MODE == LCD_FourBitMode
	u16 NumberString[16];
	snprintf(NumberString,17,"%f",FloatNumber);
    1318:	2d b7       	in	r18, 0x3d	; 61
    131a:	3e b7       	in	r19, 0x3e	; 62
    131c:	2a 50       	subi	r18, 0x0A	; 10
    131e:	30 40       	sbci	r19, 0x00	; 0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	3e bf       	out	0x3e, r19	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	2d bf       	out	0x3d, r18	; 61
    132a:	4d b7       	in	r20, 0x3d	; 61
    132c:	5e b7       	in	r21, 0x3e	; 62
    132e:	4f 5f       	subi	r20, 0xFF	; 255
    1330:	5f 4f       	sbci	r21, 0xFF	; 255
    1332:	8e 01       	movw	r16, r28
    1334:	0f 5f       	subi	r16, 0xFF	; 255
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	ed b7       	in	r30, 0x3d	; 61
    133a:	fe b7       	in	r31, 0x3e	; 62
    133c:	12 83       	std	Z+2, r17	; 0x02
    133e:	01 83       	std	Z+1, r16	; 0x01
    1340:	21 e1       	ldi	r18, 0x11	; 17
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	fa 01       	movw	r30, r20
    1346:	33 83       	std	Z+3, r19	; 0x03
    1348:	22 83       	std	Z+2, r18	; 0x02
    134a:	2e e9       	ldi	r18, 0x9E	; 158
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	35 83       	std	Z+5, r19	; 0x05
    1350:	24 83       	std	Z+4, r18	; 0x04
    1352:	86 83       	std	Z+6, r24	; 0x06
    1354:	97 83       	std	Z+7, r25	; 0x07
    1356:	a0 87       	std	Z+8, r26	; 0x08
    1358:	b1 87       	std	Z+9, r27	; 0x09
    135a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <snprintf>
	LCD_SendString(NumberString);
    135e:	2d b7       	in	r18, 0x3d	; 61
    1360:	3e b7       	in	r19, 0x3e	; 62
    1362:	26 5f       	subi	r18, 0xF6	; 246
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	3e bf       	out	0x3e, r19	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	2d bf       	out	0x3d, r18	; 61
    1370:	c8 01       	movw	r24, r16
    1372:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_SendString>
	snprintf(NumberString,17,"%f",FloatNumber);
	LCD_SendString(NumberString);
	
	#endif
	
}
    1376:	a0 96       	adiw	r28, 0x20	; 32
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <LCD_Shift>:

void LCD_Shift(u8 ShiftCmnd)
{
	#if   LCD_MODE == LCD_FourBitMode
	LCD_sendComnd(ShiftCmnd);
    138c:	0e 94 1d 08 	call	0x103a	; 0x103a <LCD_sendComnd>
	
	#elif LCD_MODE == LCD_EightBitMode
	LCD_sendComnd(ShiftCmnd);
	
	#endif
}
    1390:	08 95       	ret

00001392 <__mulsi3>:
    1392:	62 9f       	mul	r22, r18
    1394:	d0 01       	movw	r26, r0
    1396:	73 9f       	mul	r23, r19
    1398:	f0 01       	movw	r30, r0
    139a:	82 9f       	mul	r24, r18
    139c:	e0 0d       	add	r30, r0
    139e:	f1 1d       	adc	r31, r1
    13a0:	64 9f       	mul	r22, r20
    13a2:	e0 0d       	add	r30, r0
    13a4:	f1 1d       	adc	r31, r1
    13a6:	92 9f       	mul	r25, r18
    13a8:	f0 0d       	add	r31, r0
    13aa:	83 9f       	mul	r24, r19
    13ac:	f0 0d       	add	r31, r0
    13ae:	74 9f       	mul	r23, r20
    13b0:	f0 0d       	add	r31, r0
    13b2:	65 9f       	mul	r22, r21
    13b4:	f0 0d       	add	r31, r0
    13b6:	99 27       	eor	r25, r25
    13b8:	72 9f       	mul	r23, r18
    13ba:	b0 0d       	add	r27, r0
    13bc:	e1 1d       	adc	r30, r1
    13be:	f9 1f       	adc	r31, r25
    13c0:	63 9f       	mul	r22, r19
    13c2:	b0 0d       	add	r27, r0
    13c4:	e1 1d       	adc	r30, r1
    13c6:	f9 1f       	adc	r31, r25
    13c8:	bd 01       	movw	r22, r26
    13ca:	cf 01       	movw	r24, r30
    13cc:	11 24       	eor	r1, r1
    13ce:	08 95       	ret

000013d0 <__udivmodsi4>:
    13d0:	a1 e2       	ldi	r26, 0x21	; 33
    13d2:	1a 2e       	mov	r1, r26
    13d4:	aa 1b       	sub	r26, r26
    13d6:	bb 1b       	sub	r27, r27
    13d8:	fd 01       	movw	r30, r26
    13da:	0d c0       	rjmp	.+26     	; 0x13f6 <__udivmodsi4_ep>

000013dc <__udivmodsi4_loop>:
    13dc:	aa 1f       	adc	r26, r26
    13de:	bb 1f       	adc	r27, r27
    13e0:	ee 1f       	adc	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	a2 17       	cp	r26, r18
    13e6:	b3 07       	cpc	r27, r19
    13e8:	e4 07       	cpc	r30, r20
    13ea:	f5 07       	cpc	r31, r21
    13ec:	20 f0       	brcs	.+8      	; 0x13f6 <__udivmodsi4_ep>
    13ee:	a2 1b       	sub	r26, r18
    13f0:	b3 0b       	sbc	r27, r19
    13f2:	e4 0b       	sbc	r30, r20
    13f4:	f5 0b       	sbc	r31, r21

000013f6 <__udivmodsi4_ep>:
    13f6:	66 1f       	adc	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	88 1f       	adc	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	1a 94       	dec	r1
    1400:	69 f7       	brne	.-38     	; 0x13dc <__udivmodsi4_loop>
    1402:	60 95       	com	r22
    1404:	70 95       	com	r23
    1406:	80 95       	com	r24
    1408:	90 95       	com	r25
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	bd 01       	movw	r22, r26
    1410:	cf 01       	movw	r24, r30
    1412:	08 95       	ret

00001414 <snprintf>:
    1414:	ae e0       	ldi	r26, 0x0E	; 14
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e0 e1       	ldi	r30, 0x10	; 16
    141a:	fa e0       	ldi	r31, 0x0A	; 10
    141c:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__prologue_saves__+0x1c>
    1420:	0d 89       	ldd	r16, Y+21	; 0x15
    1422:	1e 89       	ldd	r17, Y+22	; 0x16
    1424:	8f 89       	ldd	r24, Y+23	; 0x17
    1426:	98 8d       	ldd	r25, Y+24	; 0x18
    1428:	26 e0       	ldi	r18, 0x06	; 6
    142a:	2c 83       	std	Y+4, r18	; 0x04
    142c:	1a 83       	std	Y+2, r17	; 0x02
    142e:	09 83       	std	Y+1, r16	; 0x01
    1430:	97 ff       	sbrs	r25, 7
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <snprintf+0x24>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e8       	ldi	r25, 0x80	; 128
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	ae 01       	movw	r20, r28
    1440:	45 5e       	subi	r20, 0xE5	; 229
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	ce 01       	movw	r24, r28
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	69 8d       	ldd	r22, Y+25	; 0x19
    144a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    144c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <vfprintf>
    1450:	4d 81       	ldd	r20, Y+5	; 0x05
    1452:	5e 81       	ldd	r21, Y+6	; 0x06
    1454:	57 fd       	sbrc	r21, 7
    1456:	0a c0       	rjmp	.+20     	; 0x146c <snprintf+0x58>
    1458:	2f 81       	ldd	r18, Y+7	; 0x07
    145a:	38 85       	ldd	r19, Y+8	; 0x08
    145c:	42 17       	cp	r20, r18
    145e:	53 07       	cpc	r21, r19
    1460:	0c f4       	brge	.+2      	; 0x1464 <snprintf+0x50>
    1462:	9a 01       	movw	r18, r20
    1464:	02 0f       	add	r16, r18
    1466:	13 1f       	adc	r17, r19
    1468:	f8 01       	movw	r30, r16
    146a:	10 82       	st	Z, r1
    146c:	2e 96       	adiw	r28, 0x0e	; 14
    146e:	e4 e0       	ldi	r30, 0x04	; 4
    1470:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__epilogue_restores__+0x1c>

00001474 <vfprintf>:
    1474:	ad e0       	ldi	r26, 0x0D	; 13
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e0 e4       	ldi	r30, 0x40	; 64
    147a:	fa e0       	ldi	r31, 0x0A	; 10
    147c:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__prologue_saves__>
    1480:	3c 01       	movw	r6, r24
    1482:	7d 87       	std	Y+13, r23	; 0x0d
    1484:	6c 87       	std	Y+12, r22	; 0x0c
    1486:	5a 01       	movw	r10, r20
    1488:	fc 01       	movw	r30, r24
    148a:	17 82       	std	Z+7, r1	; 0x07
    148c:	16 82       	std	Z+6, r1	; 0x06
    148e:	83 81       	ldd	r24, Z+3	; 0x03
    1490:	81 ff       	sbrs	r24, 1
    1492:	c8 c1       	rjmp	.+912    	; 0x1824 <vfprintf+0x3b0>
    1494:	2e 01       	movw	r4, r28
    1496:	08 94       	sec
    1498:	41 1c       	adc	r4, r1
    149a:	51 1c       	adc	r5, r1
    149c:	f3 01       	movw	r30, r6
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    14a2:	fd 85       	ldd	r31, Y+13	; 0x0d
    14a4:	93 fd       	sbrc	r25, 3
    14a6:	85 91       	lpm	r24, Z+
    14a8:	93 ff       	sbrs	r25, 3
    14aa:	81 91       	ld	r24, Z+
    14ac:	fd 87       	std	Y+13, r31	; 0x0d
    14ae:	ec 87       	std	Y+12, r30	; 0x0c
    14b0:	88 23       	and	r24, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <vfprintf+0x42>
    14b4:	b3 c1       	rjmp	.+870    	; 0x181c <vfprintf+0x3a8>
    14b6:	85 32       	cpi	r24, 0x25	; 37
    14b8:	41 f4       	brne	.+16     	; 0x14ca <vfprintf+0x56>
    14ba:	93 fd       	sbrc	r25, 3
    14bc:	85 91       	lpm	r24, Z+
    14be:	93 ff       	sbrs	r25, 3
    14c0:	81 91       	ld	r24, Z+
    14c2:	fd 87       	std	Y+13, r31	; 0x0d
    14c4:	ec 87       	std	Y+12, r30	; 0x0c
    14c6:	85 32       	cpi	r24, 0x25	; 37
    14c8:	29 f4       	brne	.+10     	; 0x14d4 <vfprintf+0x60>
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	b3 01       	movw	r22, r6
    14ce:	0e 94 2e 0c 	call	0x185c	; 0x185c <fputc>
    14d2:	e4 cf       	rjmp	.-56     	; 0x149c <vfprintf+0x28>
    14d4:	ff 24       	eor	r15, r15
    14d6:	ee 24       	eor	r14, r14
    14d8:	10 e0       	ldi	r17, 0x00	; 0
    14da:	10 32       	cpi	r17, 0x20	; 32
    14dc:	b0 f4       	brcc	.+44     	; 0x150a <vfprintf+0x96>
    14de:	8b 32       	cpi	r24, 0x2B	; 43
    14e0:	69 f0       	breq	.+26     	; 0x14fc <vfprintf+0x88>
    14e2:	8c 32       	cpi	r24, 0x2C	; 44
    14e4:	28 f4       	brcc	.+10     	; 0x14f0 <vfprintf+0x7c>
    14e6:	80 32       	cpi	r24, 0x20	; 32
    14e8:	51 f0       	breq	.+20     	; 0x14fe <vfprintf+0x8a>
    14ea:	83 32       	cpi	r24, 0x23	; 35
    14ec:	71 f4       	brne	.+28     	; 0x150a <vfprintf+0x96>
    14ee:	0b c0       	rjmp	.+22     	; 0x1506 <vfprintf+0x92>
    14f0:	8d 32       	cpi	r24, 0x2D	; 45
    14f2:	39 f0       	breq	.+14     	; 0x1502 <vfprintf+0x8e>
    14f4:	80 33       	cpi	r24, 0x30	; 48
    14f6:	49 f4       	brne	.+18     	; 0x150a <vfprintf+0x96>
    14f8:	11 60       	ori	r17, 0x01	; 1
    14fa:	2c c0       	rjmp	.+88     	; 0x1554 <vfprintf+0xe0>
    14fc:	12 60       	ori	r17, 0x02	; 2
    14fe:	14 60       	ori	r17, 0x04	; 4
    1500:	29 c0       	rjmp	.+82     	; 0x1554 <vfprintf+0xe0>
    1502:	18 60       	ori	r17, 0x08	; 8
    1504:	27 c0       	rjmp	.+78     	; 0x1554 <vfprintf+0xe0>
    1506:	10 61       	ori	r17, 0x10	; 16
    1508:	25 c0       	rjmp	.+74     	; 0x1554 <vfprintf+0xe0>
    150a:	17 fd       	sbrc	r17, 7
    150c:	2e c0       	rjmp	.+92     	; 0x156a <vfprintf+0xf6>
    150e:	28 2f       	mov	r18, r24
    1510:	20 53       	subi	r18, 0x30	; 48
    1512:	2a 30       	cpi	r18, 0x0A	; 10
    1514:	98 f4       	brcc	.+38     	; 0x153c <vfprintf+0xc8>
    1516:	16 ff       	sbrs	r17, 6
    1518:	08 c0       	rjmp	.+16     	; 0x152a <vfprintf+0xb6>
    151a:	8f 2d       	mov	r24, r15
    151c:	88 0f       	add	r24, r24
    151e:	f8 2e       	mov	r15, r24
    1520:	ff 0c       	add	r15, r15
    1522:	ff 0c       	add	r15, r15
    1524:	f8 0e       	add	r15, r24
    1526:	f2 0e       	add	r15, r18
    1528:	15 c0       	rjmp	.+42     	; 0x1554 <vfprintf+0xe0>
    152a:	8e 2d       	mov	r24, r14
    152c:	88 0f       	add	r24, r24
    152e:	e8 2e       	mov	r14, r24
    1530:	ee 0c       	add	r14, r14
    1532:	ee 0c       	add	r14, r14
    1534:	e8 0e       	add	r14, r24
    1536:	e2 0e       	add	r14, r18
    1538:	10 62       	ori	r17, 0x20	; 32
    153a:	0c c0       	rjmp	.+24     	; 0x1554 <vfprintf+0xe0>
    153c:	8e 32       	cpi	r24, 0x2E	; 46
    153e:	21 f4       	brne	.+8      	; 0x1548 <vfprintf+0xd4>
    1540:	16 fd       	sbrc	r17, 6
    1542:	6c c1       	rjmp	.+728    	; 0x181c <vfprintf+0x3a8>
    1544:	10 64       	ori	r17, 0x40	; 64
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <vfprintf+0xe0>
    1548:	8c 36       	cpi	r24, 0x6C	; 108
    154a:	11 f4       	brne	.+4      	; 0x1550 <vfprintf+0xdc>
    154c:	10 68       	ori	r17, 0x80	; 128
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <vfprintf+0xe0>
    1550:	88 36       	cpi	r24, 0x68	; 104
    1552:	59 f4       	brne	.+22     	; 0x156a <vfprintf+0xf6>
    1554:	ec 85       	ldd	r30, Y+12	; 0x0c
    1556:	fd 85       	ldd	r31, Y+13	; 0x0d
    1558:	93 fd       	sbrc	r25, 3
    155a:	85 91       	lpm	r24, Z+
    155c:	93 ff       	sbrs	r25, 3
    155e:	81 91       	ld	r24, Z+
    1560:	fd 87       	std	Y+13, r31	; 0x0d
    1562:	ec 87       	std	Y+12, r30	; 0x0c
    1564:	88 23       	and	r24, r24
    1566:	09 f0       	breq	.+2      	; 0x156a <vfprintf+0xf6>
    1568:	b8 cf       	rjmp	.-144    	; 0x14da <vfprintf+0x66>
    156a:	98 2f       	mov	r25, r24
    156c:	95 54       	subi	r25, 0x45	; 69
    156e:	93 30       	cpi	r25, 0x03	; 3
    1570:	18 f0       	brcs	.+6      	; 0x1578 <vfprintf+0x104>
    1572:	90 52       	subi	r25, 0x20	; 32
    1574:	93 30       	cpi	r25, 0x03	; 3
    1576:	38 f4       	brcc	.+14     	; 0x1586 <vfprintf+0x112>
    1578:	24 e0       	ldi	r18, 0x04	; 4
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	a2 0e       	add	r10, r18
    157e:	b3 1e       	adc	r11, r19
    1580:	3f e3       	ldi	r19, 0x3F	; 63
    1582:	39 83       	std	Y+1, r19	; 0x01
    1584:	0f c0       	rjmp	.+30     	; 0x15a4 <vfprintf+0x130>
    1586:	83 36       	cpi	r24, 0x63	; 99
    1588:	31 f0       	breq	.+12     	; 0x1596 <vfprintf+0x122>
    158a:	83 37       	cpi	r24, 0x73	; 115
    158c:	81 f0       	breq	.+32     	; 0x15ae <vfprintf+0x13a>
    158e:	83 35       	cpi	r24, 0x53	; 83
    1590:	09 f0       	breq	.+2      	; 0x1594 <vfprintf+0x120>
    1592:	5a c0       	rjmp	.+180    	; 0x1648 <vfprintf+0x1d4>
    1594:	22 c0       	rjmp	.+68     	; 0x15da <vfprintf+0x166>
    1596:	f5 01       	movw	r30, r10
    1598:	80 81       	ld	r24, Z
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	22 e0       	ldi	r18, 0x02	; 2
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	a2 0e       	add	r10, r18
    15a2:	b3 1e       	adc	r11, r19
    15a4:	21 e0       	ldi	r18, 0x01	; 1
    15a6:	c2 2e       	mov	r12, r18
    15a8:	d1 2c       	mov	r13, r1
    15aa:	42 01       	movw	r8, r4
    15ac:	14 c0       	rjmp	.+40     	; 0x15d6 <vfprintf+0x162>
    15ae:	92 e0       	ldi	r25, 0x02	; 2
    15b0:	29 2e       	mov	r2, r25
    15b2:	31 2c       	mov	r3, r1
    15b4:	2a 0c       	add	r2, r10
    15b6:	3b 1c       	adc	r3, r11
    15b8:	f5 01       	movw	r30, r10
    15ba:	80 80       	ld	r8, Z
    15bc:	91 80       	ldd	r9, Z+1	; 0x01
    15be:	16 ff       	sbrs	r17, 6
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <vfprintf+0x154>
    15c2:	6f 2d       	mov	r22, r15
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x158>
    15c8:	6f ef       	ldi	r22, 0xFF	; 255
    15ca:	7f ef       	ldi	r23, 0xFF	; 255
    15cc:	c4 01       	movw	r24, r8
    15ce:	0e 94 23 0c 	call	0x1846	; 0x1846 <strnlen>
    15d2:	6c 01       	movw	r12, r24
    15d4:	51 01       	movw	r10, r2
    15d6:	1f 77       	andi	r17, 0x7F	; 127
    15d8:	15 c0       	rjmp	.+42     	; 0x1604 <vfprintf+0x190>
    15da:	82 e0       	ldi	r24, 0x02	; 2
    15dc:	28 2e       	mov	r2, r24
    15de:	31 2c       	mov	r3, r1
    15e0:	2a 0c       	add	r2, r10
    15e2:	3b 1c       	adc	r3, r11
    15e4:	f5 01       	movw	r30, r10
    15e6:	80 80       	ld	r8, Z
    15e8:	91 80       	ldd	r9, Z+1	; 0x01
    15ea:	16 ff       	sbrs	r17, 6
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <vfprintf+0x180>
    15ee:	6f 2d       	mov	r22, r15
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <vfprintf+0x184>
    15f4:	6f ef       	ldi	r22, 0xFF	; 255
    15f6:	7f ef       	ldi	r23, 0xFF	; 255
    15f8:	c4 01       	movw	r24, r8
    15fa:	0e 94 18 0c 	call	0x1830	; 0x1830 <strnlen_P>
    15fe:	6c 01       	movw	r12, r24
    1600:	10 68       	ori	r17, 0x80	; 128
    1602:	51 01       	movw	r10, r2
    1604:	13 fd       	sbrc	r17, 3
    1606:	1c c0       	rjmp	.+56     	; 0x1640 <vfprintf+0x1cc>
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <vfprintf+0x1a2>
    160a:	80 e2       	ldi	r24, 0x20	; 32
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	b3 01       	movw	r22, r6
    1610:	0e 94 2e 0c 	call	0x185c	; 0x185c <fputc>
    1614:	ea 94       	dec	r14
    1616:	8e 2d       	mov	r24, r14
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	c8 16       	cp	r12, r24
    161c:	d9 06       	cpc	r13, r25
    161e:	a8 f3       	brcs	.-22     	; 0x160a <vfprintf+0x196>
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <vfprintf+0x1cc>
    1622:	f4 01       	movw	r30, r8
    1624:	17 fd       	sbrc	r17, 7
    1626:	85 91       	lpm	r24, Z+
    1628:	17 ff       	sbrs	r17, 7
    162a:	81 91       	ld	r24, Z+
    162c:	4f 01       	movw	r8, r30
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	b3 01       	movw	r22, r6
    1632:	0e 94 2e 0c 	call	0x185c	; 0x185c <fputc>
    1636:	e1 10       	cpse	r14, r1
    1638:	ea 94       	dec	r14
    163a:	08 94       	sec
    163c:	c1 08       	sbc	r12, r1
    163e:	d1 08       	sbc	r13, r1
    1640:	c1 14       	cp	r12, r1
    1642:	d1 04       	cpc	r13, r1
    1644:	71 f7       	brne	.-36     	; 0x1622 <vfprintf+0x1ae>
    1646:	e7 c0       	rjmp	.+462    	; 0x1816 <vfprintf+0x3a2>
    1648:	84 36       	cpi	r24, 0x64	; 100
    164a:	11 f0       	breq	.+4      	; 0x1650 <vfprintf+0x1dc>
    164c:	89 36       	cpi	r24, 0x69	; 105
    164e:	51 f5       	brne	.+84     	; 0x16a4 <vfprintf+0x230>
    1650:	f5 01       	movw	r30, r10
    1652:	17 ff       	sbrs	r17, 7
    1654:	07 c0       	rjmp	.+14     	; 0x1664 <vfprintf+0x1f0>
    1656:	80 81       	ld	r24, Z
    1658:	91 81       	ldd	r25, Z+1	; 0x01
    165a:	a2 81       	ldd	r26, Z+2	; 0x02
    165c:	b3 81       	ldd	r27, Z+3	; 0x03
    165e:	24 e0       	ldi	r18, 0x04	; 4
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	08 c0       	rjmp	.+16     	; 0x1674 <vfprintf+0x200>
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	aa 27       	eor	r26, r26
    166a:	97 fd       	sbrc	r25, 7
    166c:	a0 95       	com	r26
    166e:	ba 2f       	mov	r27, r26
    1670:	22 e0       	ldi	r18, 0x02	; 2
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	a2 0e       	add	r10, r18
    1676:	b3 1e       	adc	r11, r19
    1678:	01 2f       	mov	r16, r17
    167a:	0f 76       	andi	r16, 0x6F	; 111
    167c:	b7 ff       	sbrs	r27, 7
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <vfprintf+0x21c>
    1680:	b0 95       	com	r27
    1682:	a0 95       	com	r26
    1684:	90 95       	com	r25
    1686:	81 95       	neg	r24
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	af 4f       	sbci	r26, 0xFF	; 255
    168c:	bf 4f       	sbci	r27, 0xFF	; 255
    168e:	00 68       	ori	r16, 0x80	; 128
    1690:	bc 01       	movw	r22, r24
    1692:	cd 01       	movw	r24, r26
    1694:	a2 01       	movw	r20, r4
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__ultoa_invert>
    169e:	d8 2e       	mov	r13, r24
    16a0:	d4 18       	sub	r13, r4
    16a2:	3f c0       	rjmp	.+126    	; 0x1722 <vfprintf+0x2ae>
    16a4:	85 37       	cpi	r24, 0x75	; 117
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <vfprintf+0x23c>
    16a8:	1f 7e       	andi	r17, 0xEF	; 239
    16aa:	2a e0       	ldi	r18, 0x0A	; 10
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	20 c0       	rjmp	.+64     	; 0x16f0 <vfprintf+0x27c>
    16b0:	19 7f       	andi	r17, 0xF9	; 249
    16b2:	8f 36       	cpi	r24, 0x6F	; 111
    16b4:	a9 f0       	breq	.+42     	; 0x16e0 <vfprintf+0x26c>
    16b6:	80 37       	cpi	r24, 0x70	; 112
    16b8:	20 f4       	brcc	.+8      	; 0x16c2 <vfprintf+0x24e>
    16ba:	88 35       	cpi	r24, 0x58	; 88
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <vfprintf+0x24c>
    16be:	ae c0       	rjmp	.+348    	; 0x181c <vfprintf+0x3a8>
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <vfprintf+0x264>
    16c2:	80 37       	cpi	r24, 0x70	; 112
    16c4:	21 f0       	breq	.+8      	; 0x16ce <vfprintf+0x25a>
    16c6:	88 37       	cpi	r24, 0x78	; 120
    16c8:	09 f0       	breq	.+2      	; 0x16cc <vfprintf+0x258>
    16ca:	a8 c0       	rjmp	.+336    	; 0x181c <vfprintf+0x3a8>
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <vfprintf+0x25c>
    16ce:	10 61       	ori	r17, 0x10	; 16
    16d0:	14 ff       	sbrs	r17, 4
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <vfprintf+0x272>
    16d4:	14 60       	ori	r17, 0x04	; 4
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <vfprintf+0x272>
    16d8:	14 ff       	sbrs	r17, 4
    16da:	08 c0       	rjmp	.+16     	; 0x16ec <vfprintf+0x278>
    16dc:	16 60       	ori	r17, 0x06	; 6
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <vfprintf+0x278>
    16e0:	28 e0       	ldi	r18, 0x08	; 8
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	05 c0       	rjmp	.+10     	; 0x16f0 <vfprintf+0x27c>
    16e6:	20 e1       	ldi	r18, 0x10	; 16
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <vfprintf+0x27c>
    16ec:	20 e1       	ldi	r18, 0x10	; 16
    16ee:	32 e0       	ldi	r19, 0x02	; 2
    16f0:	f5 01       	movw	r30, r10
    16f2:	17 ff       	sbrs	r17, 7
    16f4:	07 c0       	rjmp	.+14     	; 0x1704 <vfprintf+0x290>
    16f6:	60 81       	ld	r22, Z
    16f8:	71 81       	ldd	r23, Z+1	; 0x01
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	44 e0       	ldi	r20, 0x04	; 4
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	06 c0       	rjmp	.+12     	; 0x1710 <vfprintf+0x29c>
    1704:	60 81       	ld	r22, Z
    1706:	71 81       	ldd	r23, Z+1	; 0x01
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	42 e0       	ldi	r20, 0x02	; 2
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	a4 0e       	add	r10, r20
    1712:	b5 1e       	adc	r11, r21
    1714:	a2 01       	movw	r20, r4
    1716:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__ultoa_invert>
    171a:	d8 2e       	mov	r13, r24
    171c:	d4 18       	sub	r13, r4
    171e:	01 2f       	mov	r16, r17
    1720:	0f 77       	andi	r16, 0x7F	; 127
    1722:	06 ff       	sbrs	r16, 6
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <vfprintf+0x2c4>
    1726:	0e 7f       	andi	r16, 0xFE	; 254
    1728:	df 14       	cp	r13, r15
    172a:	30 f4       	brcc	.+12     	; 0x1738 <vfprintf+0x2c4>
    172c:	04 ff       	sbrs	r16, 4
    172e:	06 c0       	rjmp	.+12     	; 0x173c <vfprintf+0x2c8>
    1730:	02 fd       	sbrc	r16, 2
    1732:	04 c0       	rjmp	.+8      	; 0x173c <vfprintf+0x2c8>
    1734:	0f 7e       	andi	r16, 0xEF	; 239
    1736:	02 c0       	rjmp	.+4      	; 0x173c <vfprintf+0x2c8>
    1738:	1d 2d       	mov	r17, r13
    173a:	01 c0       	rjmp	.+2      	; 0x173e <vfprintf+0x2ca>
    173c:	1f 2d       	mov	r17, r15
    173e:	80 2f       	mov	r24, r16
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	04 ff       	sbrs	r16, 4
    1744:	0c c0       	rjmp	.+24     	; 0x175e <vfprintf+0x2ea>
    1746:	fe 01       	movw	r30, r28
    1748:	ed 0d       	add	r30, r13
    174a:	f1 1d       	adc	r31, r1
    174c:	20 81       	ld	r18, Z
    174e:	20 33       	cpi	r18, 0x30	; 48
    1750:	11 f4       	brne	.+4      	; 0x1756 <vfprintf+0x2e2>
    1752:	09 7e       	andi	r16, 0xE9	; 233
    1754:	09 c0       	rjmp	.+18     	; 0x1768 <vfprintf+0x2f4>
    1756:	02 ff       	sbrs	r16, 2
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <vfprintf+0x2f2>
    175a:	1e 5f       	subi	r17, 0xFE	; 254
    175c:	05 c0       	rjmp	.+10     	; 0x1768 <vfprintf+0x2f4>
    175e:	86 78       	andi	r24, 0x86	; 134
    1760:	90 70       	andi	r25, 0x00	; 0
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	09 f0       	breq	.+2      	; 0x1768 <vfprintf+0x2f4>
    1766:	1f 5f       	subi	r17, 0xFF	; 255
    1768:	80 2e       	mov	r8, r16
    176a:	99 24       	eor	r9, r9
    176c:	03 fd       	sbrc	r16, 3
    176e:	12 c0       	rjmp	.+36     	; 0x1794 <vfprintf+0x320>
    1770:	00 ff       	sbrs	r16, 0
    1772:	0d c0       	rjmp	.+26     	; 0x178e <vfprintf+0x31a>
    1774:	fd 2c       	mov	r15, r13
    1776:	1e 15       	cp	r17, r14
    1778:	50 f4       	brcc	.+20     	; 0x178e <vfprintf+0x31a>
    177a:	fe 0c       	add	r15, r14
    177c:	f1 1a       	sub	r15, r17
    177e:	1e 2d       	mov	r17, r14
    1780:	06 c0       	rjmp	.+12     	; 0x178e <vfprintf+0x31a>
    1782:	80 e2       	ldi	r24, 0x20	; 32
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	b3 01       	movw	r22, r6
    1788:	0e 94 2e 0c 	call	0x185c	; 0x185c <fputc>
    178c:	1f 5f       	subi	r17, 0xFF	; 255
    178e:	1e 15       	cp	r17, r14
    1790:	c0 f3       	brcs	.-16     	; 0x1782 <vfprintf+0x30e>
    1792:	04 c0       	rjmp	.+8      	; 0x179c <vfprintf+0x328>
    1794:	1e 15       	cp	r17, r14
    1796:	10 f4       	brcc	.+4      	; 0x179c <vfprintf+0x328>
    1798:	e1 1a       	sub	r14, r17
    179a:	01 c0       	rjmp	.+2      	; 0x179e <vfprintf+0x32a>
    179c:	ee 24       	eor	r14, r14
    179e:	84 fe       	sbrs	r8, 4
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <vfprintf+0x34c>
    17a2:	80 e3       	ldi	r24, 0x30	; 48
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	b3 01       	movw	r22, r6
    17a8:	0e 94 2e 0c 	call	0x185c	; 0x185c <fputc>
    17ac:	82 fe       	sbrs	r8, 2
    17ae:	1f c0       	rjmp	.+62     	; 0x17ee <vfprintf+0x37a>
    17b0:	81 fe       	sbrs	r8, 1
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <vfprintf+0x346>
    17b4:	88 e5       	ldi	r24, 0x58	; 88
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	10 c0       	rjmp	.+32     	; 0x17da <vfprintf+0x366>
    17ba:	88 e7       	ldi	r24, 0x78	; 120
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0d c0       	rjmp	.+26     	; 0x17da <vfprintf+0x366>
    17c0:	c4 01       	movw	r24, r8
    17c2:	86 78       	andi	r24, 0x86	; 134
    17c4:	90 70       	andi	r25, 0x00	; 0
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	91 f0       	breq	.+36     	; 0x17ee <vfprintf+0x37a>
    17ca:	81 fc       	sbrc	r8, 1
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <vfprintf+0x35e>
    17ce:	80 e2       	ldi	r24, 0x20	; 32
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <vfprintf+0x360>
    17d2:	8b e2       	ldi	r24, 0x2B	; 43
    17d4:	07 fd       	sbrc	r16, 7
    17d6:	8d e2       	ldi	r24, 0x2D	; 45
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	b3 01       	movw	r22, r6
    17dc:	0e 94 2e 0c 	call	0x185c	; 0x185c <fputc>
    17e0:	06 c0       	rjmp	.+12     	; 0x17ee <vfprintf+0x37a>
    17e2:	80 e3       	ldi	r24, 0x30	; 48
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	b3 01       	movw	r22, r6
    17e8:	0e 94 2e 0c 	call	0x185c	; 0x185c <fputc>
    17ec:	fa 94       	dec	r15
    17ee:	df 14       	cp	r13, r15
    17f0:	c0 f3       	brcs	.-16     	; 0x17e2 <vfprintf+0x36e>
    17f2:	da 94       	dec	r13
    17f4:	f2 01       	movw	r30, r4
    17f6:	ed 0d       	add	r30, r13
    17f8:	f1 1d       	adc	r31, r1
    17fa:	80 81       	ld	r24, Z
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	b3 01       	movw	r22, r6
    1800:	0e 94 2e 0c 	call	0x185c	; 0x185c <fputc>
    1804:	dd 20       	and	r13, r13
    1806:	a9 f7       	brne	.-22     	; 0x17f2 <vfprintf+0x37e>
    1808:	06 c0       	rjmp	.+12     	; 0x1816 <vfprintf+0x3a2>
    180a:	80 e2       	ldi	r24, 0x20	; 32
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	b3 01       	movw	r22, r6
    1810:	0e 94 2e 0c 	call	0x185c	; 0x185c <fputc>
    1814:	ea 94       	dec	r14
    1816:	ee 20       	and	r14, r14
    1818:	c1 f7       	brne	.-16     	; 0x180a <vfprintf+0x396>
    181a:	40 ce       	rjmp	.-896    	; 0x149c <vfprintf+0x28>
    181c:	f3 01       	movw	r30, r6
    181e:	86 81       	ldd	r24, Z+6	; 0x06
    1820:	97 81       	ldd	r25, Z+7	; 0x07
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vfprintf+0x3b4>
    1824:	8f ef       	ldi	r24, 0xFF	; 255
    1826:	9f ef       	ldi	r25, 0xFF	; 255
    1828:	2d 96       	adiw	r28, 0x0d	; 13
    182a:	e2 e1       	ldi	r30, 0x12	; 18
    182c:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__epilogue_restores__>

00001830 <strnlen_P>:
    1830:	fc 01       	movw	r30, r24
    1832:	05 90       	lpm	r0, Z+
    1834:	61 50       	subi	r22, 0x01	; 1
    1836:	70 40       	sbci	r23, 0x00	; 0
    1838:	01 10       	cpse	r0, r1
    183a:	d8 f7       	brcc	.-10     	; 0x1832 <strnlen_P+0x2>
    183c:	80 95       	com	r24
    183e:	90 95       	com	r25
    1840:	8e 0f       	add	r24, r30
    1842:	9f 1f       	adc	r25, r31
    1844:	08 95       	ret

00001846 <strnlen>:
    1846:	fc 01       	movw	r30, r24
    1848:	61 50       	subi	r22, 0x01	; 1
    184a:	70 40       	sbci	r23, 0x00	; 0
    184c:	01 90       	ld	r0, Z+
    184e:	01 10       	cpse	r0, r1
    1850:	d8 f7       	brcc	.-10     	; 0x1848 <strnlen+0x2>
    1852:	80 95       	com	r24
    1854:	90 95       	com	r25
    1856:	8e 0f       	add	r24, r30
    1858:	9f 1f       	adc	r25, r31
    185a:	08 95       	ret

0000185c <fputc>:
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	8c 01       	movw	r16, r24
    1866:	eb 01       	movw	r28, r22
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	81 ff       	sbrs	r24, 1
    186c:	1b c0       	rjmp	.+54     	; 0x18a4 <fputc+0x48>
    186e:	82 ff       	sbrs	r24, 2
    1870:	0d c0       	rjmp	.+26     	; 0x188c <fputc+0x30>
    1872:	2e 81       	ldd	r18, Y+6	; 0x06
    1874:	3f 81       	ldd	r19, Y+7	; 0x07
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	9d 81       	ldd	r25, Y+5	; 0x05
    187a:	28 17       	cp	r18, r24
    187c:	39 07       	cpc	r19, r25
    187e:	64 f4       	brge	.+24     	; 0x1898 <fputc+0x3c>
    1880:	e8 81       	ld	r30, Y
    1882:	f9 81       	ldd	r31, Y+1	; 0x01
    1884:	01 93       	st	Z+, r16
    1886:	f9 83       	std	Y+1, r31	; 0x01
    1888:	e8 83       	st	Y, r30
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <fputc+0x3c>
    188c:	e8 85       	ldd	r30, Y+8	; 0x08
    188e:	f9 85       	ldd	r31, Y+9	; 0x09
    1890:	80 2f       	mov	r24, r16
    1892:	09 95       	icall
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	31 f4       	brne	.+12     	; 0x18a4 <fputc+0x48>
    1898:	8e 81       	ldd	r24, Y+6	; 0x06
    189a:	9f 81       	ldd	r25, Y+7	; 0x07
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	9f 83       	std	Y+7, r25	; 0x07
    18a0:	8e 83       	std	Y+6, r24	; 0x06
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <fputc+0x4c>
    18a4:	0f ef       	ldi	r16, 0xFF	; 255
    18a6:	1f ef       	ldi	r17, 0xFF	; 255
    18a8:	c8 01       	movw	r24, r16
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	08 95       	ret

000018b4 <__ultoa_invert>:
    18b4:	fa 01       	movw	r30, r20
    18b6:	aa 27       	eor	r26, r26
    18b8:	28 30       	cpi	r18, 0x08	; 8
    18ba:	51 f1       	breq	.+84     	; 0x1910 <__ultoa_invert+0x5c>
    18bc:	20 31       	cpi	r18, 0x10	; 16
    18be:	81 f1       	breq	.+96     	; 0x1920 <__ultoa_invert+0x6c>
    18c0:	e8 94       	clt
    18c2:	6f 93       	push	r22
    18c4:	6e 7f       	andi	r22, 0xFE	; 254
    18c6:	6e 5f       	subi	r22, 0xFE	; 254
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	8f 4f       	sbci	r24, 0xFF	; 255
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	af 4f       	sbci	r26, 0xFF	; 255
    18d0:	b1 e0       	ldi	r27, 0x01	; 1
    18d2:	3e d0       	rcall	.+124    	; 0x1950 <__ultoa_invert+0x9c>
    18d4:	b4 e0       	ldi	r27, 0x04	; 4
    18d6:	3c d0       	rcall	.+120    	; 0x1950 <__ultoa_invert+0x9c>
    18d8:	67 0f       	add	r22, r23
    18da:	78 1f       	adc	r23, r24
    18dc:	89 1f       	adc	r24, r25
    18de:	9a 1f       	adc	r25, r26
    18e0:	a1 1d       	adc	r26, r1
    18e2:	68 0f       	add	r22, r24
    18e4:	79 1f       	adc	r23, r25
    18e6:	8a 1f       	adc	r24, r26
    18e8:	91 1d       	adc	r25, r1
    18ea:	a1 1d       	adc	r26, r1
    18ec:	6a 0f       	add	r22, r26
    18ee:	71 1d       	adc	r23, r1
    18f0:	81 1d       	adc	r24, r1
    18f2:	91 1d       	adc	r25, r1
    18f4:	a1 1d       	adc	r26, r1
    18f6:	20 d0       	rcall	.+64     	; 0x1938 <__ultoa_invert+0x84>
    18f8:	09 f4       	brne	.+2      	; 0x18fc <__ultoa_invert+0x48>
    18fa:	68 94       	set
    18fc:	3f 91       	pop	r19
    18fe:	2a e0       	ldi	r18, 0x0A	; 10
    1900:	26 9f       	mul	r18, r22
    1902:	11 24       	eor	r1, r1
    1904:	30 19       	sub	r19, r0
    1906:	30 5d       	subi	r19, 0xD0	; 208
    1908:	31 93       	st	Z+, r19
    190a:	de f6       	brtc	.-74     	; 0x18c2 <__ultoa_invert+0xe>
    190c:	cf 01       	movw	r24, r30
    190e:	08 95       	ret
    1910:	46 2f       	mov	r20, r22
    1912:	47 70       	andi	r20, 0x07	; 7
    1914:	40 5d       	subi	r20, 0xD0	; 208
    1916:	41 93       	st	Z+, r20
    1918:	b3 e0       	ldi	r27, 0x03	; 3
    191a:	0f d0       	rcall	.+30     	; 0x193a <__ultoa_invert+0x86>
    191c:	c9 f7       	brne	.-14     	; 0x1910 <__ultoa_invert+0x5c>
    191e:	f6 cf       	rjmp	.-20     	; 0x190c <__ultoa_invert+0x58>
    1920:	46 2f       	mov	r20, r22
    1922:	4f 70       	andi	r20, 0x0F	; 15
    1924:	40 5d       	subi	r20, 0xD0	; 208
    1926:	4a 33       	cpi	r20, 0x3A	; 58
    1928:	18 f0       	brcs	.+6      	; 0x1930 <__ultoa_invert+0x7c>
    192a:	49 5d       	subi	r20, 0xD9	; 217
    192c:	31 fd       	sbrc	r19, 1
    192e:	40 52       	subi	r20, 0x20	; 32
    1930:	41 93       	st	Z+, r20
    1932:	02 d0       	rcall	.+4      	; 0x1938 <__ultoa_invert+0x84>
    1934:	a9 f7       	brne	.-22     	; 0x1920 <__ultoa_invert+0x6c>
    1936:	ea cf       	rjmp	.-44     	; 0x190c <__ultoa_invert+0x58>
    1938:	b4 e0       	ldi	r27, 0x04	; 4
    193a:	a6 95       	lsr	r26
    193c:	97 95       	ror	r25
    193e:	87 95       	ror	r24
    1940:	77 95       	ror	r23
    1942:	67 95       	ror	r22
    1944:	ba 95       	dec	r27
    1946:	c9 f7       	brne	.-14     	; 0x193a <__ultoa_invert+0x86>
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	61 05       	cpc	r22, r1
    194c:	71 05       	cpc	r23, r1
    194e:	08 95       	ret
    1950:	9b 01       	movw	r18, r22
    1952:	ac 01       	movw	r20, r24
    1954:	0a 2e       	mov	r0, r26
    1956:	06 94       	lsr	r0
    1958:	57 95       	ror	r21
    195a:	47 95       	ror	r20
    195c:	37 95       	ror	r19
    195e:	27 95       	ror	r18
    1960:	ba 95       	dec	r27
    1962:	c9 f7       	brne	.-14     	; 0x1956 <__ultoa_invert+0xa2>
    1964:	62 0f       	add	r22, r18
    1966:	73 1f       	adc	r23, r19
    1968:	84 1f       	adc	r24, r20
    196a:	95 1f       	adc	r25, r21
    196c:	a0 1d       	adc	r26, r0
    196e:	08 95       	ret

00001970 <__prologue_saves__>:
    1970:	2f 92       	push	r2
    1972:	3f 92       	push	r3
    1974:	4f 92       	push	r4
    1976:	5f 92       	push	r5
    1978:	6f 92       	push	r6
    197a:	7f 92       	push	r7
    197c:	8f 92       	push	r8
    197e:	9f 92       	push	r9
    1980:	af 92       	push	r10
    1982:	bf 92       	push	r11
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	ca 1b       	sub	r28, r26
    199a:	db 0b       	sbc	r29, r27
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	09 94       	ijmp

000019a8 <__epilogue_restores__>:
    19a8:	2a 88       	ldd	r2, Y+18	; 0x12
    19aa:	39 88       	ldd	r3, Y+17	; 0x11
    19ac:	48 88       	ldd	r4, Y+16	; 0x10
    19ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    19b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    19b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    19b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    19b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    19ba:	b9 84       	ldd	r11, Y+9	; 0x09
    19bc:	c8 84       	ldd	r12, Y+8	; 0x08
    19be:	df 80       	ldd	r13, Y+7	; 0x07
    19c0:	ee 80       	ldd	r14, Y+6	; 0x06
    19c2:	fd 80       	ldd	r15, Y+5	; 0x05
    19c4:	0c 81       	ldd	r16, Y+4	; 0x04
    19c6:	1b 81       	ldd	r17, Y+3	; 0x03
    19c8:	aa 81       	ldd	r26, Y+2	; 0x02
    19ca:	b9 81       	ldd	r27, Y+1	; 0x01
    19cc:	ce 0f       	add	r28, r30
    19ce:	d1 1d       	adc	r29, r1
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	ed 01       	movw	r28, r26
    19dc:	08 95       	ret

000019de <_exit>:
    19de:	f8 94       	cli

000019e0 <__stop_program>:
    19e0:	ff cf       	rjmp	.-2      	; 0x19e0 <__stop_program>
