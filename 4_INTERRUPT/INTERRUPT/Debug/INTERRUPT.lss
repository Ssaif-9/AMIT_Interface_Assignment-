
INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000a1c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001170  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5e  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000032c  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069e  00000000  00000000  000020fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00002798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ad6  00000000  00000000  00002e8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_1>
   8:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_2>
   c:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 48 04 	call	0x890	; 0x890 <main>
  8a:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:


DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_SetPinDirection+0x6>
  96:	8b c0       	rjmp	.+278    	; 0x1ae <DIO_SetPinDirection+0x11c>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_SetPinDirection+0xc>
  9c:	8a c0       	rjmp	.+276    	; 0x1b2 <DIO_SetPinDirection+0x120>
  9e:	42 30       	cpi	r20, 0x02	; 2
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_SetPinDirection+0x12>
  a2:	89 c0       	rjmp	.+274    	; 0x1b6 <DIO_SetPinDirection+0x124>
	{
    	switch(PortId)
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	41 f1       	breq	.+80     	; 0xf8 <DIO_SetPinDirection+0x66>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	38 f0       	brcs	.+14     	; 0xba <DIO_SetPinDirection+0x28>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	09 f4       	brne	.+2      	; 0xb2 <DIO_SetPinDirection+0x20>
  b0:	41 c0       	rjmp	.+130    	; 0x134 <DIO_SetPinDirection+0xa2>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	09 f0       	breq	.+2      	; 0xb8 <DIO_SetPinDirection+0x26>
  b6:	81 c0       	rjmp	.+258    	; 0x1ba <DIO_SetPinDirection+0x128>
  b8:	5b c0       	rjmp	.+182    	; 0x170 <DIO_SetPinDirection+0xde>
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	71 f4       	brne	.+28     	; 0xda <DIO_SetPinDirection+0x48>
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	ac 01       	movw	r20, r24
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_SetPinDirection+0x3a>
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_SetPinDirection+0x36>
  d0:	ba 01       	movw	r22, r20
  d2:	62 2b       	or	r22, r18
  d4:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
	{
    	switch(PortId)
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
  da:	2a b3       	in	r18, 0x1a	; 26
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	ac 01       	movw	r20, r24
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x56>
  e4:	44 0f       	add	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x52>
  ec:	ba 01       	movw	r22, r20
  ee:	60 95       	com	r22
  f0:	62 23       	and	r22, r18
  f2:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
  f8:	41 30       	cpi	r20, 0x01	; 1
  fa:	69 f4       	brne	.+26     	; 0x116 <DIO_SetPinDirection+0x84>
  fc:	47 b3       	in	r20, 0x17	; 23
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	c9 01       	movw	r24, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDirection+0x78>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDirection+0x74>
 10e:	84 2b       	or	r24, r20
 110:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	ac 01       	movw	r20, r24
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPinDirection+0x92>
 120:	44 0f       	add	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPinDirection+0x8e>
 128:	ba 01       	movw	r22, r20
 12a:	60 95       	com	r22
 12c:	62 23       	and	r22, r18
 12e:	67 bb       	out	0x17, r22	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	69 f4       	brne	.+26     	; 0x152 <DIO_SetPinDirection+0xc0>
 138:	44 b3       	in	r20, 0x14	; 20
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	c9 01       	movw	r24, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPinDirection+0xb4>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPinDirection+0xb0>
 14a:	84 2b       	or	r24, r20
 14c:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
 152:	24 b3       	in	r18, 0x14	; 20
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_SetPinDirection+0xce>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_SetPinDirection+0xca>
 164:	ba 01       	movw	r22, r20
 166:	60 95       	com	r22
 168:	62 23       	and	r22, r18
 16a:	64 bb       	out	0x14, r22	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	71 f4       	brne	.+28     	; 0x190 <DIO_SetPinDirection+0xfe>
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_SetPinDirection+0xf0>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_SetPinDirection+0xec>
 186:	ba 01       	movw	r22, r20
 188:	62 2b       	or	r22, r18
 18a:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
 190:	21 b3       	in	r18, 0x11	; 17
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_SetPinDirection+0x10c>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_SetPinDirection+0x108>
 1a2:	ba 01       	movw	r22, r20
 1a4:	60 95       	com	r22
 1a6:	62 23       	and	r22, r18
 1a8:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
		   break;
	    }	
	} 
	else
	{
		ErrorStatus = DIO_NOK;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	08 95       	ret
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	08 95       	ret
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
 1ba:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
 1bc:	08 95       	ret

000001be <DIO_SetPinValue>:

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
 1be:	84 30       	cpi	r24, 0x04	; 4
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <DIO_SetPinValue+0x6>
 1c2:	8b c0       	rjmp	.+278    	; 0x2da <DIO_SetPinValue+0x11c>
 1c4:	68 30       	cpi	r22, 0x08	; 8
 1c6:	08 f0       	brcs	.+2      	; 0x1ca <DIO_SetPinValue+0xc>
 1c8:	8a c0       	rjmp	.+276    	; 0x2de <DIO_SetPinValue+0x120>
 1ca:	42 30       	cpi	r20, 0x02	; 2
 1cc:	08 f0       	brcs	.+2      	; 0x1d0 <DIO_SetPinValue+0x12>
 1ce:	89 c0       	rjmp	.+274    	; 0x2e2 <DIO_SetPinValue+0x124>
	{
			switch (PortId)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	41 f1       	breq	.+80     	; 0x224 <DIO_SetPinValue+0x66>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	38 f0       	brcs	.+14     	; 0x1e6 <DIO_SetPinValue+0x28>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	09 f4       	brne	.+2      	; 0x1de <DIO_SetPinValue+0x20>
 1dc:	41 c0       	rjmp	.+130    	; 0x260 <DIO_SetPinValue+0xa2>
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <DIO_SetPinValue+0x26>
 1e2:	81 c0       	rjmp	.+258    	; 0x2e6 <DIO_SetPinValue+0x128>
 1e4:	5b c0       	rjmp	.+182    	; 0x29c <DIO_SetPinValue+0xde>
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	71 f4       	brne	.+28     	; 0x206 <DIO_SetPinValue+0x48>
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	ac 01       	movw	r20, r24
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_SetPinValue+0x3a>
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_SetPinValue+0x36>
 1fc:	ba 01       	movw	r22, r20
 1fe:	62 2b       	or	r22, r18
 200:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
	{
			switch (PortId)
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
 206:	2b b3       	in	r18, 0x1b	; 27
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	ac 01       	movw	r20, r24
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_SetPinValue+0x56>
 210:	44 0f       	add	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_SetPinValue+0x52>
 218:	ba 01       	movw	r22, r20
 21a:	60 95       	com	r22
 21c:	62 23       	and	r22, r18
 21e:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	69 f4       	brne	.+26     	; 0x242 <DIO_SetPinValue+0x84>
 228:	48 b3       	in	r20, 0x18	; 24
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	c9 01       	movw	r24, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPinValue+0x78>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPinValue+0x74>
 23a:	84 2b       	or	r24, r20
 23c:	88 bb       	out	0x18, r24	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
 242:	28 b3       	in	r18, 0x18	; 24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	ac 01       	movw	r20, r24
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_SetPinValue+0x92>
 24c:	44 0f       	add	r20, r20
 24e:	55 1f       	adc	r21, r21
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_SetPinValue+0x8e>
 254:	ba 01       	movw	r22, r20
 256:	60 95       	com	r22
 258:	62 23       	and	r22, r18
 25a:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
 260:	41 30       	cpi	r20, 0x01	; 1
 262:	69 f4       	brne	.+26     	; 0x27e <DIO_SetPinValue+0xc0>
 264:	45 b3       	in	r20, 0x15	; 21
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	c9 01       	movw	r24, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_SetPinValue+0xb4>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_SetPinValue+0xb0>
 276:	84 2b       	or	r24, r20
 278:	85 bb       	out	0x15, r24	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	ac 01       	movw	r20, r24
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinValue+0xce>
 288:	44 0f       	add	r20, r20
 28a:	55 1f       	adc	r21, r21
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinValue+0xca>
 290:	ba 01       	movw	r22, r20
 292:	60 95       	com	r22
 294:	62 23       	and	r22, r18
 296:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	71 f4       	brne	.+28     	; 0x2bc <DIO_SetPinValue+0xfe>
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_SetPinValue+0xf0>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_SetPinValue+0xec>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
 2bc:	22 b3       	in	r18, 0x12	; 18
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	ac 01       	movw	r20, r24
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_SetPinValue+0x10c>
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_SetPinValue+0x108>
 2ce:	ba 01       	movw	r22, r20
 2d0:	60 95       	com	r22
 2d2:	62 23       	and	r22, r18
 2d4:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	08 95       	ret
			    break;
			}	
		} 
	else
	{
		ErrorStatus = DIO_NOK;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	08 95       	ret
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	08 95       	ret
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	08 95       	ret
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
 2e8:	08 95       	ret

000002ea <DIO_TogglePinValue>:
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))  //edit all
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	08 f0       	brcs	.+2      	; 0x2f0 <DIO_TogglePinValue+0x6>
 2ee:	45 c0       	rjmp	.+138    	; 0x37a <DIO_TogglePinValue+0x90>
 2f0:	68 30       	cpi	r22, 0x08	; 8
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <DIO_TogglePinValue+0xc>
 2f4:	44 c0       	rjmp	.+136    	; 0x37e <DIO_TogglePinValue+0x94>
	{
		switch (PortId)
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	b1 f0       	breq	.+44     	; 0x326 <DIO_TogglePinValue+0x3c>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	30 f0       	brcs	.+12     	; 0x30a <DIO_TogglePinValue+0x20>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	01 f1       	breq	.+64     	; 0x342 <DIO_TogglePinValue+0x58>
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	09 f0       	breq	.+2      	; 0x308 <DIO_TogglePinValue+0x1e>
 306:	3d c0       	rjmp	.+122    	; 0x382 <DIO_TogglePinValue+0x98>
 308:	2a c0       	rjmp	.+84     	; 0x35e <DIO_TogglePinValue+0x74>
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
 30a:	2b b3       	in	r18, 0x1b	; 27
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	ac 01       	movw	r20, r24
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_TogglePinValue+0x2e>
 314:	44 0f       	add	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_TogglePinValue+0x2a>
 31c:	ba 01       	movw	r22, r20
 31e:	62 27       	eor	r22, r18
 320:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
 322:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
			break;
 324:	08 95       	ret
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
 326:	28 b3       	in	r18, 0x18	; 24
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	ac 01       	movw	r20, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_TogglePinValue+0x4a>
 330:	44 0f       	add	r20, r20
 332:	55 1f       	adc	r21, r21
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_TogglePinValue+0x46>
 338:	ba 01       	movw	r22, r20
 33a:	62 27       	eor	r22, r18
 33c:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
 33e:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTA_REG,PinId);
			break;
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
			break;
 340:	08 95       	ret
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
 342:	25 b3       	in	r18, 0x15	; 21
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	ac 01       	movw	r20, r24
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_TogglePinValue+0x66>
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_TogglePinValue+0x62>
 354:	ba 01       	movw	r22, r20
 356:	62 27       	eor	r22, r18
 358:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
 35a:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTB_REG,PinId);
			break;
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
			break;
 35c:	08 95       	ret
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
 35e:	22 b3       	in	r18, 0x12	; 18
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	ac 01       	movw	r20, r24
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_TogglePinValue+0x82>
 368:	44 0f       	add	r20, r20
 36a:	55 1f       	adc	r21, r21
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_TogglePinValue+0x7e>
 370:	ba 01       	movw	r22, r20
 372:	62 27       	eor	r22, r18
 374:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
 376:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTC_REG,PinId);
			break;
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
			break;
 378:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	08 95       	ret
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	08 95       	ret
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
 382:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
 384:	08 95       	ret

00000386 <DIO_ReadValue>:
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue!=NULL)) //wild pointer 
 386:	84 30       	cpi	r24, 0x04	; 4
 388:	08 f0       	brcs	.+2      	; 0x38c <DIO_ReadValue+0x6>
 38a:	49 c0       	rjmp	.+146    	; 0x41e <DIO_ReadValue+0x98>
 38c:	68 30       	cpi	r22, 0x08	; 8
 38e:	08 f0       	brcs	.+2      	; 0x392 <DIO_ReadValue+0xc>
 390:	48 c0       	rjmp	.+144    	; 0x422 <DIO_ReadValue+0x9c>
 392:	41 15       	cp	r20, r1
 394:	51 05       	cpc	r21, r1
 396:	09 f4       	brne	.+2      	; 0x39a <DIO_ReadValue+0x14>
 398:	46 c0       	rjmp	.+140    	; 0x426 <DIO_ReadValue+0xa0>
	{
		switch (PortId)
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	b1 f0       	breq	.+44     	; 0x3ca <DIO_ReadValue+0x44>
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	30 f0       	brcs	.+12     	; 0x3ae <DIO_ReadValue+0x28>
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	01 f1       	breq	.+64     	; 0x3e6 <DIO_ReadValue+0x60>
 3a6:	83 30       	cpi	r24, 0x03	; 3
 3a8:	09 f0       	breq	.+2      	; 0x3ac <DIO_ReadValue+0x26>
 3aa:	3f c0       	rjmp	.+126    	; 0x42a <DIO_ReadValue+0xa4>
 3ac:	2a c0       	rjmp	.+84     	; 0x402 <DIO_ReadValue+0x7c>
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
 3ae:	89 b3       	in	r24, 0x19	; 25
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	9c 01       	movw	r18, r24
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_ReadValue+0x34>
 3b6:	35 95       	asr	r19
 3b8:	27 95       	ror	r18
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_ReadValue+0x30>
 3be:	b9 01       	movw	r22, r18
 3c0:	61 70       	andi	r22, 0x01	; 1
 3c2:	fa 01       	movw	r30, r20
 3c4:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
 3c8:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
 3ca:	86 b3       	in	r24, 0x16	; 22
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	9c 01       	movw	r18, r24
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_ReadValue+0x50>
 3d2:	35 95       	asr	r19
 3d4:	27 95       	ror	r18
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_ReadValue+0x4c>
 3da:	b9 01       	movw	r22, r18
 3dc:	61 70       	andi	r22, 0x01	; 1
 3de:	fa 01       	movw	r30, r20
 3e0:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
 3e4:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
 3e6:	83 b3       	in	r24, 0x13	; 19
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9c 01       	movw	r18, r24
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_ReadValue+0x6c>
 3ee:	35 95       	asr	r19
 3f0:	27 95       	ror	r18
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_ReadValue+0x68>
 3f6:	b9 01       	movw	r22, r18
 3f8:	61 70       	andi	r22, 0x01	; 1
 3fa:	fa 01       	movw	r30, r20
 3fc:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 3fe:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
 400:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
 402:	80 b3       	in	r24, 0x10	; 16
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	9c 01       	movw	r18, r24
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_ReadValue+0x88>
 40a:	35 95       	asr	r19
 40c:	27 95       	ror	r18
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_ReadValue+0x84>
 412:	b9 01       	movw	r22, r18
 414:	61 70       	andi	r22, 0x01	; 1
 416:	fa 01       	movw	r30, r20
 418:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 41a:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
			break;
 41c:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	08 95       	ret
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	08 95       	ret
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	08 95       	ret
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 42a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
 42c:	08 95       	ret

0000042e <DIO_activePinInPullUpResistance>:
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	 if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
 42e:	84 30       	cpi	r24, 0x04	; 4
 430:	08 f0       	brcs	.+2      	; 0x434 <DIO_activePinInPullUpResistance+0x6>
 432:	45 c0       	rjmp	.+138    	; 0x4be <DIO_activePinInPullUpResistance+0x90>
 434:	68 30       	cpi	r22, 0x08	; 8
 436:	08 f0       	brcs	.+2      	; 0x43a <DIO_activePinInPullUpResistance+0xc>
 438:	44 c0       	rjmp	.+136    	; 0x4c2 <DIO_activePinInPullUpResistance+0x94>
	 {
		 switch(PortId)
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	b1 f0       	breq	.+44     	; 0x46a <DIO_activePinInPullUpResistance+0x3c>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	30 f0       	brcs	.+12     	; 0x44e <DIO_activePinInPullUpResistance+0x20>
 442:	82 30       	cpi	r24, 0x02	; 2
 444:	01 f1       	breq	.+64     	; 0x486 <DIO_activePinInPullUpResistance+0x58>
 446:	83 30       	cpi	r24, 0x03	; 3
 448:	09 f0       	breq	.+2      	; 0x44c <DIO_activePinInPullUpResistance+0x1e>
 44a:	3d c0       	rjmp	.+122    	; 0x4c6 <DIO_activePinInPullUpResistance+0x98>
 44c:	2a c0       	rjmp	.+84     	; 0x4a2 <DIO_activePinInPullUpResistance+0x74>
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
 44e:	2b b3       	in	r18, 0x1b	; 27
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	ac 01       	movw	r20, r24
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_activePinInPullUpResistance+0x2e>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_activePinInPullUpResistance+0x2a>
 460:	ba 01       	movw	r22, r20
 462:	62 2b       	or	r22, r18
 464:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 466:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch(PortId)
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
			 break;
 468:	08 95       	ret
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
 46a:	28 b3       	in	r18, 0x18	; 24
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	ac 01       	movw	r20, r24
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_activePinInPullUpResistance+0x4a>
 474:	44 0f       	add	r20, r20
 476:	55 1f       	adc	r21, r21
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_activePinInPullUpResistance+0x46>
 47c:	ba 01       	movw	r22, r20
 47e:	62 2b       	or	r22, r18
 480:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 482:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTA_REG,PinId);
			 break;
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
			 break;
 484:	08 95       	ret
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
 486:	25 b3       	in	r18, 0x15	; 21
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_activePinInPullUpResistance+0x66>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_activePinInPullUpResistance+0x62>
 498:	ba 01       	movw	r22, r20
 49a:	62 2b       	or	r22, r18
 49c:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 49e:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTB_REG,PinId);
			 break;
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
			 break;
 4a0:	08 95       	ret
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
 4a2:	22 b3       	in	r18, 0x12	; 18
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ac 01       	movw	r20, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_activePinInPullUpResistance+0x82>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_activePinInPullUpResistance+0x7e>
 4b4:	ba 01       	movw	r22, r20
 4b6:	62 2b       	or	r22, r18
 4b8:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTC_REG,PinId);
			 break;
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
			 break;
 4bc:	08 95       	ret
	      } 
	 }	 
	 else
	 {
		ErrorStatus = DIO_NOK;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	08 95       	ret
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 4c6:	80 e0       	ldi	r24, 0x00	; 0
	 else
	 {
		ErrorStatus = DIO_NOK;
	 }
	 return ErrorStatus;
}
 4c8:	08 95       	ret

000004ca <DIO_setPortDirection>:


DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
 4ca:	84 30       	cpi	r24, 0x04	; 4
 4cc:	a8 f5       	brcc	.+106    	; 0x538 <DIO_setPortDirection+0x6e>
	{
		switch(PortId)
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	91 f0       	breq	.+36     	; 0x4f6 <DIO_setPortDirection+0x2c>
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	28 f0       	brcs	.+10     	; 0x4e0 <DIO_setPortDirection+0x16>
 4d6:	82 30       	cpi	r24, 0x02	; 2
 4d8:	c9 f0       	breq	.+50     	; 0x50c <DIO_setPortDirection+0x42>
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	79 f5       	brne	.+94     	; 0x53c <DIO_setPortDirection+0x72>
 4de:	21 c0       	rjmp	.+66     	; 0x522 <DIO_setPortDirection+0x58>
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
 4e0:	6f 3f       	cpi	r22, 0xFF	; 255
 4e2:	29 f4       	brne	.+10     	; 0x4ee <DIO_setPortDirection+0x24>
 4e4:	8a b3       	in	r24, 0x1a	; 26
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	8a bb       	out	0x1a, r24	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
	if ( (PortId<=DIO_PORTD))
	{
		switch(PortId)
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
 4ee:	8a b3       	in	r24, 0x1a	; 26
 4f0:	1a ba       	out	0x1a, r1	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
 4f6:	6f 3f       	cpi	r22, 0xFF	; 255
 4f8:	29 f4       	brne	.+10     	; 0x504 <DIO_setPortDirection+0x3a>
 4fa:	87 b3       	in	r24, 0x17	; 23
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
 504:	87 b3       	in	r24, 0x17	; 23
 506:	17 ba       	out	0x17, r1	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
 50c:	6f 3f       	cpi	r22, 0xFF	; 255
 50e:	29 f4       	brne	.+10     	; 0x51a <DIO_setPortDirection+0x50>
 510:	84 b3       	in	r24, 0x14	; 20
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
 51a:	84 b3       	in	r24, 0x14	; 20
 51c:	14 ba       	out	0x14, r1	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
 522:	6f 3f       	cpi	r22, 0xFF	; 255
 524:	29 f4       	brne	.+10     	; 0x530 <DIO_setPortDirection+0x66>
 526:	81 b3       	in	r24, 0x11	; 17
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	81 bb       	out	0x11, r24	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
 530:	81 b3       	in	r24, 0x11	; 17
 532:	11 ba       	out	0x11, r1	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	08 95       	ret
			break;
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	08 95       	ret



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 53c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
 53e:	08 95       	ret

00000540 <DIO_setPortValue>:


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) )
 540:	84 30       	cpi	r24, 0x04	; 4
 542:	a8 f4       	brcc	.+42     	; 0x56e <DIO_setPortValue+0x2e>
	{
		switch(PortId)
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	51 f0       	breq	.+20     	; 0x55c <DIO_setPortValue+0x1c>
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	28 f0       	brcs	.+10     	; 0x556 <DIO_setPortValue+0x16>
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	49 f0       	breq	.+18     	; 0x562 <DIO_setPortValue+0x22>
 550:	83 30       	cpi	r24, 0x03	; 3
 552:	79 f4       	brne	.+30     	; 0x572 <DIO_setPortValue+0x32>
 554:	09 c0       	rjmp	.+18     	; 0x568 <DIO_setPortValue+0x28>
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
 556:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 558:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
			break;
 55a:	08 95       	ret
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
 55c:	68 bb       	out	0x18, r22	; 24
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 55e:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG=PortValue;
			break;
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
			break;
 560:	08 95       	ret
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
 562:	65 bb       	out	0x15, r22	; 21
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 564:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG=PortValue;
			break;
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
			break;
 566:	08 95       	ret
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
 568:	62 bb       	out	0x12, r22	; 18
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 56a:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG=PortValue;
			break;
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
			break;
 56c:	08 95       	ret
		}
	}
	else
	{
	ErrorStatus = DIO_NOK;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	08 95       	ret
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 572:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
 574:	08 95       	ret

00000576 <DIO_getPortValue>:


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) && (PortValue!=NULL) )
 576:	84 30       	cpi	r24, 0x04	; 4
 578:	00 f5       	brcc	.+64     	; 0x5ba <DIO_getPortValue+0x44>
 57a:	61 15       	cp	r22, r1
 57c:	71 05       	cpc	r23, r1
 57e:	f9 f0       	breq	.+62     	; 0x5be <DIO_getPortValue+0x48>
	{
		switch(PortId)
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	61 f0       	breq	.+24     	; 0x59c <DIO_getPortValue+0x26>
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	28 f0       	brcs	.+10     	; 0x592 <DIO_getPortValue+0x1c>
 588:	82 30       	cpi	r24, 0x02	; 2
 58a:	69 f0       	breq	.+26     	; 0x5a6 <DIO_getPortValue+0x30>
 58c:	83 30       	cpi	r24, 0x03	; 3
 58e:	c9 f4       	brne	.+50     	; 0x5c2 <DIO_getPortValue+0x4c>
 590:	0f c0       	rjmp	.+30     	; 0x5b0 <DIO_getPortValue+0x3a>
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
 592:	8b b3       	in	r24, 0x1b	; 27
 594:	fb 01       	movw	r30, r22
 596:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 598:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
			break;
 59a:	08 95       	ret
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
 59c:	88 b3       	in	r24, 0x18	; 24
 59e:	fb 01       	movw	r30, r22
 5a0:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTA_REG;
			break;
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
			break;
 5a4:	08 95       	ret
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
 5a6:	85 b3       	in	r24, 0x15	; 21
 5a8:	fb 01       	movw	r30, r22
 5aa:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 5ac:	80 e0       	ldi	r24, 0x00	; 0
		    *PortValue =PORTB_REG;
			break;
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
			break;
 5ae:	08 95       	ret
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
 5b0:	82 b3       	in	r24, 0x12	; 18
 5b2:	fb 01       	movw	r30, r22
 5b4:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 5b6:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTC_REG;
			break;
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
			break;
 5b8:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	08 95       	ret
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	08 95       	ret
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 5c2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
 5c4:	08 95       	ret

000005c6 <DIO_togglePortValue>:


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
 5c6:	84 30       	cpi	r24, 0x04	; 4
 5c8:	e8 f4       	brcc	.+58     	; 0x604 <DIO_togglePortValue+0x3e>
	{
		switch(PortId)
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	61 f0       	breq	.+24     	; 0x5e6 <DIO_togglePortValue+0x20>
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	28 f0       	brcs	.+10     	; 0x5dc <DIO_togglePortValue+0x16>
 5d2:	82 30       	cpi	r24, 0x02	; 2
 5d4:	69 f0       	breq	.+26     	; 0x5f0 <DIO_togglePortValue+0x2a>
 5d6:	83 30       	cpi	r24, 0x03	; 3
 5d8:	b9 f4       	brne	.+46     	; 0x608 <DIO_togglePortValue+0x42>
 5da:	0f c0       	rjmp	.+30     	; 0x5fa <DIO_togglePortValue+0x34>
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
 5dc:	8b b3       	in	r24, 0x1b	; 27
 5de:	80 95       	com	r24
 5e0:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
			break;
 5e4:	08 95       	ret
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
 5e6:	88 b3       	in	r24, 0x18	; 24
 5e8:	80 95       	com	r24
 5ea:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 5ec:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
			break;
 5ee:	08 95       	ret
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
 5f0:	85 b3       	in	r24, 0x15	; 21
 5f2:	80 95       	com	r24
 5f4:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 5f6:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
			break;
 5f8:	08 95       	ret
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
 5fa:	82 b3       	in	r24, 0x12	; 18
 5fc:	80 95       	com	r24
 5fe:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 600:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
			break;
 602:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	08 95       	ret
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 608:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
 60a:	08 95       	ret

0000060c <DIO_activePortInPullUpResistance>:


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
 60c:	84 30       	cpi	r24, 0x04	; 4
 60e:	e8 f4       	brcc	.+58     	; 0x64a <DIO_activePortInPullUpResistance+0x3e>
	{
		switch(PortId)
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	61 f0       	breq	.+24     	; 0x62c <DIO_activePortInPullUpResistance+0x20>
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	28 f0       	brcs	.+10     	; 0x622 <DIO_activePortInPullUpResistance+0x16>
 618:	82 30       	cpi	r24, 0x02	; 2
 61a:	69 f0       	breq	.+26     	; 0x636 <DIO_activePortInPullUpResistance+0x2a>
 61c:	83 30       	cpi	r24, 0x03	; 3
 61e:	b9 f4       	brne	.+46     	; 0x64e <DIO_activePortInPullUpResistance+0x42>
 620:	0f c0       	rjmp	.+30     	; 0x640 <DIO_activePortInPullUpResistance+0x34>
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
 622:	8b b3       	in	r24, 0x1b	; 27
 624:	8f ef       	ldi	r24, 0xFF	; 255
 626:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 628:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
			break;
 62a:	08 95       	ret
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
 62c:	88 b3       	in	r24, 0x18	; 24
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 632:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
			break;
 634:	08 95       	ret
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
 636:	85 b3       	in	r24, 0x15	; 21
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 63c:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
			break;
 63e:	08 95       	ret
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
 640:	82 b3       	in	r24, 0x12	; 18
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 646:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
			break;
 648:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	08 95       	ret
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
 64e:	80 e0       	ldi	r24, 0x00	; 0
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
	
}
 650:	08 95       	ret

00000652 <EXTI_Enable>:
static void (*PRIVATE_PtrCallBackInt1) (void) = NULL;
static void (*PRIVATE_PtrCallBackInt2) (void) = NULL;

void EXTI_Enable(EXTI_InterruptSource InterruptSource ,EXTI_TriggerEdge TriggerEdge)
{
	switch(InterruptSource)
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	71 f1       	breq	.+92     	; 0x6b2 <EXTI_Enable+0x60>
 656:	81 30       	cpi	r24, 0x01	; 1
 658:	20 f0       	brcs	.+8      	; 0x662 <EXTI_Enable+0x10>
 65a:	82 30       	cpi	r24, 0x02	; 2
 65c:	09 f0       	breq	.+2      	; 0x660 <EXTI_Enable+0xe>
 65e:	60 c0       	rjmp	.+192    	; 0x720 <EXTI_Enable+0xce>
 660:	50 c0       	rjmp	.+160    	; 0x702 <EXTI_Enable+0xb0>
	{
		case EXTI_INT0:
		switch(TriggerEdge)
 662:	61 30       	cpi	r22, 0x01	; 1
 664:	71 f0       	breq	.+28     	; 0x682 <EXTI_Enable+0x30>
 666:	61 30       	cpi	r22, 0x01	; 1
 668:	28 f0       	brcs	.+10     	; 0x674 <EXTI_Enable+0x22>
 66a:	62 30       	cpi	r22, 0x02	; 2
 66c:	89 f0       	breq	.+34     	; 0x690 <EXTI_Enable+0x3e>
 66e:	63 30       	cpi	r22, 0x03	; 3
 670:	e1 f4       	brne	.+56     	; 0x6aa <EXTI_Enable+0x58>
 672:	15 c0       	rjmp	.+42     	; 0x69e <EXTI_Enable+0x4c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
 674:	85 b7       	in	r24, 0x35	; 53
 676:	81 60       	ori	r24, 0x01	; 1
 678:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 67a:	85 b7       	in	r24, 0x35	; 53
 67c:	82 60       	ori	r24, 0x02	; 2
 67e:	85 bf       	out	0x35, r24	; 53
			break;
 680:	14 c0       	rjmp	.+40     	; 0x6aa <EXTI_Enable+0x58>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
 682:	85 b7       	in	r24, 0x35	; 53
 684:	8e 7f       	andi	r24, 0xFE	; 254
 686:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 688:	85 b7       	in	r24, 0x35	; 53
 68a:	82 60       	ori	r24, 0x02	; 2
 68c:	85 bf       	out	0x35, r24	; 53
			break;
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <EXTI_Enable+0x58>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
 690:	85 b7       	in	r24, 0x35	; 53
 692:	8e 7f       	andi	r24, 0xFE	; 254
 694:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
 696:	85 b7       	in	r24, 0x35	; 53
 698:	8d 7f       	andi	r24, 0xFD	; 253
 69a:	85 bf       	out	0x35, r24	; 53
			break;
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <EXTI_Enable+0x58>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
 69e:	85 b7       	in	r24, 0x35	; 53
 6a0:	81 60       	ori	r24, 0x01	; 1
 6a2:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
 6a4:	85 b7       	in	r24, 0x35	; 53
 6a6:	8d 7f       	andi	r24, 0xFD	; 253
 6a8:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT0);
 6aa:	8b b7       	in	r24, 0x3b	; 59
 6ac:	80 64       	ori	r24, 0x40	; 64
 6ae:	8b bf       	out	0x3b, r24	; 59
		break;
 6b0:	08 95       	ret
		
		case EXTI_INT1:
		switch(TriggerEdge)
 6b2:	61 30       	cpi	r22, 0x01	; 1
 6b4:	71 f0       	breq	.+28     	; 0x6d2 <EXTI_Enable+0x80>
 6b6:	61 30       	cpi	r22, 0x01	; 1
 6b8:	28 f0       	brcs	.+10     	; 0x6c4 <EXTI_Enable+0x72>
 6ba:	62 30       	cpi	r22, 0x02	; 2
 6bc:	89 f0       	breq	.+34     	; 0x6e0 <EXTI_Enable+0x8e>
 6be:	63 30       	cpi	r22, 0x03	; 3
 6c0:	e1 f4       	brne	.+56     	; 0x6fa <EXTI_Enable+0xa8>
 6c2:	15 c0       	rjmp	.+42     	; 0x6ee <EXTI_Enable+0x9c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
 6c4:	85 b7       	in	r24, 0x35	; 53
 6c6:	84 60       	ori	r24, 0x04	; 4
 6c8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 6ca:	85 b7       	in	r24, 0x35	; 53
 6cc:	88 60       	ori	r24, 0x08	; 8
 6ce:	85 bf       	out	0x35, r24	; 53
			break;
 6d0:	14 c0       	rjmp	.+40     	; 0x6fa <EXTI_Enable+0xa8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
 6d2:	85 b7       	in	r24, 0x35	; 53
 6d4:	8b 7f       	andi	r24, 0xFB	; 251
 6d6:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 6d8:	85 b7       	in	r24, 0x35	; 53
 6da:	88 60       	ori	r24, 0x08	; 8
 6dc:	85 bf       	out	0x35, r24	; 53
			break;
 6de:	0d c0       	rjmp	.+26     	; 0x6fa <EXTI_Enable+0xa8>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
 6e0:	85 b7       	in	r24, 0x35	; 53
 6e2:	8b 7f       	andi	r24, 0xFB	; 251
 6e4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 6e6:	85 b7       	in	r24, 0x35	; 53
 6e8:	87 7f       	andi	r24, 0xF7	; 247
 6ea:	85 bf       	out	0x35, r24	; 53
			break;
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <EXTI_Enable+0xa8>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10);
 6ee:	85 b7       	in	r24, 0x35	; 53
 6f0:	84 60       	ori	r24, 0x04	; 4
 6f2:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 6f4:	85 b7       	in	r24, 0x35	; 53
 6f6:	87 7f       	andi	r24, 0xF7	; 247
 6f8:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT1);
 6fa:	8b b7       	in	r24, 0x3b	; 59
 6fc:	80 68       	ori	r24, 0x80	; 128
 6fe:	8b bf       	out	0x3b, r24	; 59
		break;
 700:	08 95       	ret
		
		case EXTI_INT2:
		switch(TriggerEdge)
 702:	66 23       	and	r22, r22
 704:	19 f0       	breq	.+6      	; 0x70c <EXTI_Enable+0xba>
 706:	61 30       	cpi	r22, 0x01	; 1
 708:	41 f4       	brne	.+16     	; 0x71a <EXTI_Enable+0xc8>
 70a:	04 c0       	rjmp	.+8      	; 0x714 <EXTI_Enable+0xc2>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
 70c:	84 b7       	in	r24, 0x34	; 52
 70e:	80 64       	ori	r24, 0x40	; 64
 710:	84 bf       	out	0x34, r24	; 52
			break;
 712:	03 c0       	rjmp	.+6      	; 0x71a <EXTI_Enable+0xc8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
 714:	84 b7       	in	r24, 0x34	; 52
 716:	8f 7b       	andi	r24, 0xBF	; 191
 718:	84 bf       	out	0x34, r24	; 52
			break;
		}
		SET_BIT(GICR,INT2);
 71a:	8b b7       	in	r24, 0x3b	; 59
 71c:	80 62       	ori	r24, 0x20	; 32
 71e:	8b bf       	out	0x3b, r24	; 59
 720:	08 95       	ret

00000722 <EXTI_Disable>:
	}
}

void EXTI_Disable(EXTI_InterruptSource InterruptSource)
{
	switch(InterruptSource)
 722:	81 30       	cpi	r24, 0x01	; 1
 724:	49 f0       	breq	.+18     	; 0x738 <EXTI_Disable+0x16>
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	18 f0       	brcs	.+6      	; 0x730 <EXTI_Disable+0xe>
 72a:	82 30       	cpi	r24, 0x02	; 2
 72c:	61 f4       	brne	.+24     	; 0x746 <EXTI_Disable+0x24>
 72e:	08 c0       	rjmp	.+16     	; 0x740 <EXTI_Disable+0x1e>
	{
		case EXTI_INT0:
		CLR_BIT(GICR,INT0);
 730:	8b b7       	in	r24, 0x3b	; 59
 732:	8f 7b       	andi	r24, 0xBF	; 191
 734:	8b bf       	out	0x3b, r24	; 59
		break;
 736:	08 95       	ret
		
		case EXTI_INT1:
		CLR_BIT(GICR,INT1);
 738:	8b b7       	in	r24, 0x3b	; 59
 73a:	8f 77       	andi	r24, 0x7F	; 127
 73c:	8b bf       	out	0x3b, r24	; 59
		break;
 73e:	08 95       	ret
		
		case EXTI_INT2:
		CLR_BIT(GICR,INT2);
 740:	8b b7       	in	r24, 0x3b	; 59
 742:	8f 7d       	andi	r24, 0xDF	; 223
 744:	8b bf       	out	0x3b, r24	; 59
 746:	08 95       	ret

00000748 <EXTI_SetCallBackInt0>:
	}
	
}
void EXTI_SetCallBackInt0 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	21 f0       	breq	.+8      	; 0x754 <EXTI_SetCallBackInt0+0xc>
	{
		PRIVATE_PtrCallBackInt0=PtrToFunc;
 74c:	90 93 61 00 	sts	0x0061, r25
 750:	80 93 60 00 	sts	0x0060, r24
 754:	08 95       	ret

00000756 <EXTI_SetCallBackInt1>:
	}
}
void EXTI_SetCallBackInt1 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	21 f0       	breq	.+8      	; 0x762 <EXTI_SetCallBackInt1+0xc>
	{
		PRIVATE_PtrCallBackInt1=PtrToFunc;
 75a:	90 93 63 00 	sts	0x0063, r25
 75e:	80 93 62 00 	sts	0x0062, r24
 762:	08 95       	ret

00000764 <EXTI_SetCallBackInt2>:
	}
}
void EXTI_SetCallBackInt2 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
 764:	00 97       	sbiw	r24, 0x00	; 0
 766:	21 f0       	breq	.+8      	; 0x770 <EXTI_SetCallBackInt2+0xc>
	{
		PRIVATE_PtrCallBackInt2=PtrToFunc;
 768:	90 93 65 00 	sts	0x0065, r25
 76c:	80 93 64 00 	sts	0x0064, r24
 770:	08 95       	ret

00000772 <__vector_1>:
}


void  __vector_1(void) __attribute__((signal)); 
void  __vector_1(void)
{
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
 77c:	2f 93       	push	r18
 77e:	3f 93       	push	r19
 780:	4f 93       	push	r20
 782:	5f 93       	push	r21
 784:	6f 93       	push	r22
 786:	7f 93       	push	r23
 788:	8f 93       	push	r24
 78a:	9f 93       	push	r25
 78c:	af 93       	push	r26
 78e:	bf 93       	push	r27
 790:	ef 93       	push	r30
 792:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt0 != NULL)
 794:	e0 91 60 00 	lds	r30, 0x0060
 798:	f0 91 61 00 	lds	r31, 0x0061
 79c:	30 97       	sbiw	r30, 0x00	; 0
 79e:	09 f0       	breq	.+2      	; 0x7a2 <__vector_1+0x30>
	{
		PRIVATE_PtrCallBackInt0();
 7a0:	09 95       	icall
	}
}
 7a2:	ff 91       	pop	r31
 7a4:	ef 91       	pop	r30
 7a6:	bf 91       	pop	r27
 7a8:	af 91       	pop	r26
 7aa:	9f 91       	pop	r25
 7ac:	8f 91       	pop	r24
 7ae:	7f 91       	pop	r23
 7b0:	6f 91       	pop	r22
 7b2:	5f 91       	pop	r21
 7b4:	4f 91       	pop	r20
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <__vector_2>:

void  __vector_2(void) __attribute__((signal)); 
void  __vector_2(void)
{
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	2f 93       	push	r18
 7d0:	3f 93       	push	r19
 7d2:	4f 93       	push	r20
 7d4:	5f 93       	push	r21
 7d6:	6f 93       	push	r22
 7d8:	7f 93       	push	r23
 7da:	8f 93       	push	r24
 7dc:	9f 93       	push	r25
 7de:	af 93       	push	r26
 7e0:	bf 93       	push	r27
 7e2:	ef 93       	push	r30
 7e4:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt1 != NULL)
 7e6:	e0 91 62 00 	lds	r30, 0x0062
 7ea:	f0 91 63 00 	lds	r31, 0x0063
 7ee:	30 97       	sbiw	r30, 0x00	; 0
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <__vector_2+0x30>
	{
		PRIVATE_PtrCallBackInt1();
 7f2:	09 95       	icall
	}
}
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <__vector_3>:

void  __vector_3(void) __attribute__((signal)); 
void  __vector_3(void)
{
 816:	1f 92       	push	r1
 818:	0f 92       	push	r0
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	0f 92       	push	r0
 81e:	11 24       	eor	r1, r1
 820:	2f 93       	push	r18
 822:	3f 93       	push	r19
 824:	4f 93       	push	r20
 826:	5f 93       	push	r21
 828:	6f 93       	push	r22
 82a:	7f 93       	push	r23
 82c:	8f 93       	push	r24
 82e:	9f 93       	push	r25
 830:	af 93       	push	r26
 832:	bf 93       	push	r27
 834:	ef 93       	push	r30
 836:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt2 != NULL)
 838:	e0 91 64 00 	lds	r30, 0x0064
 83c:	f0 91 65 00 	lds	r31, 0x0065
 840:	30 97       	sbiw	r30, 0x00	; 0
 842:	09 f0       	breq	.+2      	; 0x846 <__vector_3+0x30>
	{
		PRIVATE_PtrCallBackInt2();
 844:	09 95       	icall
	}
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	bf 91       	pop	r27
 84c:	af 91       	pop	r26
 84e:	9f 91       	pop	r25
 850:	8f 91       	pop	r24
 852:	7f 91       	pop	r23
 854:	6f 91       	pop	r22
 856:	5f 91       	pop	r21
 858:	4f 91       	pop	r20
 85a:	3f 91       	pop	r19
 85c:	2f 91       	pop	r18
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <GLBI_Enable>:
#include "GLBI_interfase.h"
#include "GLBI_private.h"
 
 void GLBI_Enable()
 {
	 SET_BIT(SREG,I);
 868:	8f b7       	in	r24, 0x3f	; 63
 86a:	80 68       	ori	r24, 0x80	; 128
 86c:	8f bf       	out	0x3f, r24	; 63
 86e:	08 95       	ret

00000870 <UP_Counter>:
    }
}

void UP_Counter (void)
{
	if (Counter<3)
 870:	80 91 66 00 	lds	r24, 0x0066
 874:	83 30       	cpi	r24, 0x03	; 3
 876:	18 f4       	brcc	.+6      	; 0x87e <UP_Counter+0xe>
	{
		Counter++;
 878:	8f 5f       	subi	r24, 0xFF	; 255
 87a:	80 93 66 00 	sts	0x0066, r24
 87e:	08 95       	ret

00000880 <DOWN_Counter>:
		//No Thing
	}
}
void DOWN_Counter (void)
{
	if (Counter>0)
 880:	80 91 66 00 	lds	r24, 0x0066
 884:	88 23       	and	r24, r24
 886:	19 f0       	breq	.+6      	; 0x88e <DOWN_Counter+0xe>
	{
		Counter--;
 888:	81 50       	subi	r24, 0x01	; 1
 88a:	80 93 66 00 	sts	0x0066, r24
 88e:	08 95       	ret

00000890 <main>:

u8 Counter = 0;

int main(void)
{
	LED_init(LED0_PORT,LED0_PIN);
 890:	82 e0       	ldi	r24, 0x02	; 2
 892:	62 e0       	ldi	r22, 0x02	; 2
 894:	0e 94 a3 04 	call	0x946	; 0x946 <LED_init>
	LED_init(LED1_PORT,LED1_PIN);
 898:	82 e0       	ldi	r24, 0x02	; 2
 89a:	67 e0       	ldi	r22, 0x07	; 7
 89c:	0e 94 a3 04 	call	0x946	; 0x946 <LED_init>
	LED_init(LED2_PORT,LED2_PIN);
 8a0:	83 e0       	ldi	r24, 0x03	; 3
 8a2:	62 e0       	ldi	r22, 0x02	; 2
 8a4:	0e 94 a3 04 	call	0x946	; 0x946 <LED_init>
	GLBI_Enable();
 8a8:	0e 94 34 04 	call	0x868	; 0x868 <GLBI_Enable>
	EXTI_Enable(EXTI_INT1,EXTI_RISING_EDGE);
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	0e 94 29 03 	call	0x652	; 0x652 <EXTI_Enable>
	EXTI_Enable(EXTI_INT2,EXTI_RISING_EDGE);
 8b4:	82 e0       	ldi	r24, 0x02	; 2
 8b6:	60 e0       	ldi	r22, 0x00	; 0
 8b8:	0e 94 29 03 	call	0x652	; 0x652 <EXTI_Enable>
	EXTI_SetCallBackInt1(&UP_Counter);
 8bc:	88 e3       	ldi	r24, 0x38	; 56
 8be:	94 e0       	ldi	r25, 0x04	; 4
 8c0:	0e 94 ab 03 	call	0x756	; 0x756 <EXTI_SetCallBackInt1>
	EXTI_SetCallBackInt2(&DOWN_Counter);
 8c4:	80 e4       	ldi	r24, 0x40	; 64
 8c6:	94 e0       	ldi	r25, 0x04	; 4
 8c8:	0e 94 b2 03 	call	0x764	; 0x764 <EXTI_SetCallBackInt2>
	
    while(1)
    {
        if(Counter==0)
 8cc:	80 91 66 00 	lds	r24, 0x0066
 8d0:	88 23       	and	r24, r24
 8d2:	69 f4       	brne	.+26     	; 0x8ee <main+0x5e>
		{
			LED_TurnOFF(LED0_PORT,LED0_PIN);
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	62 e0       	ldi	r22, 0x02	; 2
 8d8:	0e 94 b3 04 	call	0x966	; 0x966 <LED_TurnOFF>
			LED_TurnOFF(LED1_PORT,LED1_PIN);
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	67 e0       	ldi	r22, 0x07	; 7
 8e0:	0e 94 b3 04 	call	0x966	; 0x966 <LED_TurnOFF>
			LED_TurnOFF(LED2_PORT,LED2_PIN);
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	62 e0       	ldi	r22, 0x02	; 2
 8e8:	0e 94 b3 04 	call	0x966	; 0x966 <LED_TurnOFF>
 8ec:	ef cf       	rjmp	.-34     	; 0x8cc <main+0x3c>
		}
		else if (Counter==1)	
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	69 f4       	brne	.+26     	; 0x90c <main+0x7c>
		{
			LED_TurnON(LED0_PORT,LED0_PIN);
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	62 e0       	ldi	r22, 0x02	; 2
 8f6:	0e 94 ab 04 	call	0x956	; 0x956 <LED_TurnON>
			LED_TurnOFF(LED1_PORT,LED1_PIN);
 8fa:	82 e0       	ldi	r24, 0x02	; 2
 8fc:	67 e0       	ldi	r22, 0x07	; 7
 8fe:	0e 94 b3 04 	call	0x966	; 0x966 <LED_TurnOFF>
			LED_TurnOFF(LED2_PORT,LED2_PIN);
 902:	83 e0       	ldi	r24, 0x03	; 3
 904:	62 e0       	ldi	r22, 0x02	; 2
 906:	0e 94 b3 04 	call	0x966	; 0x966 <LED_TurnOFF>
 90a:	e0 cf       	rjmp	.-64     	; 0x8cc <main+0x3c>
		}		
		else if (Counter==2)
 90c:	82 30       	cpi	r24, 0x02	; 2
 90e:	61 f4       	brne	.+24     	; 0x928 <main+0x98>
		{
			LED_TurnON(LED0_PORT,LED0_PIN);
 910:	62 e0       	ldi	r22, 0x02	; 2
 912:	0e 94 ab 04 	call	0x956	; 0x956 <LED_TurnON>
			LED_TurnON(LED1_PORT,LED1_PIN);
 916:	82 e0       	ldi	r24, 0x02	; 2
 918:	67 e0       	ldi	r22, 0x07	; 7
 91a:	0e 94 ab 04 	call	0x956	; 0x956 <LED_TurnON>
			LED_TurnOFF(LED2_PORT,LED2_PIN);
 91e:	83 e0       	ldi	r24, 0x03	; 3
 920:	62 e0       	ldi	r22, 0x02	; 2
 922:	0e 94 b3 04 	call	0x966	; 0x966 <LED_TurnOFF>
 926:	d2 cf       	rjmp	.-92     	; 0x8cc <main+0x3c>
		}
		else if (Counter==3)
 928:	83 30       	cpi	r24, 0x03	; 3
 92a:	81 f6       	brne	.-96     	; 0x8cc <main+0x3c>
		{
			LED_TurnON(LED0_PORT,LED1_PIN);
 92c:	82 e0       	ldi	r24, 0x02	; 2
 92e:	67 e0       	ldi	r22, 0x07	; 7
 930:	0e 94 ab 04 	call	0x956	; 0x956 <LED_TurnON>
			LED_TurnON(LED1_PORT,LED1_PIN);
 934:	82 e0       	ldi	r24, 0x02	; 2
 936:	67 e0       	ldi	r22, 0x07	; 7
 938:	0e 94 ab 04 	call	0x956	; 0x956 <LED_TurnON>
			LED_TurnON(LED2_PORT,LED2_PIN);
 93c:	83 e0       	ldi	r24, 0x03	; 3
 93e:	62 e0       	ldi	r22, 0x02	; 2
 940:	0e 94 ab 04 	call	0x956	; 0x956 <LED_TurnON>
 944:	c3 cf       	rjmp	.-122    	; 0x8cc <main+0x3c>

00000946 <LED_init>:
#include "LED_config.h"


void LED_init(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
 946:	84 30       	cpi	r24, 0x04	; 4
 948:	28 f4       	brcc	.+10     	; 0x954 <LED_init+0xe>
 94a:	68 30       	cpi	r22, 0x08	; 8
 94c:	18 f4       	brcc	.+6      	; 0x954 <LED_init+0xe>
	{
		DIO_SetPinDirection(LedPort,LedPin,DIO_PIN_OUTPUT);
 94e:	41 e0       	ldi	r20, 0x01	; 1
 950:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
 954:	08 95       	ret

00000956 <LED_TurnON>:
}


void LED_TurnON(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
 956:	84 30       	cpi	r24, 0x04	; 4
 958:	28 f4       	brcc	.+10     	; 0x964 <LED_TurnON+0xe>
 95a:	68 30       	cpi	r22, 0x08	; 8
 95c:	18 f4       	brcc	.+6      	; 0x964 <LED_TurnON+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_HIGH);
 95e:	41 e0       	ldi	r20, 0x01	; 1
 960:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
 964:	08 95       	ret

00000966 <LED_TurnOFF>:
}


void LED_TurnOFF(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
 966:	84 30       	cpi	r24, 0x04	; 4
 968:	28 f4       	brcc	.+10     	; 0x974 <LED_TurnOFF+0xe>
 96a:	68 30       	cpi	r22, 0x08	; 8
 96c:	18 f4       	brcc	.+6      	; 0x974 <LED_TurnOFF+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_LOW);
 96e:	40 e0       	ldi	r20, 0x00	; 0
 970:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPinValue>
 974:	08 95       	ret

00000976 <LED_Toggle>:
}


void LED_Toggle(u8 LedPort,u8 LedPin)
{
	 if (LedPort <=3 && LedPin<=7)
 976:	84 30       	cpi	r24, 0x04	; 4
 978:	20 f4       	brcc	.+8      	; 0x982 <LED_Toggle+0xc>
 97a:	68 30       	cpi	r22, 0x08	; 8
 97c:	10 f4       	brcc	.+4      	; 0x982 <LED_Toggle+0xc>
	 {
		DIO_TogglePinValue(LedPort,LedPin);
 97e:	0e 94 75 01 	call	0x2ea	; 0x2ea <DIO_TogglePinValue>
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
