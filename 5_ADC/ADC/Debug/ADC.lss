
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00001256  000012ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  000012fc  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00002138  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000189d  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bc  00000000  00000000  00003b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001085  00000000  00000000  00004331  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  000053b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  00005734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000117b  00000000  00000000  00005d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00006e9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 05 	call	0xbba	; 0xbba <main>
      8a:	0c 94 29 09 	jmp	0x1252	; 0x1252 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
static void (*PRIVATE_PtrCallBackADC) (void) = NULL;

void ADC_init(u8 RefrenceVolt,u8 ADC_Prescaller)
{
	/*	Select reference voltage	*/
	switch (RefrenceVolt)
      92:	82 30       	cpi	r24, 0x02	; 2
      94:	29 f0       	breq	.+10     	; 0xa0 <ADC_init+0xe>
      96:	83 30       	cpi	r24, 0x03	; 3
      98:	49 f0       	breq	.+18     	; 0xac <ADC_init+0x1a>
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	49 f4       	brne	.+18     	; 0xb0 <ADC_init+0x1e>
      9e:	03 c0       	rjmp	.+6      	; 0xa6 <ADC_init+0x14>
	{
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX,REFS0);
      a0:	3e 98       	cbi	0x07, 6	; 7
		CLR_BIT(ADMUX,REFS1);
      a2:	3f 98       	cbi	0x07, 7	; 7
		break;
      a4:	05 c0       	rjmp	.+10     	; 0xb0 <ADC_init+0x1e>
		
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX,REFS0);
      a6:	3e 9a       	sbi	0x07, 6	; 7
		CLR_BIT(ADMUX,REFS1);
      a8:	3f 98       	cbi	0x07, 7	; 7
		break;
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <ADC_init+0x1e>
		
		case ADC_REFERENCE_INTERNAL:
		SET_BIT(ADMUX,REFS0);
      ac:	3e 9a       	sbi	0x07, 6	; 7
		SET_BIT(ADMUX,REFS1);
      ae:	3f 9a       	sbi	0x07, 7	; 7
		break;
	}
	
	/*		ADCR	*/
	CLR_BIT(ADMUX,ADLAR);
      b0:	3d 98       	cbi	0x07, 5	; 7
	
	/*auto trigger mode (1) or single conversion mode (0) */
	CLR_BIT(ADCSRA,ADATE);
      b2:	35 98       	cbi	0x06, 5	; 6
	
	/*	Interrupt enable	*/
	CLR_BIT(ADCSRA,ADIE);
      b4:	33 98       	cbi	0x06, 3	; 6
	
	/*	Prescaller Select 128 for 16MHZ(125 KHZ)	*/
	
	if (ADC_Prescaller >= 2 && ADC_Prescaller <= 128 )
      b6:	86 2f       	mov	r24, r22
      b8:	82 50       	subi	r24, 0x02	; 2
      ba:	8f 37       	cpi	r24, 0x7F	; 127
      bc:	68 f5       	brcc	.+90     	; 0x118 <ADC_init+0x86>
	{
		switch(ADC_Prescaller)
      be:	60 31       	cpi	r22, 0x10	; 16
      c0:	e1 f0       	breq	.+56     	; 0xfa <ADC_init+0x68>
      c2:	61 31       	cpi	r22, 0x11	; 17
      c4:	38 f4       	brcc	.+14     	; 0xd4 <ADC_init+0x42>
      c6:	64 30       	cpi	r22, 0x04	; 4
      c8:	81 f0       	breq	.+32     	; 0xea <ADC_init+0x58>
      ca:	68 30       	cpi	r22, 0x08	; 8
      cc:	91 f0       	breq	.+36     	; 0xf2 <ADC_init+0x60>
      ce:	62 30       	cpi	r22, 0x02	; 2
      d0:	19 f5       	brne	.+70     	; 0x118 <ADC_init+0x86>
      d2:	07 c0       	rjmp	.+14     	; 0xe2 <ADC_init+0x50>
      d4:	60 34       	cpi	r22, 0x40	; 64
      d6:	c9 f0       	breq	.+50     	; 0x10a <ADC_init+0x78>
      d8:	60 38       	cpi	r22, 0x80	; 128
      da:	d9 f0       	breq	.+54     	; 0x112 <ADC_init+0x80>
      dc:	60 32       	cpi	r22, 0x20	; 32
      de:	e1 f4       	brne	.+56     	; 0x118 <ADC_init+0x86>
      e0:	10 c0       	rjmp	.+32     	; 0x102 <ADC_init+0x70>
		{
			case ADC_Prescaller_2:
			CLR_BIT(ADCSRA,ADPS0);
      e2:	30 98       	cbi	0x06, 0	; 6
			CLR_BIT(ADCSRA,ADPS1);
      e4:	31 98       	cbi	0x06, 1	; 6
			CLR_BIT(ADCSRA,ADPS2);
      e6:	32 98       	cbi	0x06, 2	; 6
			break;
      e8:	17 c0       	rjmp	.+46     	; 0x118 <ADC_init+0x86>
			
			case ADC_Prescaller_4:
			CLR_BIT(ADCSRA,ADPS0);
      ea:	30 98       	cbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
      ec:	31 9a       	sbi	0x06, 1	; 6
			CLR_BIT(ADCSRA,ADPS2);
      ee:	32 98       	cbi	0x06, 2	; 6
			break;
      f0:	13 c0       	rjmp	.+38     	; 0x118 <ADC_init+0x86>
			
			case ADC_Prescaller_8:
			SET_BIT(ADCSRA,ADPS0);
      f2:	30 9a       	sbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
      f4:	31 9a       	sbi	0x06, 1	; 6
			CLR_BIT(ADCSRA,ADPS2);
      f6:	32 98       	cbi	0x06, 2	; 6
			break;
      f8:	0f c0       	rjmp	.+30     	; 0x118 <ADC_init+0x86>
			
			case ADC_Prescaller_16:
			CLR_BIT(ADCSRA,ADPS0);
      fa:	30 98       	cbi	0x06, 0	; 6
			CLR_BIT(ADCSRA,ADPS1);
      fc:	31 98       	cbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
      fe:	32 9a       	sbi	0x06, 2	; 6
			break;
     100:	0b c0       	rjmp	.+22     	; 0x118 <ADC_init+0x86>
			
			case ADC_Prescaller_32:
			SET_BIT(ADCSRA,ADPS0);
     102:	30 9a       	sbi	0x06, 0	; 6
			CLR_BIT(ADCSRA,ADPS1);
     104:	31 98       	cbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
     106:	32 9a       	sbi	0x06, 2	; 6
			break;
     108:	07 c0       	rjmp	.+14     	; 0x118 <ADC_init+0x86>
			
			case ADC_Prescaller_64:
			CLR_BIT(ADCSRA,ADPS0);
     10a:	30 98       	cbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
     10c:	31 9a       	sbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
     10e:	32 9a       	sbi	0x06, 2	; 6
			break;
     110:	03 c0       	rjmp	.+6      	; 0x118 <ADC_init+0x86>
			
			case ADC_Prescaller_128:
			SET_BIT(ADCSRA,ADPS0);
     112:	30 9a       	sbi	0x06, 0	; 6
			SET_BIT(ADCSRA,ADPS1);
     114:	31 9a       	sbi	0x06, 1	; 6
			SET_BIT(ADCSRA,ADPS2);
     116:	32 9a       	sbi	0x06, 2	; 6
	{
		//No Thing 
	}
	
	/*Enable ADC */                          //best in last line in function
	SET_BIT(ADCSRA,ADEN);
     118:	37 9a       	sbi	0x06, 7	; 6
}
     11a:	08 95       	ret

0000011c <ADC_ReadDigitalValue>:

void ADC_ReadDigitalValue(u8 ChannelId ,u16* DigitalValue)
{
	if( DigitalValue != NULL && ChannelId <32 )
     11c:	61 15       	cp	r22, r1
     11e:	71 05       	cpc	r23, r1
     120:	09 f4       	brne	.+2      	; 0x124 <ADC_ReadDigitalValue+0x8>
     122:	4e c0       	rjmp	.+156    	; 0x1c0 <ADC_ReadDigitalValue+0xa4>
     124:	80 32       	cpi	r24, 0x20	; 32
     126:	08 f0       	brcs	.+2      	; 0x12a <ADC_ReadDigitalValue+0xe>
     128:	4b c0       	rjmp	.+150    	; 0x1c0 <ADC_ReadDigitalValue+0xa4>
		/*	type without 32 switch case but take care about #define of channel id */
// 		ADMUX & = 0xE0;
// 		ADMUX | = ChannelId;


		switch (ChannelId)
     12a:	83 30       	cpi	r24, 0x03	; 3
     12c:	11 f1       	breq	.+68     	; 0x172 <ADC_ReadDigitalValue+0x56>
     12e:	84 30       	cpi	r24, 0x04	; 4
     130:	28 f4       	brcc	.+10     	; 0x13c <ADC_ReadDigitalValue+0x20>
     132:	81 30       	cpi	r24, 0x01	; 1
     134:	91 f0       	breq	.+36     	; 0x15a <ADC_ReadDigitalValue+0x3e>
     136:	82 30       	cpi	r24, 0x02	; 2
     138:	b0 f4       	brcc	.+44     	; 0x166 <ADC_ReadDigitalValue+0x4a>
     13a:	09 c0       	rjmp	.+18     	; 0x14e <ADC_ReadDigitalValue+0x32>
     13c:	85 30       	cpi	r24, 0x05	; 5
     13e:	29 f1       	breq	.+74     	; 0x18a <ADC_ReadDigitalValue+0x6e>
     140:	85 30       	cpi	r24, 0x05	; 5
     142:	e8 f0       	brcs	.+58     	; 0x17e <ADC_ReadDigitalValue+0x62>
     144:	86 30       	cpi	r24, 0x06	; 6
     146:	39 f1       	breq	.+78     	; 0x196 <ADC_ReadDigitalValue+0x7a>
     148:	87 30       	cpi	r24, 0x07	; 7
     14a:	81 f5       	brne	.+96     	; 0x1ac <ADC_ReadDigitalValue+0x90>
     14c:	2a c0       	rjmp	.+84     	; 0x1a2 <ADC_ReadDigitalValue+0x86>
		{
			case ADC_CHANNEL_0:
			CLR_BIT(ADMUX,MUX0);
     14e:	38 98       	cbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
     150:	39 98       	cbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
     152:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     154:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     156:	3c 98       	cbi	0x07, 4	; 7
			break;
     158:	29 c0       	rjmp	.+82     	; 0x1ac <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_1:
			SET_BIT(ADMUX,MUX0);
     15a:	38 9a       	sbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
     15c:	39 98       	cbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
     15e:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     160:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     162:	3c 98       	cbi	0x07, 4	; 7
			break;
     164:	23 c0       	rjmp	.+70     	; 0x1ac <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_2:
			CLR_BIT(ADMUX,MUX0);
     166:	38 98       	cbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
     168:	39 9a       	sbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
     16a:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     16c:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     16e:	3c 98       	cbi	0x07, 4	; 7
			break;
     170:	1d c0       	rjmp	.+58     	; 0x1ac <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_3:
			SET_BIT(ADMUX,MUX0);
     172:	38 9a       	sbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
     174:	39 9a       	sbi	0x07, 1	; 7
			CLR_BIT(ADMUX,MUX2);
     176:	3a 98       	cbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     178:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     17a:	3c 98       	cbi	0x07, 4	; 7
			break;
     17c:	17 c0       	rjmp	.+46     	; 0x1ac <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_4:
			CLR_BIT(ADMUX,MUX0);
     17e:	38 98       	cbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
     180:	39 98       	cbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
     182:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     184:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     186:	3c 98       	cbi	0x07, 4	; 7
			break;
     188:	11 c0       	rjmp	.+34     	; 0x1ac <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_5:
			SET_BIT(ADMUX,MUX0);
     18a:	38 9a       	sbi	0x07, 0	; 7
			CLR_BIT(ADMUX,MUX1);
     18c:	39 98       	cbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
     18e:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     190:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     192:	3c 98       	cbi	0x07, 4	; 7
			break;
     194:	0b c0       	rjmp	.+22     	; 0x1ac <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_6:
			CLR_BIT(ADMUX,MUX0);
     196:	38 98       	cbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
     198:	39 9a       	sbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
     19a:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     19c:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     19e:	3c 98       	cbi	0x07, 4	; 7
			break;
     1a0:	05 c0       	rjmp	.+10     	; 0x1ac <ADC_ReadDigitalValue+0x90>
			
			case ADC_CHANNEL_7:
			SET_BIT(ADMUX,MUX0);
     1a2:	38 9a       	sbi	0x07, 0	; 7
			SET_BIT(ADMUX,MUX1);
     1a4:	39 9a       	sbi	0x07, 1	; 7
			SET_BIT(ADMUX,MUX2);
     1a6:	3a 9a       	sbi	0x07, 2	; 7
			CLR_BIT(ADMUX,MUX3);
     1a8:	3b 98       	cbi	0x07, 3	; 7
			CLR_BIT(ADMUX,MUX4);
     1aa:	3c 98       	cbi	0x07, 4	; 7
			break;
		} 
		SET_BIT(ADCSRA,ADSC);                //start conversion 
     1ac:	36 9a       	sbi	0x06, 6	; 6
		
		while( 0 == GET_BIT(ADCSRA,ADIF) );  //wait for flag set 1
     1ae:	86 b1       	in	r24, 0x06	; 6
     1b0:	84 ff       	sbrs	r24, 4
     1b2:	fd cf       	rjmp	.-6      	; 0x1ae <ADC_ReadDigitalValue+0x92>
		
		*DigitalValue=ADC_DATA;
     1b4:	84 b1       	in	r24, 0x04	; 4
     1b6:	95 b1       	in	r25, 0x05	; 5
     1b8:	fb 01       	movw	r30, r22
     1ba:	91 83       	std	Z+1, r25	; 0x01
     1bc:	80 83       	st	Z, r24
		
		SET_BIT(ADCSRA,ADIF);                   //TO Clear flag again 
     1be:	34 9a       	sbi	0x06, 4	; 6
     1c0:	08 95       	ret

000001c2 <ADC_SetCallBackADC>:
}


void ADC_SetCallBackADC (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
     1c2:	00 97       	sbiw	r24, 0x00	; 0
     1c4:	21 f0       	breq	.+8      	; 0x1ce <ADC_SetCallBackADC+0xc>
	{
		PRIVATE_PtrCallBackADC=PtrToFunc;
     1c6:	90 93 73 00 	sts	0x0073, r25
     1ca:	80 93 72 00 	sts	0x0072, r24
     1ce:	08 95       	ret

000001d0 <__vector_16>:
	}
}

void  __vector_16(void) __attribute__((signal));
void  __vector_16(void)
{
     1d0:	1f 92       	push	r1
     1d2:	0f 92       	push	r0
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	0f 92       	push	r0
     1d8:	11 24       	eor	r1, r1
     1da:	2f 93       	push	r18
     1dc:	3f 93       	push	r19
     1de:	4f 93       	push	r20
     1e0:	5f 93       	push	r21
     1e2:	6f 93       	push	r22
     1e4:	7f 93       	push	r23
     1e6:	8f 93       	push	r24
     1e8:	9f 93       	push	r25
     1ea:	af 93       	push	r26
     1ec:	bf 93       	push	r27
     1ee:	ef 93       	push	r30
     1f0:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackADC != NULL)
     1f2:	e0 91 72 00 	lds	r30, 0x0072
     1f6:	f0 91 73 00 	lds	r31, 0x0073
     1fa:	30 97       	sbiw	r30, 0x00	; 0
     1fc:	09 f0       	breq	.+2      	; 0x200 <__vector_16+0x30>
	{
		PRIVATE_PtrCallBackADC();
     1fe:	09 95       	icall
	}
     200:	ff 91       	pop	r31
     202:	ef 91       	pop	r30
     204:	bf 91       	pop	r27
     206:	af 91       	pop	r26
     208:	9f 91       	pop	r25
     20a:	8f 91       	pop	r24
     20c:	7f 91       	pop	r23
     20e:	6f 91       	pop	r22
     210:	5f 91       	pop	r21
     212:	4f 91       	pop	r20
     214:	3f 91       	pop	r19
     216:	2f 91       	pop	r18
     218:	0f 90       	pop	r0
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	0f 90       	pop	r0
     21e:	1f 90       	pop	r1
     220:	18 95       	reti

00000222 <DIO_SetPinDirection>:


DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	08 f0       	brcs	.+2      	; 0x228 <DIO_SetPinDirection+0x6>
     226:	8b c0       	rjmp	.+278    	; 0x33e <DIO_SetPinDirection+0x11c>
     228:	68 30       	cpi	r22, 0x08	; 8
     22a:	08 f0       	brcs	.+2      	; 0x22e <DIO_SetPinDirection+0xc>
     22c:	8a c0       	rjmp	.+276    	; 0x342 <DIO_SetPinDirection+0x120>
     22e:	42 30       	cpi	r20, 0x02	; 2
     230:	08 f0       	brcs	.+2      	; 0x234 <DIO_SetPinDirection+0x12>
     232:	89 c0       	rjmp	.+274    	; 0x346 <DIO_SetPinDirection+0x124>
	{
    	switch(PortId)
     234:	81 30       	cpi	r24, 0x01	; 1
     236:	41 f1       	breq	.+80     	; 0x288 <DIO_SetPinDirection+0x66>
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	38 f0       	brcs	.+14     	; 0x24a <DIO_SetPinDirection+0x28>
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	09 f4       	brne	.+2      	; 0x242 <DIO_SetPinDirection+0x20>
     240:	41 c0       	rjmp	.+130    	; 0x2c4 <DIO_SetPinDirection+0xa2>
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	09 f0       	breq	.+2      	; 0x248 <DIO_SetPinDirection+0x26>
     246:	81 c0       	rjmp	.+258    	; 0x34a <DIO_SetPinDirection+0x128>
     248:	5b c0       	rjmp	.+182    	; 0x300 <DIO_SetPinDirection+0xde>
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     24a:	41 30       	cpi	r20, 0x01	; 1
     24c:	71 f4       	brne	.+28     	; 0x26a <DIO_SetPinDirection+0x48>
     24e:	2a b3       	in	r18, 0x1a	; 26
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	ac 01       	movw	r20, r24
     256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPinDirection+0x3a>
     258:	44 0f       	add	r20, r20
     25a:	55 1f       	adc	r21, r21
     25c:	6a 95       	dec	r22
     25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPinDirection+0x36>
     260:	ba 01       	movw	r22, r20
     262:	62 2b       	or	r22, r18
     264:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
	{
    	switch(PortId)
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     26a:	2a b3       	in	r18, 0x1a	; 26
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	ac 01       	movw	r20, r24
     272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_SetPinDirection+0x56>
     274:	44 0f       	add	r20, r20
     276:	55 1f       	adc	r21, r21
     278:	6a 95       	dec	r22
     27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_SetPinDirection+0x52>
     27c:	ba 01       	movw	r22, r20
     27e:	60 95       	com	r22
     280:	62 23       	and	r22, r18
     282:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     288:	41 30       	cpi	r20, 0x01	; 1
     28a:	69 f4       	brne	.+26     	; 0x2a6 <DIO_SetPinDirection+0x84>
     28c:	47 b3       	in	r20, 0x17	; 23
     28e:	21 e0       	ldi	r18, 0x01	; 1
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	c9 01       	movw	r24, r18
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_SetPinDirection+0x78>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	6a 95       	dec	r22
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_SetPinDirection+0x74>
     29e:	84 2b       	or	r24, r20
     2a0:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     2a6:	27 b3       	in	r18, 0x17	; 23
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	ac 01       	movw	r20, r24
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_SetPinDirection+0x92>
     2b0:	44 0f       	add	r20, r20
     2b2:	55 1f       	adc	r21, r21
     2b4:	6a 95       	dec	r22
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_SetPinDirection+0x8e>
     2b8:	ba 01       	movw	r22, r20
     2ba:	60 95       	com	r22
     2bc:	62 23       	and	r22, r18
     2be:	67 bb       	out	0x17, r22	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     2c4:	41 30       	cpi	r20, 0x01	; 1
     2c6:	69 f4       	brne	.+26     	; 0x2e2 <DIO_SetPinDirection+0xc0>
     2c8:	44 b3       	in	r20, 0x14	; 20
     2ca:	21 e0       	ldi	r18, 0x01	; 1
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	c9 01       	movw	r24, r18
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_SetPinDirection+0xb4>
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	6a 95       	dec	r22
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_SetPinDirection+0xb0>
     2da:	84 2b       	or	r24, r20
     2dc:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     2e2:	24 b3       	in	r18, 0x14	; 20
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	ac 01       	movw	r20, r24
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_SetPinDirection+0xce>
     2ec:	44 0f       	add	r20, r20
     2ee:	55 1f       	adc	r21, r21
     2f0:	6a 95       	dec	r22
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_SetPinDirection+0xca>
     2f4:	ba 01       	movw	r22, r20
     2f6:	60 95       	com	r22
     2f8:	62 23       	and	r22, r18
     2fa:	64 bb       	out	0x14, r22	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     300:	41 30       	cpi	r20, 0x01	; 1
     302:	71 f4       	brne	.+28     	; 0x320 <DIO_SetPinDirection+0xfe>
     304:	21 b3       	in	r18, 0x11	; 17
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	ac 01       	movw	r20, r24
     30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_SetPinDirection+0xf0>
     30e:	44 0f       	add	r20, r20
     310:	55 1f       	adc	r21, r21
     312:	6a 95       	dec	r22
     314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_SetPinDirection+0xec>
     316:	ba 01       	movw	r22, r20
     318:	62 2b       	or	r22, r18
     31a:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     320:	21 b3       	in	r18, 0x11	; 17
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	ac 01       	movw	r20, r24
     328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_SetPinDirection+0x10c>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	6a 95       	dec	r22
     330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_SetPinDirection+0x108>
     332:	ba 01       	movw	r22, r20
     334:	60 95       	com	r22
     336:	62 23       	and	r22, r18
     338:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	08 95       	ret
		   break;
	    }	
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	08 95       	ret
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	08 95       	ret
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	08 95       	ret



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     34a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     34c:	08 95       	ret

0000034e <DIO_SetPinValue>:

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
     34e:	84 30       	cpi	r24, 0x04	; 4
     350:	08 f0       	brcs	.+2      	; 0x354 <DIO_SetPinValue+0x6>
     352:	8b c0       	rjmp	.+278    	; 0x46a <DIO_SetPinValue+0x11c>
     354:	68 30       	cpi	r22, 0x08	; 8
     356:	08 f0       	brcs	.+2      	; 0x35a <DIO_SetPinValue+0xc>
     358:	8a c0       	rjmp	.+276    	; 0x46e <DIO_SetPinValue+0x120>
     35a:	42 30       	cpi	r20, 0x02	; 2
     35c:	08 f0       	brcs	.+2      	; 0x360 <DIO_SetPinValue+0x12>
     35e:	89 c0       	rjmp	.+274    	; 0x472 <DIO_SetPinValue+0x124>
	{
			switch (PortId)
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	41 f1       	breq	.+80     	; 0x3b4 <DIO_SetPinValue+0x66>
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	38 f0       	brcs	.+14     	; 0x376 <DIO_SetPinValue+0x28>
     368:	82 30       	cpi	r24, 0x02	; 2
     36a:	09 f4       	brne	.+2      	; 0x36e <DIO_SetPinValue+0x20>
     36c:	41 c0       	rjmp	.+130    	; 0x3f0 <DIO_SetPinValue+0xa2>
     36e:	83 30       	cpi	r24, 0x03	; 3
     370:	09 f0       	breq	.+2      	; 0x374 <DIO_SetPinValue+0x26>
     372:	81 c0       	rjmp	.+258    	; 0x476 <DIO_SetPinValue+0x128>
     374:	5b c0       	rjmp	.+182    	; 0x42c <DIO_SetPinValue+0xde>
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     376:	41 30       	cpi	r20, 0x01	; 1
     378:	71 f4       	brne	.+28     	; 0x396 <DIO_SetPinValue+0x48>
     37a:	2b b3       	in	r18, 0x1b	; 27
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	ac 01       	movw	r20, r24
     382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_SetPinValue+0x3a>
     384:	44 0f       	add	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_SetPinValue+0x36>
     38c:	ba 01       	movw	r22, r20
     38e:	62 2b       	or	r22, r18
     390:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
	{
			switch (PortId)
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     396:	2b b3       	in	r18, 0x1b	; 27
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	ac 01       	movw	r20, r24
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_SetPinValue+0x56>
     3a0:	44 0f       	add	r20, r20
     3a2:	55 1f       	adc	r21, r21
     3a4:	6a 95       	dec	r22
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_SetPinValue+0x52>
     3a8:	ba 01       	movw	r22, r20
     3aa:	60 95       	com	r22
     3ac:	62 23       	and	r22, r18
     3ae:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     3b4:	41 30       	cpi	r20, 0x01	; 1
     3b6:	69 f4       	brne	.+26     	; 0x3d2 <DIO_SetPinValue+0x84>
     3b8:	48 b3       	in	r20, 0x18	; 24
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	c9 01       	movw	r24, r18
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_SetPinValue+0x78>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	6a 95       	dec	r22
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_SetPinValue+0x74>
     3ca:	84 2b       	or	r24, r20
     3cc:	88 bb       	out	0x18, r24	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     3d2:	28 b3       	in	r18, 0x18	; 24
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	ac 01       	movw	r20, r24
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_SetPinValue+0x92>
     3dc:	44 0f       	add	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	6a 95       	dec	r22
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_SetPinValue+0x8e>
     3e4:	ba 01       	movw	r22, r20
     3e6:	60 95       	com	r22
     3e8:	62 23       	and	r22, r18
     3ea:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     3f0:	41 30       	cpi	r20, 0x01	; 1
     3f2:	69 f4       	brne	.+26     	; 0x40e <DIO_SetPinValue+0xc0>
     3f4:	45 b3       	in	r20, 0x15	; 21
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	c9 01       	movw	r24, r18
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_SetPinValue+0xb4>
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	6a 95       	dec	r22
     404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_SetPinValue+0xb0>
     406:	84 2b       	or	r24, r20
     408:	85 bb       	out	0x15, r24	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     40e:	25 b3       	in	r18, 0x15	; 21
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	ac 01       	movw	r20, r24
     416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_SetPinValue+0xce>
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	6a 95       	dec	r22
     41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_SetPinValue+0xca>
     420:	ba 01       	movw	r22, r20
     422:	60 95       	com	r22
     424:	62 23       	and	r22, r18
     426:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     42c:	41 30       	cpi	r20, 0x01	; 1
     42e:	71 f4       	brne	.+28     	; 0x44c <DIO_SetPinValue+0xfe>
     430:	22 b3       	in	r18, 0x12	; 18
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	ac 01       	movw	r20, r24
     438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_SetPinValue+0xf0>
     43a:	44 0f       	add	r20, r20
     43c:	55 1f       	adc	r21, r21
     43e:	6a 95       	dec	r22
     440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_SetPinValue+0xec>
     442:	ba 01       	movw	r22, r20
     444:	62 2b       	or	r22, r18
     446:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     44c:	22 b3       	in	r18, 0x12	; 18
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	ac 01       	movw	r20, r24
     454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_SetPinValue+0x10c>
     456:	44 0f       	add	r20, r20
     458:	55 1f       	adc	r21, r21
     45a:	6a 95       	dec	r22
     45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_SetPinValue+0x108>
     45e:	ba 01       	movw	r22, r20
     460:	60 95       	com	r22
     462:	62 23       	and	r22, r18
     464:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	08 95       	ret
			    break;
			}	
		} 
	else
	{
		ErrorStatus = DIO_NOK;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	08 95       	ret
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	08 95       	ret
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	08 95       	ret
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     476:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     478:	08 95       	ret

0000047a <DIO_TogglePinValue>:
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))  //edit all
     47a:	84 30       	cpi	r24, 0x04	; 4
     47c:	08 f0       	brcs	.+2      	; 0x480 <DIO_TogglePinValue+0x6>
     47e:	45 c0       	rjmp	.+138    	; 0x50a <DIO_TogglePinValue+0x90>
     480:	68 30       	cpi	r22, 0x08	; 8
     482:	08 f0       	brcs	.+2      	; 0x486 <DIO_TogglePinValue+0xc>
     484:	44 c0       	rjmp	.+136    	; 0x50e <DIO_TogglePinValue+0x94>
	{
		switch (PortId)
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	b1 f0       	breq	.+44     	; 0x4b6 <DIO_TogglePinValue+0x3c>
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	30 f0       	brcs	.+12     	; 0x49a <DIO_TogglePinValue+0x20>
     48e:	82 30       	cpi	r24, 0x02	; 2
     490:	01 f1       	breq	.+64     	; 0x4d2 <DIO_TogglePinValue+0x58>
     492:	83 30       	cpi	r24, 0x03	; 3
     494:	09 f0       	breq	.+2      	; 0x498 <DIO_TogglePinValue+0x1e>
     496:	3d c0       	rjmp	.+122    	; 0x512 <DIO_TogglePinValue+0x98>
     498:	2a c0       	rjmp	.+84     	; 0x4ee <DIO_TogglePinValue+0x74>
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
     49a:	2b b3       	in	r18, 0x1b	; 27
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	ac 01       	movw	r20, r24
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_TogglePinValue+0x2e>
     4a4:	44 0f       	add	r20, r20
     4a6:	55 1f       	adc	r21, r21
     4a8:	6a 95       	dec	r22
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_TogglePinValue+0x2a>
     4ac:	ba 01       	movw	r22, r20
     4ae:	62 27       	eor	r22, r18
     4b0:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     4b2:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
			break;
     4b4:	08 95       	ret
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
     4b6:	28 b3       	in	r18, 0x18	; 24
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	ac 01       	movw	r20, r24
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_TogglePinValue+0x4a>
     4c0:	44 0f       	add	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	6a 95       	dec	r22
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_TogglePinValue+0x46>
     4c8:	ba 01       	movw	r22, r20
     4ca:	62 27       	eor	r22, r18
     4cc:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     4ce:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTA_REG,PinId);
			break;
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
			break;
     4d0:	08 95       	ret
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
     4d2:	25 b3       	in	r18, 0x15	; 21
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	ac 01       	movw	r20, r24
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_TogglePinValue+0x66>
     4dc:	44 0f       	add	r20, r20
     4de:	55 1f       	adc	r21, r21
     4e0:	6a 95       	dec	r22
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_TogglePinValue+0x62>
     4e4:	ba 01       	movw	r22, r20
     4e6:	62 27       	eor	r22, r18
     4e8:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     4ea:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTB_REG,PinId);
			break;
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
			break;
     4ec:	08 95       	ret
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
     4ee:	22 b3       	in	r18, 0x12	; 18
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	ac 01       	movw	r20, r24
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_TogglePinValue+0x82>
     4f8:	44 0f       	add	r20, r20
     4fa:	55 1f       	adc	r21, r21
     4fc:	6a 95       	dec	r22
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_TogglePinValue+0x7e>
     500:	ba 01       	movw	r22, r20
     502:	62 27       	eor	r22, r18
     504:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     506:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTC_REG,PinId);
			break;
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
			break;
     508:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	08 95       	ret
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	08 95       	ret
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     512:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     514:	08 95       	ret

00000516 <DIO_ReadValue>:
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue!=NULL)) //wild pointer 
     516:	84 30       	cpi	r24, 0x04	; 4
     518:	08 f0       	brcs	.+2      	; 0x51c <DIO_ReadValue+0x6>
     51a:	49 c0       	rjmp	.+146    	; 0x5ae <DIO_ReadValue+0x98>
     51c:	68 30       	cpi	r22, 0x08	; 8
     51e:	08 f0       	brcs	.+2      	; 0x522 <DIO_ReadValue+0xc>
     520:	48 c0       	rjmp	.+144    	; 0x5b2 <DIO_ReadValue+0x9c>
     522:	41 15       	cp	r20, r1
     524:	51 05       	cpc	r21, r1
     526:	09 f4       	brne	.+2      	; 0x52a <DIO_ReadValue+0x14>
     528:	46 c0       	rjmp	.+140    	; 0x5b6 <DIO_ReadValue+0xa0>
	{
		switch (PortId)
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	b1 f0       	breq	.+44     	; 0x55a <DIO_ReadValue+0x44>
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	30 f0       	brcs	.+12     	; 0x53e <DIO_ReadValue+0x28>
     532:	82 30       	cpi	r24, 0x02	; 2
     534:	01 f1       	breq	.+64     	; 0x576 <DIO_ReadValue+0x60>
     536:	83 30       	cpi	r24, 0x03	; 3
     538:	09 f0       	breq	.+2      	; 0x53c <DIO_ReadValue+0x26>
     53a:	3f c0       	rjmp	.+126    	; 0x5ba <DIO_ReadValue+0xa4>
     53c:	2a c0       	rjmp	.+84     	; 0x592 <DIO_ReadValue+0x7c>
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
     53e:	89 b3       	in	r24, 0x19	; 25
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	9c 01       	movw	r18, r24
     544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_ReadValue+0x34>
     546:	35 95       	asr	r19
     548:	27 95       	ror	r18
     54a:	6a 95       	dec	r22
     54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_ReadValue+0x30>
     54e:	b9 01       	movw	r22, r18
     550:	61 70       	andi	r22, 0x01	; 1
     552:	fa 01       	movw	r30, r20
     554:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     556:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
     558:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
     55a:	86 b3       	in	r24, 0x16	; 22
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	9c 01       	movw	r18, r24
     560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_ReadValue+0x50>
     562:	35 95       	asr	r19
     564:	27 95       	ror	r18
     566:	6a 95       	dec	r22
     568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_ReadValue+0x4c>
     56a:	b9 01       	movw	r22, r18
     56c:	61 70       	andi	r22, 0x01	; 1
     56e:	fa 01       	movw	r30, r20
     570:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     572:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
     574:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
     576:	83 b3       	in	r24, 0x13	; 19
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	9c 01       	movw	r18, r24
     57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_ReadValue+0x6c>
     57e:	35 95       	asr	r19
     580:	27 95       	ror	r18
     582:	6a 95       	dec	r22
     584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_ReadValue+0x68>
     586:	b9 01       	movw	r22, r18
     588:	61 70       	andi	r22, 0x01	; 1
     58a:	fa 01       	movw	r30, r20
     58c:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     58e:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
     590:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
     592:	80 b3       	in	r24, 0x10	; 16
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	9c 01       	movw	r18, r24
     598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_ReadValue+0x88>
     59a:	35 95       	asr	r19
     59c:	27 95       	ror	r18
     59e:	6a 95       	dec	r22
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_ReadValue+0x84>
     5a2:	b9 01       	movw	r22, r18
     5a4:	61 70       	andi	r22, 0x01	; 1
     5a6:	fa 01       	movw	r30, r20
     5a8:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     5aa:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
			break;
     5ac:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	08 95       	ret
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	08 95       	ret
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	08 95       	ret
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     5ba:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     5bc:	08 95       	ret

000005be <DIO_activePinInPullUpResistance>:
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	 if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
     5be:	84 30       	cpi	r24, 0x04	; 4
     5c0:	08 f0       	brcs	.+2      	; 0x5c4 <DIO_activePinInPullUpResistance+0x6>
     5c2:	45 c0       	rjmp	.+138    	; 0x64e <DIO_activePinInPullUpResistance+0x90>
     5c4:	68 30       	cpi	r22, 0x08	; 8
     5c6:	08 f0       	brcs	.+2      	; 0x5ca <DIO_activePinInPullUpResistance+0xc>
     5c8:	44 c0       	rjmp	.+136    	; 0x652 <DIO_activePinInPullUpResistance+0x94>
	 {
		 switch(PortId)
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	b1 f0       	breq	.+44     	; 0x5fa <DIO_activePinInPullUpResistance+0x3c>
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	30 f0       	brcs	.+12     	; 0x5de <DIO_activePinInPullUpResistance+0x20>
     5d2:	82 30       	cpi	r24, 0x02	; 2
     5d4:	01 f1       	breq	.+64     	; 0x616 <DIO_activePinInPullUpResistance+0x58>
     5d6:	83 30       	cpi	r24, 0x03	; 3
     5d8:	09 f0       	breq	.+2      	; 0x5dc <DIO_activePinInPullUpResistance+0x1e>
     5da:	3d c0       	rjmp	.+122    	; 0x656 <DIO_activePinInPullUpResistance+0x98>
     5dc:	2a c0       	rjmp	.+84     	; 0x632 <DIO_activePinInPullUpResistance+0x74>
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
     5de:	2b b3       	in	r18, 0x1b	; 27
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	ac 01       	movw	r20, r24
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_activePinInPullUpResistance+0x2e>
     5e8:	44 0f       	add	r20, r20
     5ea:	55 1f       	adc	r21, r21
     5ec:	6a 95       	dec	r22
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_activePinInPullUpResistance+0x2a>
     5f0:	ba 01       	movw	r22, r20
     5f2:	62 2b       	or	r22, r18
     5f4:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch(PortId)
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
			 break;
     5f8:	08 95       	ret
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
     5fa:	28 b3       	in	r18, 0x18	; 24
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	ac 01       	movw	r20, r24
     602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_activePinInPullUpResistance+0x4a>
     604:	44 0f       	add	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	6a 95       	dec	r22
     60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_activePinInPullUpResistance+0x46>
     60c:	ba 01       	movw	r22, r20
     60e:	62 2b       	or	r22, r18
     610:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     612:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTA_REG,PinId);
			 break;
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
			 break;
     614:	08 95       	ret
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
     616:	25 b3       	in	r18, 0x15	; 21
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	ac 01       	movw	r20, r24
     61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_activePinInPullUpResistance+0x66>
     620:	44 0f       	add	r20, r20
     622:	55 1f       	adc	r21, r21
     624:	6a 95       	dec	r22
     626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_activePinInPullUpResistance+0x62>
     628:	ba 01       	movw	r22, r20
     62a:	62 2b       	or	r22, r18
     62c:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     62e:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTB_REG,PinId);
			 break;
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
			 break;
     630:	08 95       	ret
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
     632:	22 b3       	in	r18, 0x12	; 18
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	ac 01       	movw	r20, r24
     63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_activePinInPullUpResistance+0x82>
     63c:	44 0f       	add	r20, r20
     63e:	55 1f       	adc	r21, r21
     640:	6a 95       	dec	r22
     642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_activePinInPullUpResistance+0x7e>
     644:	ba 01       	movw	r22, r20
     646:	62 2b       	or	r22, r18
     648:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     64a:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTC_REG,PinId);
			 break;
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
			 break;
     64c:	08 95       	ret
	      } 
	 }	 
	 else
	 {
		ErrorStatus = DIO_NOK;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	08 95       	ret
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	08 95       	ret
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     656:	80 e0       	ldi	r24, 0x00	; 0
	 else
	 {
		ErrorStatus = DIO_NOK;
	 }
	 return ErrorStatus;
}
     658:	08 95       	ret

0000065a <DIO_setPortDirection>:


DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     65a:	84 30       	cpi	r24, 0x04	; 4
     65c:	a8 f5       	brcc	.+106    	; 0x6c8 <DIO_setPortDirection+0x6e>
	{
		switch(PortId)
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	91 f0       	breq	.+36     	; 0x686 <DIO_setPortDirection+0x2c>
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	28 f0       	brcs	.+10     	; 0x670 <DIO_setPortDirection+0x16>
     666:	82 30       	cpi	r24, 0x02	; 2
     668:	c9 f0       	breq	.+50     	; 0x69c <DIO_setPortDirection+0x42>
     66a:	83 30       	cpi	r24, 0x03	; 3
     66c:	79 f5       	brne	.+94     	; 0x6cc <DIO_setPortDirection+0x72>
     66e:	21 c0       	rjmp	.+66     	; 0x6b2 <DIO_setPortDirection+0x58>
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
     670:	6f 3f       	cpi	r22, 0xFF	; 255
     672:	29 f4       	brne	.+10     	; 0x67e <DIO_setPortDirection+0x24>
     674:	8a b3       	in	r24, 0x1a	; 26
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	8a bb       	out	0x1a, r24	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	08 95       	ret
	if ( (PortId<=DIO_PORTD))
	{
		switch(PortId)
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
     67e:	8a b3       	in	r24, 0x1a	; 26
     680:	1a ba       	out	0x1a, r1	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
     686:	6f 3f       	cpi	r22, 0xFF	; 255
     688:	29 f4       	brne	.+10     	; 0x694 <DIO_setPortDirection+0x3a>
     68a:	87 b3       	in	r24, 0x17	; 23
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
     694:	87 b3       	in	r24, 0x17	; 23
     696:	17 ba       	out	0x17, r1	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
     69c:	6f 3f       	cpi	r22, 0xFF	; 255
     69e:	29 f4       	brne	.+10     	; 0x6aa <DIO_setPortDirection+0x50>
     6a0:	84 b3       	in	r24, 0x14	; 20
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
     6aa:	84 b3       	in	r24, 0x14	; 20
     6ac:	14 ba       	out	0x14, r1	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
     6b2:	6f 3f       	cpi	r22, 0xFF	; 255
     6b4:	29 f4       	brne	.+10     	; 0x6c0 <DIO_setPortDirection+0x66>
     6b6:	81 b3       	in	r24, 0x11	; 17
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	81 bb       	out	0x11, r24	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
     6c0:	81 b3       	in	r24, 0x11	; 17
     6c2:	11 ba       	out	0x11, r1	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	08 95       	ret
			break;
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	08 95       	ret



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     6ce:	08 95       	ret

000006d0 <DIO_setPortValue>:


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) )
     6d0:	84 30       	cpi	r24, 0x04	; 4
     6d2:	a8 f4       	brcc	.+42     	; 0x6fe <DIO_setPortValue+0x2e>
	{
		switch(PortId)
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	51 f0       	breq	.+20     	; 0x6ec <DIO_setPortValue+0x1c>
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	28 f0       	brcs	.+10     	; 0x6e6 <DIO_setPortValue+0x16>
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	49 f0       	breq	.+18     	; 0x6f2 <DIO_setPortValue+0x22>
     6e0:	83 30       	cpi	r24, 0x03	; 3
     6e2:	79 f4       	brne	.+30     	; 0x702 <DIO_setPortValue+0x32>
     6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <DIO_setPortValue+0x28>
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
     6e6:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
			break;
     6ea:	08 95       	ret
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
     6ec:	68 bb       	out	0x18, r22	; 24
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     6ee:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG=PortValue;
			break;
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
			break;
     6f0:	08 95       	ret
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
     6f2:	65 bb       	out	0x15, r22	; 21
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG=PortValue;
			break;
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
			break;
     6f6:	08 95       	ret
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
     6f8:	62 bb       	out	0x12, r22	; 18
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     6fa:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG=PortValue;
			break;
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
			break;
     6fc:	08 95       	ret
		}
	}
	else
	{
	ErrorStatus = DIO_NOK;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	08 95       	ret
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     702:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     704:	08 95       	ret

00000706 <DIO_getPortValue>:


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) && (PortValue!=NULL) )
     706:	84 30       	cpi	r24, 0x04	; 4
     708:	00 f5       	brcc	.+64     	; 0x74a <DIO_getPortValue+0x44>
     70a:	61 15       	cp	r22, r1
     70c:	71 05       	cpc	r23, r1
     70e:	f9 f0       	breq	.+62     	; 0x74e <DIO_getPortValue+0x48>
	{
		switch(PortId)
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	61 f0       	breq	.+24     	; 0x72c <DIO_getPortValue+0x26>
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	28 f0       	brcs	.+10     	; 0x722 <DIO_getPortValue+0x1c>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	69 f0       	breq	.+26     	; 0x736 <DIO_getPortValue+0x30>
     71c:	83 30       	cpi	r24, 0x03	; 3
     71e:	c9 f4       	brne	.+50     	; 0x752 <DIO_getPortValue+0x4c>
     720:	0f c0       	rjmp	.+30     	; 0x740 <DIO_getPortValue+0x3a>
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
     722:	8b b3       	in	r24, 0x1b	; 27
     724:	fb 01       	movw	r30, r22
     726:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     728:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
			break;
     72a:	08 95       	ret
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
     72c:	88 b3       	in	r24, 0x18	; 24
     72e:	fb 01       	movw	r30, r22
     730:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     732:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTA_REG;
			break;
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
			break;
     734:	08 95       	ret
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
     736:	85 b3       	in	r24, 0x15	; 21
     738:	fb 01       	movw	r30, r22
     73a:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     73c:	80 e0       	ldi	r24, 0x00	; 0
		    *PortValue =PORTB_REG;
			break;
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
			break;
     73e:	08 95       	ret
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
     740:	82 b3       	in	r24, 0x12	; 18
     742:	fb 01       	movw	r30, r22
     744:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     746:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTC_REG;
			break;
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
			break;
     748:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	08 95       	ret
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     752:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     754:	08 95       	ret

00000756 <DIO_togglePortValue>:


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     756:	84 30       	cpi	r24, 0x04	; 4
     758:	e8 f4       	brcc	.+58     	; 0x794 <DIO_togglePortValue+0x3e>
	{
		switch(PortId)
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	61 f0       	breq	.+24     	; 0x776 <DIO_togglePortValue+0x20>
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	28 f0       	brcs	.+10     	; 0x76c <DIO_togglePortValue+0x16>
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	69 f0       	breq	.+26     	; 0x780 <DIO_togglePortValue+0x2a>
     766:	83 30       	cpi	r24, 0x03	; 3
     768:	b9 f4       	brne	.+46     	; 0x798 <DIO_togglePortValue+0x42>
     76a:	0f c0       	rjmp	.+30     	; 0x78a <DIO_togglePortValue+0x34>
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
     76c:	8b b3       	in	r24, 0x1b	; 27
     76e:	80 95       	com	r24
     770:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     772:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
			break;
     774:	08 95       	ret
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
     776:	88 b3       	in	r24, 0x18	; 24
     778:	80 95       	com	r24
     77a:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     77c:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
			break;
     77e:	08 95       	ret
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
     780:	85 b3       	in	r24, 0x15	; 21
     782:	80 95       	com	r24
     784:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     786:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
			break;
     788:	08 95       	ret
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
     78a:	82 b3       	in	r24, 0x12	; 18
     78c:	80 95       	com	r24
     78e:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     790:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
			break;
     792:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	08 95       	ret
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     798:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     79a:	08 95       	ret

0000079c <DIO_activePortInPullUpResistance>:


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     79c:	84 30       	cpi	r24, 0x04	; 4
     79e:	e8 f4       	brcc	.+58     	; 0x7da <DIO_activePortInPullUpResistance+0x3e>
	{
		switch(PortId)
     7a0:	81 30       	cpi	r24, 0x01	; 1
     7a2:	61 f0       	breq	.+24     	; 0x7bc <DIO_activePortInPullUpResistance+0x20>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	28 f0       	brcs	.+10     	; 0x7b2 <DIO_activePortInPullUpResistance+0x16>
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	69 f0       	breq	.+26     	; 0x7c6 <DIO_activePortInPullUpResistance+0x2a>
     7ac:	83 30       	cpi	r24, 0x03	; 3
     7ae:	b9 f4       	brne	.+46     	; 0x7de <DIO_activePortInPullUpResistance+0x42>
     7b0:	0f c0       	rjmp	.+30     	; 0x7d0 <DIO_activePortInPullUpResistance+0x34>
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
     7b2:	8b b3       	in	r24, 0x1b	; 27
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
			break;
     7ba:	08 95       	ret
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
     7bc:	88 b3       	in	r24, 0x18	; 24
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
			break;
     7c4:	08 95       	ret
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
     7c6:	85 b3       	in	r24, 0x15	; 21
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
			break;
     7ce:	08 95       	ret
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
     7d0:	82 b3       	in	r24, 0x12	; 18
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     7d6:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
			break;
     7d8:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	08 95       	ret
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     7de:	80 e0       	ldi	r24, 0x00	; 0
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
	
}
     7e0:	08 95       	ret

000007e2 <private_WriteHalfPort>:
	#endif
}


void private_WriteHalfPort (u8 Value)
{
     7e2:	cf 93       	push	r28
     7e4:	c8 2f       	mov	r28, r24
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit0)) ? (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH));
     7e6:	80 fd       	sbrc	r24, 0
     7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <private_WriteHalfPort+0x14>
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	64 e0       	ldi	r22, 0x04	; 4
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <private_WriteHalfPort+0x1e>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	64 e0       	ldi	r22, 0x04	; 4
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit1)) ? (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH));
     800:	8c 2f       	mov	r24, r28
     802:	86 95       	lsr	r24
     804:	80 fd       	sbrc	r24, 0
     806:	06 c0       	rjmp	.+12     	; 0x814 <private_WriteHalfPort+0x32>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	65 e0       	ldi	r22, 0x05	; 5
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
     812:	05 c0       	rjmp	.+10     	; 0x81e <private_WriteHalfPort+0x3c>
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	65 e0       	ldi	r22, 0x05	; 5
     818:	41 e0       	ldi	r20, 0x01	; 1
     81a:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit2)) ? (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH));
     81e:	8c 2f       	mov	r24, r28
     820:	86 95       	lsr	r24
     822:	86 95       	lsr	r24
     824:	80 fd       	sbrc	r24, 0
     826:	06 c0       	rjmp	.+12     	; 0x834 <private_WriteHalfPort+0x52>
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	66 e0       	ldi	r22, 0x06	; 6
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
     832:	05 c0       	rjmp	.+10     	; 0x83e <private_WriteHalfPort+0x5c>
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	66 e0       	ldi	r22, 0x06	; 6
     838:	41 e0       	ldi	r20, 0x01	; 1
     83a:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit3)) ? (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH));
     83e:	c6 95       	lsr	r28
     840:	c6 95       	lsr	r28
     842:	c6 95       	lsr	r28
     844:	c0 fd       	sbrc	r28, 0
     846:	06 c0       	rjmp	.+12     	; 0x854 <private_WriteHalfPort+0x72>
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	67 e0       	ldi	r22, 0x07	; 7
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
     852:	05 c0       	rjmp	.+10     	; 0x85e <private_WriteHalfPort+0x7c>
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	67 e0       	ldi	r22, 0x07	; 7
     858:	41 e0       	ldi	r20, 0x01	; 1
     85a:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
}
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <LCD_sendComnd>:
	
	#endif
}

void LCD_sendComnd(u8 Cmnd)
{
     862:	cf 93       	push	r28
     864:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	62 e0       	ldi	r22, 0x02	; 2
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd>>4);                                    //PORTA_REG= (PORTA_REG & 0x0f) | (Cmnd & 0xf0)
     87a:	8c 2f       	mov	r24, r28
     87c:	82 95       	swap	r24
     87e:	8f 70       	andi	r24, 0x0F	; 15
     880:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	63 e0       	ldi	r22, 0x03	; 3
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88e:	8f e9       	ldi	r24, 0x9F	; 159
     890:	9f e0       	ldi	r25, 0x0F	; 15
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <LCD_sendComnd+0x30>
     896:	00 c0       	rjmp	.+0      	; 0x898 <LCD_sendComnd+0x36>
     898:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	63 e0       	ldi	r22, 0x03	; 3
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd);                                      //PORTA_REG= (PORTA_REG & 0x0f) | ((Cmnd & 0xf0) <<4)
     8a4:	8c 2f       	mov	r24, r28
     8a6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	63 e0       	ldi	r22, 0x03	; 3
     8ae:	41 e0       	ldi	r20, 0x01	; 1
     8b0:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
     8b4:	8f e9       	ldi	r24, 0x9F	; 159
     8b6:	9f e0       	ldi	r25, 0x0F	; 15
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <LCD_sendComnd+0x56>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <LCD_sendComnd+0x5c>
     8be:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	63 e0       	ldi	r22, 0x03	; 3
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <LCD_init>:

void LCD_init(void)
{
	#if   LCD_MODE == LCD_FourBitMode 
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	41 e0       	ldi	r20, 0x01	; 1
     8d4:	0e 94 11 01 	call	0x222	; 0x222 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	62 e0       	ldi	r22, 0x02	; 2
     8dc:	41 e0       	ldi	r20, 0x01	; 1
     8de:	0e 94 11 01 	call	0x222	; 0x222 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	63 e0       	ldi	r22, 0x03	; 3
     8e6:	41 e0       	ldi	r20, 0x01	; 1
     8e8:	0e 94 11 01 	call	0x222	; 0x222 <DIO_SetPinDirection>
	
	
	DIO_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	64 e0       	ldi	r22, 0x04	; 4
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	0e 94 11 01 	call	0x222	; 0x222 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	65 e0       	ldi	r22, 0x05	; 5
     8fa:	41 e0       	ldi	r20, 0x01	; 1
     8fc:	0e 94 11 01 	call	0x222	; 0x222 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	66 e0       	ldi	r22, 0x06	; 6
     904:	41 e0       	ldi	r20, 0x01	; 1
     906:	0e 94 11 01 	call	0x222	; 0x222 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	67 e0       	ldi	r22, 0x07	; 7
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	0e 94 11 01 	call	0x222	; 0x222 <DIO_SetPinDirection>
     914:	8f e7       	ldi	r24, 0x7F	; 127
     916:	95 eb       	ldi	r25, 0xB5	; 181
     918:	a1 e0       	ldi	r26, 0x01	; 1
     91a:	81 50       	subi	r24, 0x01	; 1
     91c:	90 40       	sbci	r25, 0x00	; 0
     91e:	a0 40       	sbci	r26, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <LCD_init+0x4c>
     922:	00 c0       	rjmp	.+0      	; 0x924 <LCD_init+0x56>
     924:	00 00       	nop
	
	
	_delay_ms(35);
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	62 e0       	ldi	r22, 0x02	; 2
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	private_WriteHalfPort(LCD_COMMAND_FOR_FOUR_BIT_MODE);
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	63 e0       	ldi	r22, 0x03	; 3
     944:	41 e0       	ldi	r20, 0x01	; 1
     946:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
     94a:	af e9       	ldi	r26, 0x9F	; 159
     94c:	bf e0       	ldi	r27, 0x0F	; 15
     94e:	11 97       	sbiw	r26, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <LCD_init+0x80>
     952:	00 c0       	rjmp	.+0      	; 0x954 <LCD_init+0x86>
     954:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	63 e0       	ldi	r22, 0x03	; 3
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	
	LCD_sendComnd(LCD_FUNCTION_SET);
     960:	88 e2       	ldi	r24, 0x28	; 40
     962:	0e 94 31 04 	call	0x862	; 0x862 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     966:	b0 ef       	ldi	r27, 0xF0	; 240
     968:	ba 95       	dec	r27
     96a:	f1 f7       	brne	.-4      	; 0x968 <LCD_init+0x9a>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DISPLAY_ON_OFF_CONTROL);
     96c:	8c e0       	ldi	r24, 0x0C	; 12
     96e:	0e 94 31 04 	call	0x862	; 0x862 <LCD_sendComnd>
     972:	80 ef       	ldi	r24, 0xF0	; 240
     974:	8a 95       	dec	r24
     976:	f1 f7       	brne	.-4      	; 0x974 <LCD_init+0xa6>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DESPLAY_CLEAR);
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	0e 94 31 04 	call	0x862	; 0x862 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     97e:	af e3       	ldi	r26, 0x3F	; 63
     980:	bf e1       	ldi	r27, 0x1F	; 31
     982:	11 97       	sbiw	r26, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <LCD_init+0xb4>
     986:	00 c0       	rjmp	.+0      	; 0x988 <LCD_init+0xba>
     988:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	0e 94 31 04 	call	0x862	; 0x862 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     990:	b0 ef       	ldi	r27, 0xF0	; 240
     992:	ba 95       	dec	r27
     994:	f1 f7       	brne	.-4      	; 0x992 <LCD_init+0xc4>
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
	_delay_us(45);
	
	#endif
}
     996:	08 95       	ret

00000998 <LCD_sendChar>:
	
}


void LCD_sendChar(u8 Character_Data)
{
     998:	cf 93       	push	r28
     99a:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	41 e0       	ldi	r20, 0x01	; 1
     9a2:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	62 e0       	ldi	r22, 0x02	; 2
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data>>4);                        //PORTA_REG= (PORTA_REG & 0x0f) | (Character_Data & 0xf0)
     9b0:	8c 2f       	mov	r24, r28
     9b2:	82 95       	swap	r24
     9b4:	8f 70       	andi	r24, 0x0F	; 15
     9b6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	63 e0       	ldi	r22, 0x03	; 3
     9be:	41 e0       	ldi	r20, 0x01	; 1
     9c0:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c4:	8f e9       	ldi	r24, 0x9F	; 159
     9c6:	9f e0       	ldi	r25, 0x0F	; 15
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <LCD_sendChar+0x30>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <LCD_sendChar+0x36>
     9ce:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	63 e0       	ldi	r22, 0x03	; 3
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data);                         //PORTA_REG= (PORTA_REG & 0x0f) | ((Character_Data & 0xf0) <<4)
     9da:	8c 2f       	mov	r24, r28
     9dc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	63 e0       	ldi	r22, 0x03	; 3
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
     9ea:	8f e9       	ldi	r24, 0x9F	; 159
     9ec:	9f e0       	ldi	r25, 0x0F	; 15
     9ee:	01 97       	sbiw	r24, 0x01	; 1
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <LCD_sendChar+0x56>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <LCD_sendChar+0x5c>
     9f4:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	63 e0       	ldi	r22, 0x03	; 3
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <LCD_SendString>:

void LCD_SendString (u8 *String_Data)
{
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	ec 01       	movw	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	while((*String_Data)!='\0')
     a0a:	88 81       	ld	r24, Y
     a0c:	88 23       	and	r24, r24
     a0e:	31 f0       	breq	.+12     	; 0xa1c <LCD_SendString+0x18>
	
	#endif
	
}

void LCD_SendString (u8 *String_Data)
     a10:	21 96       	adiw	r28, 0x01	; 1
{
	#if   LCD_MODE == LCD_FourBitMode
	while((*String_Data)!='\0')
	{
		LCD_sendChar(*String_Data);
     a12:	0e 94 cc 04 	call	0x998	; 0x998 <LCD_sendChar>
}

void LCD_SendString (u8 *String_Data)
{
	#if   LCD_MODE == LCD_FourBitMode
	while((*String_Data)!='\0')
     a16:	89 91       	ld	r24, Y+
     a18:	88 23       	and	r24, r24
     a1a:	d9 f7       	brne	.-10     	; 0xa12 <LCD_SendString+0xe>
		LCD_sendChar(*String_Data);
		String_Data++;
	}
	#endif
	
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <LCD_ClearDesplay>:


void LCD_ClearDesplay()
{
	#if   LCD_MODE == LCD_FourBitMode
	LCD_sendComnd (LCD_DESPLAY_CLEAR);
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	0e 94 31 04 	call	0x862	; 0x862 <LCD_sendComnd>
     a28:	8f e3       	ldi	r24, 0x3F	; 63
     a2a:	9f e1       	ldi	r25, 0x1F	; 31
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <LCD_ClearDesplay+0xa>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <LCD_ClearDesplay+0x10>
     a32:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);
     a34:	80 e8       	ldi	r24, 0x80	; 128
     a36:	0e 94 31 04 	call	0x862	; 0x862 <LCD_sendComnd>
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);
	
	#endif
			
}
     a3a:	08 95       	ret

00000a3c <LCD_GoToLocation>:

void LCD_GoToLocation(u8 X_Location, u8 LineNumber)
{
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	00 d0       	rcall	.+0      	; 0xa42 <LCD_GoToLocation+0x6>
     a42:	00 d0       	rcall	.+0      	; 0xa44 <LCD_GoToLocation+0x8>
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
	#if   LCD_MODE == LCD_FourBitMode
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
     a48:	90 e8       	ldi	r25, 0x80	; 128
     a4a:	99 83       	std	Y+1, r25	; 0x01
     a4c:	90 ec       	ldi	r25, 0xC0	; 192
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	94 e9       	ldi	r25, 0x94	; 148
     a52:	9b 83       	std	Y+3, r25	; 0x03
     a54:	94 ed       	ldi	r25, 0xD4	; 212
     a56:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
     a58:	81 50       	subi	r24, 0x01	; 1
     a5a:	fe 01       	movw	r30, r28
     a5c:	e6 0f       	add	r30, r22
     a5e:	f1 1d       	adc	r31, r1
     a60:	90 81       	ld	r25, Z
     a62:	89 0f       	add	r24, r25
     a64:	0e 94 31 04 	call	0x862	; 0x862 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a68:	8f e9       	ldi	r24, 0x9F	; 159
     a6a:	9f e0       	ldi	r25, 0x0F	; 15
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <LCD_GoToLocation+0x30>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <LCD_GoToLocation+0x36>
     a72:	00 00       	nop
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
	_delay_us(1000);
	
	#endif
}
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <LCD_SendIntegarNumber>:

void LCD_SendIntegarNumber(u16 IntegerNumber)
{
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	a0 97       	sbiw	r28, 0x20	; 32
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
	#if   LCD_MODE == LCD_FourBitMode
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);
     a9a:	2d b7       	in	r18, 0x3d	; 61
     a9c:	3e b7       	in	r19, 0x3e	; 62
     a9e:	28 50       	subi	r18, 0x08	; 8
     aa0:	30 40       	sbci	r19, 0x00	; 0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	3e bf       	out	0x3e, r19	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	2d bf       	out	0x3d, r18	; 61
     aac:	ed b7       	in	r30, 0x3d	; 61
     aae:	fe b7       	in	r31, 0x3e	; 62
     ab0:	31 96       	adiw	r30, 0x01	; 1
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5f       	subi	r16, 0xFF	; 255
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ad b7       	in	r26, 0x3d	; 61
     aba:	be b7       	in	r27, 0x3e	; 62
     abc:	12 96       	adiw	r26, 0x02	; 2
     abe:	1c 93       	st	X, r17
     ac0:	0e 93       	st	-X, r16
     ac2:	11 97       	sbiw	r26, 0x01	; 1
     ac4:	21 e1       	ldi	r18, 0x11	; 17
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	33 83       	std	Z+3, r19	; 0x03
     aca:	22 83       	std	Z+2, r18	; 0x02
     acc:	20 e6       	ldi	r18, 0x60	; 96
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	35 83       	std	Z+5, r19	; 0x05
     ad2:	24 83       	std	Z+4, r18	; 0x04
     ad4:	97 83       	std	Z+7, r25	; 0x07
     ad6:	86 83       	std	Z+6, r24	; 0x06
     ad8:	0e 94 44 06 	call	0xc88	; 0xc88 <snprintf>
	LCD_SendString(NumberString);
     adc:	2d b7       	in	r18, 0x3d	; 61
     ade:	3e b7       	in	r19, 0x3e	; 62
     ae0:	28 5f       	subi	r18, 0xF8	; 248
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	3e bf       	out	0x3e, r19	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	2d bf       	out	0x3d, r18	; 61
     aee:	c8 01       	movw	r24, r16
     af0:	0e 94 02 05 	call	0xa04	; 0xa04 <LCD_SendString>
	snprintf(NumberString,17,"%d",IntegerNumber);
	LCD_SendString(NumberString);
	
	#endif
	
}
     af4:	a0 96       	adiw	r28, 0x20	; 32
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	08 95       	ret

00000b0a <LCD_SendNumberToLocation>:


void LCD_SendNumberToLocation(u16 Number,u8 X_Location, u8 LineNumber)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	ec 01       	movw	r28, r24
     b10:	86 2f       	mov	r24, r22
	#if   LCD_MODE == LCD_FourBitMode
	LCD_GoToLocation(X_Location,LineNumber);
     b12:	64 2f       	mov	r22, r20
     b14:	0e 94 1e 05 	call	0xa3c	; 0xa3c <LCD_GoToLocation>
	LCD_SendIntegarNumber(Number);
     b18:	ce 01       	movw	r24, r28
     b1a:	0e 94 41 05 	call	0xa82	; 0xa82 <LCD_SendIntegarNumber>
	LCD_GoToLocation(X_Location,LineNumber);
	LCD_SendIntegarNumber(Number);
	
	#endif
	
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <LCD_SendFloatNumber>:

void LCD_SendFloatNumber(f32 FloatNumber)
{
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	a0 97       	sbiw	r28, 0x20	; 32
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	dc 01       	movw	r26, r24
     b3e:	cb 01       	movw	r24, r22
	#if   LCD_MODE == LCD_FourBitMode
	u16 NumberString[16];
	snprintf(NumberString,17,"%f",FloatNumber);
     b40:	2d b7       	in	r18, 0x3d	; 61
     b42:	3e b7       	in	r19, 0x3e	; 62
     b44:	2a 50       	subi	r18, 0x0A	; 10
     b46:	30 40       	sbci	r19, 0x00	; 0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	3e bf       	out	0x3e, r19	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	2d bf       	out	0x3d, r18	; 61
     b52:	4d b7       	in	r20, 0x3d	; 61
     b54:	5e b7       	in	r21, 0x3e	; 62
     b56:	4f 5f       	subi	r20, 0xFF	; 255
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
     b5a:	8e 01       	movw	r16, r28
     b5c:	0f 5f       	subi	r16, 0xFF	; 255
     b5e:	1f 4f       	sbci	r17, 0xFF	; 255
     b60:	ed b7       	in	r30, 0x3d	; 61
     b62:	fe b7       	in	r31, 0x3e	; 62
     b64:	12 83       	std	Z+2, r17	; 0x02
     b66:	01 83       	std	Z+1, r16	; 0x01
     b68:	21 e1       	ldi	r18, 0x11	; 17
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	fa 01       	movw	r30, r20
     b6e:	33 83       	std	Z+3, r19	; 0x03
     b70:	22 83       	std	Z+2, r18	; 0x02
     b72:	23 e6       	ldi	r18, 0x63	; 99
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	35 83       	std	Z+5, r19	; 0x05
     b78:	24 83       	std	Z+4, r18	; 0x04
     b7a:	86 83       	std	Z+6, r24	; 0x06
     b7c:	97 83       	std	Z+7, r25	; 0x07
     b7e:	a0 87       	std	Z+8, r26	; 0x08
     b80:	b1 87       	std	Z+9, r27	; 0x09
     b82:	0e 94 44 06 	call	0xc88	; 0xc88 <snprintf>
	LCD_SendString(NumberString);
     b86:	2d b7       	in	r18, 0x3d	; 61
     b88:	3e b7       	in	r19, 0x3e	; 62
     b8a:	26 5f       	subi	r18, 0xF6	; 246
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	3e bf       	out	0x3e, r19	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	2d bf       	out	0x3d, r18	; 61
     b98:	c8 01       	movw	r24, r16
     b9a:	0e 94 02 05 	call	0xa04	; 0xa04 <LCD_SendString>
	snprintf(NumberString,17,"%f",FloatNumber);
	LCD_SendString(NumberString);
	
	#endif
	
}
     b9e:	a0 96       	adiw	r28, 0x20	; 32
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <LCD_Shift>:

void LCD_Shift(u8 ShiftCmnd)
{
	#if   LCD_MODE == LCD_FourBitMode
	LCD_sendComnd(ShiftCmnd);
     bb4:	0e 94 31 04 	call	0x862	; 0x862 <LCD_sendComnd>
	
	#elif LCD_MODE == LCD_EightBitMode
	LCD_sendComnd(ShiftCmnd);
	
	#endif
}
     bb8:	08 95       	ret

00000bba <main>:
#include "LCD_interface.h"
#include "LCD_private.h"


int main(void)
{
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <main+0x6>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	u16 AnalogValue;
	u16 DigitalValue;
	DIO_SetPinDirection(POT_PORT,POT_PIN,DIO_PIN_INPUT);
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	0e 94 11 01 	call	0x222	; 0x222 <DIO_SetPinDirection>
	
	LCD_init();
     bce:	0e 94 67 04 	call	0x8ce	; 0x8ce <LCD_init>
	ADC_init(ADC_REFERENCE_AVCC,ADC_Prescaller_128);
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	60 e8       	ldi	r22, 0x80	; 128
     bd6:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
    {
		ADC_ReadDigitalValue(ADC_CHANNEL_1,&DigitalValue);
		
		AnalogValue= (DigitalValue*5000UL)/1024; 
		
       LCD_SendString("Voltage=");
     bda:	06 e6       	ldi	r16, 0x66	; 102
     bdc:	10 e0       	ldi	r17, 0x00	; 0
	   LCD_SendIntegarNumber(AnalogValue);
	   LCD_SendString("mV");
     bde:	0f 2e       	mov	r0, r31
     be0:	ff e6       	ldi	r31, 0x6F	; 111
     be2:	af 2e       	mov	r10, r31
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	bf 2e       	mov	r11, r31
     be8:	f0 2d       	mov	r31, r0
	LCD_init();
	ADC_init(ADC_REFERENCE_AVCC,ADC_Prescaller_128);
	
    while(1)
    {
		ADC_ReadDigitalValue(ADC_CHANNEL_1,&DigitalValue);
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	be 01       	movw	r22, r28
     bee:	6f 5f       	subi	r22, 0xFF	; 255
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	0e 94 8e 00 	call	0x11c	; 0x11c <ADC_ReadDigitalValue>
		
		AnalogValue= (DigitalValue*5000UL)/1024; 
     bf6:	69 81       	ldd	r22, Y+1	; 0x01
     bf8:	7a 81       	ldd	r23, Y+2	; 0x02
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	28 e8       	ldi	r18, 0x88	; 136
     c00:	33 e1       	ldi	r19, 0x13	; 19
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	0e 94 25 06 	call	0xc4a	; 0xc4a <__mulsi3>
     c0a:	6b 01       	movw	r12, r22
     c0c:	7c 01       	movw	r14, r24
     c0e:	0b 2e       	mov	r0, r27
     c10:	ba e0       	ldi	r27, 0x0A	; 10
     c12:	f6 94       	lsr	r15
     c14:	e7 94       	ror	r14
     c16:	d7 94       	ror	r13
     c18:	c7 94       	ror	r12
     c1a:	ba 95       	dec	r27
     c1c:	d1 f7       	brne	.-12     	; 0xc12 <main+0x58>
     c1e:	b0 2d       	mov	r27, r0
		
       LCD_SendString("Voltage=");
     c20:	c8 01       	movw	r24, r16
     c22:	0e 94 02 05 	call	0xa04	; 0xa04 <LCD_SendString>
	   LCD_SendIntegarNumber(AnalogValue);
     c26:	c6 01       	movw	r24, r12
     c28:	0e 94 41 05 	call	0xa82	; 0xa82 <LCD_SendIntegarNumber>
	   LCD_SendString("mV");
     c2c:	c5 01       	movw	r24, r10
     c2e:	0e 94 02 05 	call	0xa04	; 0xa04 <LCD_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	99 e6       	ldi	r25, 0x69	; 105
     c36:	a8 e1       	ldi	r26, 0x18	; 24
     c38:	81 50       	subi	r24, 0x01	; 1
     c3a:	90 40       	sbci	r25, 0x00	; 0
     c3c:	a0 40       	sbci	r26, 0x00	; 0
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <main+0x7e>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <main+0x88>
     c42:	00 00       	nop
	   _delay_ms(500);
	   LCD_ClearDesplay();
     c44:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_ClearDesplay>
     c48:	d0 cf       	rjmp	.-96     	; 0xbea <main+0x30>

00000c4a <__mulsi3>:
     c4a:	62 9f       	mul	r22, r18
     c4c:	d0 01       	movw	r26, r0
     c4e:	73 9f       	mul	r23, r19
     c50:	f0 01       	movw	r30, r0
     c52:	82 9f       	mul	r24, r18
     c54:	e0 0d       	add	r30, r0
     c56:	f1 1d       	adc	r31, r1
     c58:	64 9f       	mul	r22, r20
     c5a:	e0 0d       	add	r30, r0
     c5c:	f1 1d       	adc	r31, r1
     c5e:	92 9f       	mul	r25, r18
     c60:	f0 0d       	add	r31, r0
     c62:	83 9f       	mul	r24, r19
     c64:	f0 0d       	add	r31, r0
     c66:	74 9f       	mul	r23, r20
     c68:	f0 0d       	add	r31, r0
     c6a:	65 9f       	mul	r22, r21
     c6c:	f0 0d       	add	r31, r0
     c6e:	99 27       	eor	r25, r25
     c70:	72 9f       	mul	r23, r18
     c72:	b0 0d       	add	r27, r0
     c74:	e1 1d       	adc	r30, r1
     c76:	f9 1f       	adc	r31, r25
     c78:	63 9f       	mul	r22, r19
     c7a:	b0 0d       	add	r27, r0
     c7c:	e1 1d       	adc	r30, r1
     c7e:	f9 1f       	adc	r31, r25
     c80:	bd 01       	movw	r22, r26
     c82:	cf 01       	movw	r24, r30
     c84:	11 24       	eor	r1, r1
     c86:	08 95       	ret

00000c88 <snprintf>:
     c88:	ae e0       	ldi	r26, 0x0E	; 14
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	ea e4       	ldi	r30, 0x4A	; 74
     c8e:	f6 e0       	ldi	r31, 0x06	; 6
     c90:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__prologue_saves__+0x1c>
     c94:	0d 89       	ldd	r16, Y+21	; 0x15
     c96:	1e 89       	ldd	r17, Y+22	; 0x16
     c98:	8f 89       	ldd	r24, Y+23	; 0x17
     c9a:	98 8d       	ldd	r25, Y+24	; 0x18
     c9c:	26 e0       	ldi	r18, 0x06	; 6
     c9e:	2c 83       	std	Y+4, r18	; 0x04
     ca0:	1a 83       	std	Y+2, r17	; 0x02
     ca2:	09 83       	std	Y+1, r16	; 0x01
     ca4:	97 ff       	sbrs	r25, 7
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <snprintf+0x24>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e8       	ldi	r25, 0x80	; 128
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	9e 83       	std	Y+6, r25	; 0x06
     cb0:	8d 83       	std	Y+5, r24	; 0x05
     cb2:	ae 01       	movw	r20, r28
     cb4:	45 5e       	subi	r20, 0xE5	; 229
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	ce 01       	movw	r24, r28
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	69 8d       	ldd	r22, Y+25	; 0x19
     cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc0:	0e 94 74 06 	call	0xce8	; 0xce8 <vfprintf>
     cc4:	4d 81       	ldd	r20, Y+5	; 0x05
     cc6:	5e 81       	ldd	r21, Y+6	; 0x06
     cc8:	57 fd       	sbrc	r21, 7
     cca:	0a c0       	rjmp	.+20     	; 0xce0 <snprintf+0x58>
     ccc:	2f 81       	ldd	r18, Y+7	; 0x07
     cce:	38 85       	ldd	r19, Y+8	; 0x08
     cd0:	42 17       	cp	r20, r18
     cd2:	53 07       	cpc	r21, r19
     cd4:	0c f4       	brge	.+2      	; 0xcd8 <snprintf+0x50>
     cd6:	9a 01       	movw	r18, r20
     cd8:	02 0f       	add	r16, r18
     cda:	13 1f       	adc	r17, r19
     cdc:	f8 01       	movw	r30, r16
     cde:	10 82       	st	Z, r1
     ce0:	2e 96       	adiw	r28, 0x0e	; 14
     ce2:	e4 e0       	ldi	r30, 0x04	; 4
     ce4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__epilogue_restores__+0x1c>

00000ce8 <vfprintf>:
     ce8:	ad e0       	ldi	r26, 0x0D	; 13
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	ea e7       	ldi	r30, 0x7A	; 122
     cee:	f6 e0       	ldi	r31, 0x06	; 6
     cf0:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__prologue_saves__>
     cf4:	3c 01       	movw	r6, r24
     cf6:	7d 87       	std	Y+13, r23	; 0x0d
     cf8:	6c 87       	std	Y+12, r22	; 0x0c
     cfa:	5a 01       	movw	r10, r20
     cfc:	fc 01       	movw	r30, r24
     cfe:	17 82       	std	Z+7, r1	; 0x07
     d00:	16 82       	std	Z+6, r1	; 0x06
     d02:	83 81       	ldd	r24, Z+3	; 0x03
     d04:	81 ff       	sbrs	r24, 1
     d06:	c8 c1       	rjmp	.+912    	; 0x1098 <vfprintf+0x3b0>
     d08:	2e 01       	movw	r4, r28
     d0a:	08 94       	sec
     d0c:	41 1c       	adc	r4, r1
     d0e:	51 1c       	adc	r5, r1
     d10:	f3 01       	movw	r30, r6
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	ec 85       	ldd	r30, Y+12	; 0x0c
     d16:	fd 85       	ldd	r31, Y+13	; 0x0d
     d18:	93 fd       	sbrc	r25, 3
     d1a:	85 91       	lpm	r24, Z+
     d1c:	93 ff       	sbrs	r25, 3
     d1e:	81 91       	ld	r24, Z+
     d20:	fd 87       	std	Y+13, r31	; 0x0d
     d22:	ec 87       	std	Y+12, r30	; 0x0c
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <vfprintf+0x42>
     d28:	b3 c1       	rjmp	.+870    	; 0x1090 <vfprintf+0x3a8>
     d2a:	85 32       	cpi	r24, 0x25	; 37
     d2c:	41 f4       	brne	.+16     	; 0xd3e <vfprintf+0x56>
     d2e:	93 fd       	sbrc	r25, 3
     d30:	85 91       	lpm	r24, Z+
     d32:	93 ff       	sbrs	r25, 3
     d34:	81 91       	ld	r24, Z+
     d36:	fd 87       	std	Y+13, r31	; 0x0d
     d38:	ec 87       	std	Y+12, r30	; 0x0c
     d3a:	85 32       	cpi	r24, 0x25	; 37
     d3c:	29 f4       	brne	.+10     	; 0xd48 <vfprintf+0x60>
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	b3 01       	movw	r22, r6
     d42:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
     d46:	e4 cf       	rjmp	.-56     	; 0xd10 <vfprintf+0x28>
     d48:	ff 24       	eor	r15, r15
     d4a:	ee 24       	eor	r14, r14
     d4c:	10 e0       	ldi	r17, 0x00	; 0
     d4e:	10 32       	cpi	r17, 0x20	; 32
     d50:	b0 f4       	brcc	.+44     	; 0xd7e <vfprintf+0x96>
     d52:	8b 32       	cpi	r24, 0x2B	; 43
     d54:	69 f0       	breq	.+26     	; 0xd70 <vfprintf+0x88>
     d56:	8c 32       	cpi	r24, 0x2C	; 44
     d58:	28 f4       	brcc	.+10     	; 0xd64 <vfprintf+0x7c>
     d5a:	80 32       	cpi	r24, 0x20	; 32
     d5c:	51 f0       	breq	.+20     	; 0xd72 <vfprintf+0x8a>
     d5e:	83 32       	cpi	r24, 0x23	; 35
     d60:	71 f4       	brne	.+28     	; 0xd7e <vfprintf+0x96>
     d62:	0b c0       	rjmp	.+22     	; 0xd7a <vfprintf+0x92>
     d64:	8d 32       	cpi	r24, 0x2D	; 45
     d66:	39 f0       	breq	.+14     	; 0xd76 <vfprintf+0x8e>
     d68:	80 33       	cpi	r24, 0x30	; 48
     d6a:	49 f4       	brne	.+18     	; 0xd7e <vfprintf+0x96>
     d6c:	11 60       	ori	r17, 0x01	; 1
     d6e:	2c c0       	rjmp	.+88     	; 0xdc8 <vfprintf+0xe0>
     d70:	12 60       	ori	r17, 0x02	; 2
     d72:	14 60       	ori	r17, 0x04	; 4
     d74:	29 c0       	rjmp	.+82     	; 0xdc8 <vfprintf+0xe0>
     d76:	18 60       	ori	r17, 0x08	; 8
     d78:	27 c0       	rjmp	.+78     	; 0xdc8 <vfprintf+0xe0>
     d7a:	10 61       	ori	r17, 0x10	; 16
     d7c:	25 c0       	rjmp	.+74     	; 0xdc8 <vfprintf+0xe0>
     d7e:	17 fd       	sbrc	r17, 7
     d80:	2e c0       	rjmp	.+92     	; 0xdde <vfprintf+0xf6>
     d82:	28 2f       	mov	r18, r24
     d84:	20 53       	subi	r18, 0x30	; 48
     d86:	2a 30       	cpi	r18, 0x0A	; 10
     d88:	98 f4       	brcc	.+38     	; 0xdb0 <vfprintf+0xc8>
     d8a:	16 ff       	sbrs	r17, 6
     d8c:	08 c0       	rjmp	.+16     	; 0xd9e <vfprintf+0xb6>
     d8e:	8f 2d       	mov	r24, r15
     d90:	88 0f       	add	r24, r24
     d92:	f8 2e       	mov	r15, r24
     d94:	ff 0c       	add	r15, r15
     d96:	ff 0c       	add	r15, r15
     d98:	f8 0e       	add	r15, r24
     d9a:	f2 0e       	add	r15, r18
     d9c:	15 c0       	rjmp	.+42     	; 0xdc8 <vfprintf+0xe0>
     d9e:	8e 2d       	mov	r24, r14
     da0:	88 0f       	add	r24, r24
     da2:	e8 2e       	mov	r14, r24
     da4:	ee 0c       	add	r14, r14
     da6:	ee 0c       	add	r14, r14
     da8:	e8 0e       	add	r14, r24
     daa:	e2 0e       	add	r14, r18
     dac:	10 62       	ori	r17, 0x20	; 32
     dae:	0c c0       	rjmp	.+24     	; 0xdc8 <vfprintf+0xe0>
     db0:	8e 32       	cpi	r24, 0x2E	; 46
     db2:	21 f4       	brne	.+8      	; 0xdbc <vfprintf+0xd4>
     db4:	16 fd       	sbrc	r17, 6
     db6:	6c c1       	rjmp	.+728    	; 0x1090 <vfprintf+0x3a8>
     db8:	10 64       	ori	r17, 0x40	; 64
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <vfprintf+0xe0>
     dbc:	8c 36       	cpi	r24, 0x6C	; 108
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <vfprintf+0xdc>
     dc0:	10 68       	ori	r17, 0x80	; 128
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0xe0>
     dc4:	88 36       	cpi	r24, 0x68	; 104
     dc6:	59 f4       	brne	.+22     	; 0xdde <vfprintf+0xf6>
     dc8:	ec 85       	ldd	r30, Y+12	; 0x0c
     dca:	fd 85       	ldd	r31, Y+13	; 0x0d
     dcc:	93 fd       	sbrc	r25, 3
     dce:	85 91       	lpm	r24, Z+
     dd0:	93 ff       	sbrs	r25, 3
     dd2:	81 91       	ld	r24, Z+
     dd4:	fd 87       	std	Y+13, r31	; 0x0d
     dd6:	ec 87       	std	Y+12, r30	; 0x0c
     dd8:	88 23       	and	r24, r24
     dda:	09 f0       	breq	.+2      	; 0xdde <vfprintf+0xf6>
     ddc:	b8 cf       	rjmp	.-144    	; 0xd4e <vfprintf+0x66>
     dde:	98 2f       	mov	r25, r24
     de0:	95 54       	subi	r25, 0x45	; 69
     de2:	93 30       	cpi	r25, 0x03	; 3
     de4:	18 f0       	brcs	.+6      	; 0xdec <vfprintf+0x104>
     de6:	90 52       	subi	r25, 0x20	; 32
     de8:	93 30       	cpi	r25, 0x03	; 3
     dea:	38 f4       	brcc	.+14     	; 0xdfa <vfprintf+0x112>
     dec:	24 e0       	ldi	r18, 0x04	; 4
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	a2 0e       	add	r10, r18
     df2:	b3 1e       	adc	r11, r19
     df4:	3f e3       	ldi	r19, 0x3F	; 63
     df6:	39 83       	std	Y+1, r19	; 0x01
     df8:	0f c0       	rjmp	.+30     	; 0xe18 <vfprintf+0x130>
     dfa:	83 36       	cpi	r24, 0x63	; 99
     dfc:	31 f0       	breq	.+12     	; 0xe0a <vfprintf+0x122>
     dfe:	83 37       	cpi	r24, 0x73	; 115
     e00:	81 f0       	breq	.+32     	; 0xe22 <vfprintf+0x13a>
     e02:	83 35       	cpi	r24, 0x53	; 83
     e04:	09 f0       	breq	.+2      	; 0xe08 <vfprintf+0x120>
     e06:	5a c0       	rjmp	.+180    	; 0xebc <vfprintf+0x1d4>
     e08:	22 c0       	rjmp	.+68     	; 0xe4e <vfprintf+0x166>
     e0a:	f5 01       	movw	r30, r10
     e0c:	80 81       	ld	r24, Z
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	22 e0       	ldi	r18, 0x02	; 2
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	a2 0e       	add	r10, r18
     e16:	b3 1e       	adc	r11, r19
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	c2 2e       	mov	r12, r18
     e1c:	d1 2c       	mov	r13, r1
     e1e:	42 01       	movw	r8, r4
     e20:	14 c0       	rjmp	.+40     	; 0xe4a <vfprintf+0x162>
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	29 2e       	mov	r2, r25
     e26:	31 2c       	mov	r3, r1
     e28:	2a 0c       	add	r2, r10
     e2a:	3b 1c       	adc	r3, r11
     e2c:	f5 01       	movw	r30, r10
     e2e:	80 80       	ld	r8, Z
     e30:	91 80       	ldd	r9, Z+1	; 0x01
     e32:	16 ff       	sbrs	r17, 6
     e34:	03 c0       	rjmp	.+6      	; 0xe3c <vfprintf+0x154>
     e36:	6f 2d       	mov	r22, r15
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <vfprintf+0x158>
     e3c:	6f ef       	ldi	r22, 0xFF	; 255
     e3e:	7f ef       	ldi	r23, 0xFF	; 255
     e40:	c4 01       	movw	r24, r8
     e42:	0e 94 5d 08 	call	0x10ba	; 0x10ba <strnlen>
     e46:	6c 01       	movw	r12, r24
     e48:	51 01       	movw	r10, r2
     e4a:	1f 77       	andi	r17, 0x7F	; 127
     e4c:	15 c0       	rjmp	.+42     	; 0xe78 <vfprintf+0x190>
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	28 2e       	mov	r2, r24
     e52:	31 2c       	mov	r3, r1
     e54:	2a 0c       	add	r2, r10
     e56:	3b 1c       	adc	r3, r11
     e58:	f5 01       	movw	r30, r10
     e5a:	80 80       	ld	r8, Z
     e5c:	91 80       	ldd	r9, Z+1	; 0x01
     e5e:	16 ff       	sbrs	r17, 6
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <vfprintf+0x180>
     e62:	6f 2d       	mov	r22, r15
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <vfprintf+0x184>
     e68:	6f ef       	ldi	r22, 0xFF	; 255
     e6a:	7f ef       	ldi	r23, 0xFF	; 255
     e6c:	c4 01       	movw	r24, r8
     e6e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <strnlen_P>
     e72:	6c 01       	movw	r12, r24
     e74:	10 68       	ori	r17, 0x80	; 128
     e76:	51 01       	movw	r10, r2
     e78:	13 fd       	sbrc	r17, 3
     e7a:	1c c0       	rjmp	.+56     	; 0xeb4 <vfprintf+0x1cc>
     e7c:	06 c0       	rjmp	.+12     	; 0xe8a <vfprintf+0x1a2>
     e7e:	80 e2       	ldi	r24, 0x20	; 32
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	b3 01       	movw	r22, r6
     e84:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
     e88:	ea 94       	dec	r14
     e8a:	8e 2d       	mov	r24, r14
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	c8 16       	cp	r12, r24
     e90:	d9 06       	cpc	r13, r25
     e92:	a8 f3       	brcs	.-22     	; 0xe7e <vfprintf+0x196>
     e94:	0f c0       	rjmp	.+30     	; 0xeb4 <vfprintf+0x1cc>
     e96:	f4 01       	movw	r30, r8
     e98:	17 fd       	sbrc	r17, 7
     e9a:	85 91       	lpm	r24, Z+
     e9c:	17 ff       	sbrs	r17, 7
     e9e:	81 91       	ld	r24, Z+
     ea0:	4f 01       	movw	r8, r30
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	b3 01       	movw	r22, r6
     ea6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
     eaa:	e1 10       	cpse	r14, r1
     eac:	ea 94       	dec	r14
     eae:	08 94       	sec
     eb0:	c1 08       	sbc	r12, r1
     eb2:	d1 08       	sbc	r13, r1
     eb4:	c1 14       	cp	r12, r1
     eb6:	d1 04       	cpc	r13, r1
     eb8:	71 f7       	brne	.-36     	; 0xe96 <vfprintf+0x1ae>
     eba:	e7 c0       	rjmp	.+462    	; 0x108a <vfprintf+0x3a2>
     ebc:	84 36       	cpi	r24, 0x64	; 100
     ebe:	11 f0       	breq	.+4      	; 0xec4 <vfprintf+0x1dc>
     ec0:	89 36       	cpi	r24, 0x69	; 105
     ec2:	51 f5       	brne	.+84     	; 0xf18 <vfprintf+0x230>
     ec4:	f5 01       	movw	r30, r10
     ec6:	17 ff       	sbrs	r17, 7
     ec8:	07 c0       	rjmp	.+14     	; 0xed8 <vfprintf+0x1f0>
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
     ece:	a2 81       	ldd	r26, Z+2	; 0x02
     ed0:	b3 81       	ldd	r27, Z+3	; 0x03
     ed2:	24 e0       	ldi	r18, 0x04	; 4
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	08 c0       	rjmp	.+16     	; 0xee8 <vfprintf+0x200>
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	aa 27       	eor	r26, r26
     ede:	97 fd       	sbrc	r25, 7
     ee0:	a0 95       	com	r26
     ee2:	ba 2f       	mov	r27, r26
     ee4:	22 e0       	ldi	r18, 0x02	; 2
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	a2 0e       	add	r10, r18
     eea:	b3 1e       	adc	r11, r19
     eec:	01 2f       	mov	r16, r17
     eee:	0f 76       	andi	r16, 0x6F	; 111
     ef0:	b7 ff       	sbrs	r27, 7
     ef2:	08 c0       	rjmp	.+16     	; 0xf04 <vfprintf+0x21c>
     ef4:	b0 95       	com	r27
     ef6:	a0 95       	com	r26
     ef8:	90 95       	com	r25
     efa:	81 95       	neg	r24
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	af 4f       	sbci	r26, 0xFF	; 255
     f00:	bf 4f       	sbci	r27, 0xFF	; 255
     f02:	00 68       	ori	r16, 0x80	; 128
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	a2 01       	movw	r20, r4
     f0a:	2a e0       	ldi	r18, 0x0A	; 10
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	0e 94 94 08 	call	0x1128	; 0x1128 <__ultoa_invert>
     f12:	d8 2e       	mov	r13, r24
     f14:	d4 18       	sub	r13, r4
     f16:	3f c0       	rjmp	.+126    	; 0xf96 <vfprintf+0x2ae>
     f18:	85 37       	cpi	r24, 0x75	; 117
     f1a:	21 f4       	brne	.+8      	; 0xf24 <vfprintf+0x23c>
     f1c:	1f 7e       	andi	r17, 0xEF	; 239
     f1e:	2a e0       	ldi	r18, 0x0A	; 10
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	20 c0       	rjmp	.+64     	; 0xf64 <vfprintf+0x27c>
     f24:	19 7f       	andi	r17, 0xF9	; 249
     f26:	8f 36       	cpi	r24, 0x6F	; 111
     f28:	a9 f0       	breq	.+42     	; 0xf54 <vfprintf+0x26c>
     f2a:	80 37       	cpi	r24, 0x70	; 112
     f2c:	20 f4       	brcc	.+8      	; 0xf36 <vfprintf+0x24e>
     f2e:	88 35       	cpi	r24, 0x58	; 88
     f30:	09 f0       	breq	.+2      	; 0xf34 <vfprintf+0x24c>
     f32:	ae c0       	rjmp	.+348    	; 0x1090 <vfprintf+0x3a8>
     f34:	0b c0       	rjmp	.+22     	; 0xf4c <vfprintf+0x264>
     f36:	80 37       	cpi	r24, 0x70	; 112
     f38:	21 f0       	breq	.+8      	; 0xf42 <vfprintf+0x25a>
     f3a:	88 37       	cpi	r24, 0x78	; 120
     f3c:	09 f0       	breq	.+2      	; 0xf40 <vfprintf+0x258>
     f3e:	a8 c0       	rjmp	.+336    	; 0x1090 <vfprintf+0x3a8>
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <vfprintf+0x25c>
     f42:	10 61       	ori	r17, 0x10	; 16
     f44:	14 ff       	sbrs	r17, 4
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <vfprintf+0x272>
     f48:	14 60       	ori	r17, 0x04	; 4
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <vfprintf+0x272>
     f4c:	14 ff       	sbrs	r17, 4
     f4e:	08 c0       	rjmp	.+16     	; 0xf60 <vfprintf+0x278>
     f50:	16 60       	ori	r17, 0x06	; 6
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <vfprintf+0x278>
     f54:	28 e0       	ldi	r18, 0x08	; 8
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <vfprintf+0x27c>
     f5a:	20 e1       	ldi	r18, 0x10	; 16
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <vfprintf+0x27c>
     f60:	20 e1       	ldi	r18, 0x10	; 16
     f62:	32 e0       	ldi	r19, 0x02	; 2
     f64:	f5 01       	movw	r30, r10
     f66:	17 ff       	sbrs	r17, 7
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <vfprintf+0x290>
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	44 e0       	ldi	r20, 0x04	; 4
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <vfprintf+0x29c>
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	42 e0       	ldi	r20, 0x02	; 2
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	a4 0e       	add	r10, r20
     f86:	b5 1e       	adc	r11, r21
     f88:	a2 01       	movw	r20, r4
     f8a:	0e 94 94 08 	call	0x1128	; 0x1128 <__ultoa_invert>
     f8e:	d8 2e       	mov	r13, r24
     f90:	d4 18       	sub	r13, r4
     f92:	01 2f       	mov	r16, r17
     f94:	0f 77       	andi	r16, 0x7F	; 127
     f96:	06 ff       	sbrs	r16, 6
     f98:	09 c0       	rjmp	.+18     	; 0xfac <vfprintf+0x2c4>
     f9a:	0e 7f       	andi	r16, 0xFE	; 254
     f9c:	df 14       	cp	r13, r15
     f9e:	30 f4       	brcc	.+12     	; 0xfac <vfprintf+0x2c4>
     fa0:	04 ff       	sbrs	r16, 4
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <vfprintf+0x2c8>
     fa4:	02 fd       	sbrc	r16, 2
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <vfprintf+0x2c8>
     fa8:	0f 7e       	andi	r16, 0xEF	; 239
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <vfprintf+0x2c8>
     fac:	1d 2d       	mov	r17, r13
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <vfprintf+0x2ca>
     fb0:	1f 2d       	mov	r17, r15
     fb2:	80 2f       	mov	r24, r16
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	04 ff       	sbrs	r16, 4
     fb8:	0c c0       	rjmp	.+24     	; 0xfd2 <vfprintf+0x2ea>
     fba:	fe 01       	movw	r30, r28
     fbc:	ed 0d       	add	r30, r13
     fbe:	f1 1d       	adc	r31, r1
     fc0:	20 81       	ld	r18, Z
     fc2:	20 33       	cpi	r18, 0x30	; 48
     fc4:	11 f4       	brne	.+4      	; 0xfca <vfprintf+0x2e2>
     fc6:	09 7e       	andi	r16, 0xE9	; 233
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <vfprintf+0x2f4>
     fca:	02 ff       	sbrs	r16, 2
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <vfprintf+0x2f2>
     fce:	1e 5f       	subi	r17, 0xFE	; 254
     fd0:	05 c0       	rjmp	.+10     	; 0xfdc <vfprintf+0x2f4>
     fd2:	86 78       	andi	r24, 0x86	; 134
     fd4:	90 70       	andi	r25, 0x00	; 0
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	09 f0       	breq	.+2      	; 0xfdc <vfprintf+0x2f4>
     fda:	1f 5f       	subi	r17, 0xFF	; 255
     fdc:	80 2e       	mov	r8, r16
     fde:	99 24       	eor	r9, r9
     fe0:	03 fd       	sbrc	r16, 3
     fe2:	12 c0       	rjmp	.+36     	; 0x1008 <vfprintf+0x320>
     fe4:	00 ff       	sbrs	r16, 0
     fe6:	0d c0       	rjmp	.+26     	; 0x1002 <vfprintf+0x31a>
     fe8:	fd 2c       	mov	r15, r13
     fea:	1e 15       	cp	r17, r14
     fec:	50 f4       	brcc	.+20     	; 0x1002 <vfprintf+0x31a>
     fee:	fe 0c       	add	r15, r14
     ff0:	f1 1a       	sub	r15, r17
     ff2:	1e 2d       	mov	r17, r14
     ff4:	06 c0       	rjmp	.+12     	; 0x1002 <vfprintf+0x31a>
     ff6:	80 e2       	ldi	r24, 0x20	; 32
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	b3 01       	movw	r22, r6
     ffc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1000:	1f 5f       	subi	r17, 0xFF	; 255
    1002:	1e 15       	cp	r17, r14
    1004:	c0 f3       	brcs	.-16     	; 0xff6 <vfprintf+0x30e>
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <vfprintf+0x328>
    1008:	1e 15       	cp	r17, r14
    100a:	10 f4       	brcc	.+4      	; 0x1010 <vfprintf+0x328>
    100c:	e1 1a       	sub	r14, r17
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <vfprintf+0x32a>
    1010:	ee 24       	eor	r14, r14
    1012:	84 fe       	sbrs	r8, 4
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <vfprintf+0x34c>
    1016:	80 e3       	ldi	r24, 0x30	; 48
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	b3 01       	movw	r22, r6
    101c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1020:	82 fe       	sbrs	r8, 2
    1022:	1f c0       	rjmp	.+62     	; 0x1062 <vfprintf+0x37a>
    1024:	81 fe       	sbrs	r8, 1
    1026:	03 c0       	rjmp	.+6      	; 0x102e <vfprintf+0x346>
    1028:	88 e5       	ldi	r24, 0x58	; 88
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	10 c0       	rjmp	.+32     	; 0x104e <vfprintf+0x366>
    102e:	88 e7       	ldi	r24, 0x78	; 120
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0d c0       	rjmp	.+26     	; 0x104e <vfprintf+0x366>
    1034:	c4 01       	movw	r24, r8
    1036:	86 78       	andi	r24, 0x86	; 134
    1038:	90 70       	andi	r25, 0x00	; 0
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	91 f0       	breq	.+36     	; 0x1062 <vfprintf+0x37a>
    103e:	81 fc       	sbrc	r8, 1
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0x35e>
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <vfprintf+0x360>
    1046:	8b e2       	ldi	r24, 0x2B	; 43
    1048:	07 fd       	sbrc	r16, 7
    104a:	8d e2       	ldi	r24, 0x2D	; 45
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	b3 01       	movw	r22, r6
    1050:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <vfprintf+0x37a>
    1056:	80 e3       	ldi	r24, 0x30	; 48
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	b3 01       	movw	r22, r6
    105c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1060:	fa 94       	dec	r15
    1062:	df 14       	cp	r13, r15
    1064:	c0 f3       	brcs	.-16     	; 0x1056 <vfprintf+0x36e>
    1066:	da 94       	dec	r13
    1068:	f2 01       	movw	r30, r4
    106a:	ed 0d       	add	r30, r13
    106c:	f1 1d       	adc	r31, r1
    106e:	80 81       	ld	r24, Z
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	b3 01       	movw	r22, r6
    1074:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1078:	dd 20       	and	r13, r13
    107a:	a9 f7       	brne	.-22     	; 0x1066 <vfprintf+0x37e>
    107c:	06 c0       	rjmp	.+12     	; 0x108a <vfprintf+0x3a2>
    107e:	80 e2       	ldi	r24, 0x20	; 32
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	b3 01       	movw	r22, r6
    1084:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1088:	ea 94       	dec	r14
    108a:	ee 20       	and	r14, r14
    108c:	c1 f7       	brne	.-16     	; 0x107e <vfprintf+0x396>
    108e:	40 ce       	rjmp	.-896    	; 0xd10 <vfprintf+0x28>
    1090:	f3 01       	movw	r30, r6
    1092:	86 81       	ldd	r24, Z+6	; 0x06
    1094:	97 81       	ldd	r25, Z+7	; 0x07
    1096:	02 c0       	rjmp	.+4      	; 0x109c <vfprintf+0x3b4>
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	2d 96       	adiw	r28, 0x0d	; 13
    109e:	e2 e1       	ldi	r30, 0x12	; 18
    10a0:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__epilogue_restores__>

000010a4 <strnlen_P>:
    10a4:	fc 01       	movw	r30, r24
    10a6:	05 90       	lpm	r0, Z+
    10a8:	61 50       	subi	r22, 0x01	; 1
    10aa:	70 40       	sbci	r23, 0x00	; 0
    10ac:	01 10       	cpse	r0, r1
    10ae:	d8 f7       	brcc	.-10     	; 0x10a6 <strnlen_P+0x2>
    10b0:	80 95       	com	r24
    10b2:	90 95       	com	r25
    10b4:	8e 0f       	add	r24, r30
    10b6:	9f 1f       	adc	r25, r31
    10b8:	08 95       	ret

000010ba <strnlen>:
    10ba:	fc 01       	movw	r30, r24
    10bc:	61 50       	subi	r22, 0x01	; 1
    10be:	70 40       	sbci	r23, 0x00	; 0
    10c0:	01 90       	ld	r0, Z+
    10c2:	01 10       	cpse	r0, r1
    10c4:	d8 f7       	brcc	.-10     	; 0x10bc <strnlen+0x2>
    10c6:	80 95       	com	r24
    10c8:	90 95       	com	r25
    10ca:	8e 0f       	add	r24, r30
    10cc:	9f 1f       	adc	r25, r31
    10ce:	08 95       	ret

000010d0 <fputc>:
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	8c 01       	movw	r16, r24
    10da:	eb 01       	movw	r28, r22
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	81 ff       	sbrs	r24, 1
    10e0:	1b c0       	rjmp	.+54     	; 0x1118 <fputc+0x48>
    10e2:	82 ff       	sbrs	r24, 2
    10e4:	0d c0       	rjmp	.+26     	; 0x1100 <fputc+0x30>
    10e6:	2e 81       	ldd	r18, Y+6	; 0x06
    10e8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	9d 81       	ldd	r25, Y+5	; 0x05
    10ee:	28 17       	cp	r18, r24
    10f0:	39 07       	cpc	r19, r25
    10f2:	64 f4       	brge	.+24     	; 0x110c <fputc+0x3c>
    10f4:	e8 81       	ld	r30, Y
    10f6:	f9 81       	ldd	r31, Y+1	; 0x01
    10f8:	01 93       	st	Z+, r16
    10fa:	f9 83       	std	Y+1, r31	; 0x01
    10fc:	e8 83       	st	Y, r30
    10fe:	06 c0       	rjmp	.+12     	; 0x110c <fputc+0x3c>
    1100:	e8 85       	ldd	r30, Y+8	; 0x08
    1102:	f9 85       	ldd	r31, Y+9	; 0x09
    1104:	80 2f       	mov	r24, r16
    1106:	09 95       	icall
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	31 f4       	brne	.+12     	; 0x1118 <fputc+0x48>
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
    110e:	9f 81       	ldd	r25, Y+7	; 0x07
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	9f 83       	std	Y+7, r25	; 0x07
    1114:	8e 83       	std	Y+6, r24	; 0x06
    1116:	02 c0       	rjmp	.+4      	; 0x111c <fputc+0x4c>
    1118:	0f ef       	ldi	r16, 0xFF	; 255
    111a:	1f ef       	ldi	r17, 0xFF	; 255
    111c:	c8 01       	movw	r24, r16
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <__ultoa_invert>:
    1128:	fa 01       	movw	r30, r20
    112a:	aa 27       	eor	r26, r26
    112c:	28 30       	cpi	r18, 0x08	; 8
    112e:	51 f1       	breq	.+84     	; 0x1184 <__ultoa_invert+0x5c>
    1130:	20 31       	cpi	r18, 0x10	; 16
    1132:	81 f1       	breq	.+96     	; 0x1194 <__ultoa_invert+0x6c>
    1134:	e8 94       	clt
    1136:	6f 93       	push	r22
    1138:	6e 7f       	andi	r22, 0xFE	; 254
    113a:	6e 5f       	subi	r22, 0xFE	; 254
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	af 4f       	sbci	r26, 0xFF	; 255
    1144:	b1 e0       	ldi	r27, 0x01	; 1
    1146:	3e d0       	rcall	.+124    	; 0x11c4 <__ultoa_invert+0x9c>
    1148:	b4 e0       	ldi	r27, 0x04	; 4
    114a:	3c d0       	rcall	.+120    	; 0x11c4 <__ultoa_invert+0x9c>
    114c:	67 0f       	add	r22, r23
    114e:	78 1f       	adc	r23, r24
    1150:	89 1f       	adc	r24, r25
    1152:	9a 1f       	adc	r25, r26
    1154:	a1 1d       	adc	r26, r1
    1156:	68 0f       	add	r22, r24
    1158:	79 1f       	adc	r23, r25
    115a:	8a 1f       	adc	r24, r26
    115c:	91 1d       	adc	r25, r1
    115e:	a1 1d       	adc	r26, r1
    1160:	6a 0f       	add	r22, r26
    1162:	71 1d       	adc	r23, r1
    1164:	81 1d       	adc	r24, r1
    1166:	91 1d       	adc	r25, r1
    1168:	a1 1d       	adc	r26, r1
    116a:	20 d0       	rcall	.+64     	; 0x11ac <__ultoa_invert+0x84>
    116c:	09 f4       	brne	.+2      	; 0x1170 <__ultoa_invert+0x48>
    116e:	68 94       	set
    1170:	3f 91       	pop	r19
    1172:	2a e0       	ldi	r18, 0x0A	; 10
    1174:	26 9f       	mul	r18, r22
    1176:	11 24       	eor	r1, r1
    1178:	30 19       	sub	r19, r0
    117a:	30 5d       	subi	r19, 0xD0	; 208
    117c:	31 93       	st	Z+, r19
    117e:	de f6       	brtc	.-74     	; 0x1136 <__ultoa_invert+0xe>
    1180:	cf 01       	movw	r24, r30
    1182:	08 95       	ret
    1184:	46 2f       	mov	r20, r22
    1186:	47 70       	andi	r20, 0x07	; 7
    1188:	40 5d       	subi	r20, 0xD0	; 208
    118a:	41 93       	st	Z+, r20
    118c:	b3 e0       	ldi	r27, 0x03	; 3
    118e:	0f d0       	rcall	.+30     	; 0x11ae <__ultoa_invert+0x86>
    1190:	c9 f7       	brne	.-14     	; 0x1184 <__ultoa_invert+0x5c>
    1192:	f6 cf       	rjmp	.-20     	; 0x1180 <__ultoa_invert+0x58>
    1194:	46 2f       	mov	r20, r22
    1196:	4f 70       	andi	r20, 0x0F	; 15
    1198:	40 5d       	subi	r20, 0xD0	; 208
    119a:	4a 33       	cpi	r20, 0x3A	; 58
    119c:	18 f0       	brcs	.+6      	; 0x11a4 <__ultoa_invert+0x7c>
    119e:	49 5d       	subi	r20, 0xD9	; 217
    11a0:	31 fd       	sbrc	r19, 1
    11a2:	40 52       	subi	r20, 0x20	; 32
    11a4:	41 93       	st	Z+, r20
    11a6:	02 d0       	rcall	.+4      	; 0x11ac <__ultoa_invert+0x84>
    11a8:	a9 f7       	brne	.-22     	; 0x1194 <__ultoa_invert+0x6c>
    11aa:	ea cf       	rjmp	.-44     	; 0x1180 <__ultoa_invert+0x58>
    11ac:	b4 e0       	ldi	r27, 0x04	; 4
    11ae:	a6 95       	lsr	r26
    11b0:	97 95       	ror	r25
    11b2:	87 95       	ror	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	ba 95       	dec	r27
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__ultoa_invert+0x86>
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	61 05       	cpc	r22, r1
    11c0:	71 05       	cpc	r23, r1
    11c2:	08 95       	ret
    11c4:	9b 01       	movw	r18, r22
    11c6:	ac 01       	movw	r20, r24
    11c8:	0a 2e       	mov	r0, r26
    11ca:	06 94       	lsr	r0
    11cc:	57 95       	ror	r21
    11ce:	47 95       	ror	r20
    11d0:	37 95       	ror	r19
    11d2:	27 95       	ror	r18
    11d4:	ba 95       	dec	r27
    11d6:	c9 f7       	brne	.-14     	; 0x11ca <__ultoa_invert+0xa2>
    11d8:	62 0f       	add	r22, r18
    11da:	73 1f       	adc	r23, r19
    11dc:	84 1f       	adc	r24, r20
    11de:	95 1f       	adc	r25, r21
    11e0:	a0 1d       	adc	r26, r0
    11e2:	08 95       	ret

000011e4 <__prologue_saves__>:
    11e4:	2f 92       	push	r2
    11e6:	3f 92       	push	r3
    11e8:	4f 92       	push	r4
    11ea:	5f 92       	push	r5
    11ec:	6f 92       	push	r6
    11ee:	7f 92       	push	r7
    11f0:	8f 92       	push	r8
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	ca 1b       	sub	r28, r26
    120e:	db 0b       	sbc	r29, r27
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	09 94       	ijmp

0000121c <__epilogue_restores__>:
    121c:	2a 88       	ldd	r2, Y+18	; 0x12
    121e:	39 88       	ldd	r3, Y+17	; 0x11
    1220:	48 88       	ldd	r4, Y+16	; 0x10
    1222:	5f 84       	ldd	r5, Y+15	; 0x0f
    1224:	6e 84       	ldd	r6, Y+14	; 0x0e
    1226:	7d 84       	ldd	r7, Y+13	; 0x0d
    1228:	8c 84       	ldd	r8, Y+12	; 0x0c
    122a:	9b 84       	ldd	r9, Y+11	; 0x0b
    122c:	aa 84       	ldd	r10, Y+10	; 0x0a
    122e:	b9 84       	ldd	r11, Y+9	; 0x09
    1230:	c8 84       	ldd	r12, Y+8	; 0x08
    1232:	df 80       	ldd	r13, Y+7	; 0x07
    1234:	ee 80       	ldd	r14, Y+6	; 0x06
    1236:	fd 80       	ldd	r15, Y+5	; 0x05
    1238:	0c 81       	ldd	r16, Y+4	; 0x04
    123a:	1b 81       	ldd	r17, Y+3	; 0x03
    123c:	aa 81       	ldd	r26, Y+2	; 0x02
    123e:	b9 81       	ldd	r27, Y+1	; 0x01
    1240:	ce 0f       	add	r28, r30
    1242:	d1 1d       	adc	r29, r1
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	ed 01       	movw	r28, r26
    1250:	08 95       	ret

00001252 <_exit>:
    1252:	f8 94       	cli

00001254 <__stop_program>:
    1254:	ff cf       	rjmp	.-2      	; 0x1254 <__stop_program>
